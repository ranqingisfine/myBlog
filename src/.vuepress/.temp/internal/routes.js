export const redirects = JSON.parse("{}")

export const routes = Object.fromEntries([
  ["/", { loader: () => import(/* webpackChunkName: "index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/index.html.js"), meta: {"t":"博客主页","i":"home"} }],
  ["/intro.html", { loader: () => import(/* webpackChunkName: "intro.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/intro.html.js"), meta: {"d":1731110400000,"l":"2024年11月9日","v":"/assets/images/cover3.jpg","e":"\n<p>将你的个人介绍和档案放置在此处。</p>\n","r":{"minutes":0.09,"words":28},"t":"九、介绍页","y":"a"} }],
  ["/demo/", { loader: () => import(/* webpackChunkName: "demo_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/demo/index.html.js"), meta: {"d":1731024000000,"l":"2024年11月8日","c":["使用指南"],"r":{"minutes":0.1,"words":29},"t":"八、主要功能与配置演示","y":"a"} }],
  ["/demo/disable.html", { loader: () => import(/* webpackChunkName: "demo_disable.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/demo/disable.html.js"), meta: {"c":["使用指南"],"g":["禁用"],"e":"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n","r":{"minutes":0.43,"words":128},"t":"布局与功能禁用","i":"gears","O":4,"y":"a"} }],
  ["/demo/encrypt.html", { loader: () => import(/* webpackChunkName: "demo_encrypt.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/demo/encrypt.html.js"), meta: {"c":["使用指南"],"g":["加密"],"n":true,"r":{"minutes":0.51,"words":154},"t":"密码加密的文章","i":"lock","y":"a"} }],
  ["/demo/layout.html", { loader: () => import(/* webpackChunkName: "demo_layout.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/demo/layout.html.js"), meta: {"c":["指南"],"g":["布局"],"e":"<p>布局包括:</p>\n<ul>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/navbar.html\" target=\"_blank\" rel=\"noopener noreferrer\">导航栏</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html\" target=\"_blank\" rel=\"noopener noreferrer\">侧边栏</a></li>\n<li><a href=\"https://theme-hope.vuejs.press/zh/guide/layout/footer.html\" target=\"_blank\" rel=\"noopener noreferrer\">页脚</a></li>\n</ul>","r":{"minutes":0.53,"words":159},"t":"布局","i":"object-group","O":2,"y":"a"} }],
  ["/demo/markdown.html", { loader: () => import(/* webpackChunkName: "demo_markdown.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/demo/markdown.html.js"), meta: {"c":["使用指南"],"g":["Markdown"],"e":"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n","r":{"minutes":3.47,"words":1041},"t":"Markdown 展示","i":"fab fa-markdown","O":2,"y":"a"} }],
  ["/demo/page.html", { loader: () => import(/* webpackChunkName: "demo_page.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/demo/page.html.js"), meta: {"a":"Ms.Hope","d":1577836800000,"l":"2020年1月1日","c":["使用指南"],"g":["页面配置","使用指南"],"u":true,"v":"/assets/images/cover1.jpg","e":"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n","r":{"minutes":1.76,"words":529},"t":"页面配置","i":"file","O":3,"y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/", { loader: () => import(/* webpackChunkName: "一、Java基础_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/index.html.js"), meta: {"d":1730419200000,"l":"2024年11月1日","c":["使用指南"],"r":{"minutes":0.07,"words":21},"t":"一、Java基础","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/", { loader: () => import(/* webpackChunkName: "二、JVM_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/index.html.js"), meta: {"d":1730505600000,"l":"2024年11月2日","c":["使用指南"],"r":{"minutes":0.06,"words":19},"t":"二、JVM","y":"a"} }],
  ["/%E4%B8%83%E3%80%81Kafka/", { loader: () => import(/* webpackChunkName: "七、Kafka_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/七、Kafka/index.html.js"), meta: {"d":1730937600000,"l":"2024年11月7日","c":["使用指南"],"r":{"minutes":0.06,"words":19},"t":"七、Kafka","y":"a"} }],
  ["/%E4%B8%83%E3%80%81Kafka/kafka%E7%9C%8B%E8%BF%99%E4%B8%80%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86.html", { loader: () => import(/* webpackChunkName: "七、Kafka_kafka看这一篇就够了.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/七、Kafka/kafka看这一篇就够了.html.js"), meta: {"d":1733356800000,"l":"2024年12月5日","c":["kafka"],"g":["kafka"],"e":"\n<h2>1、Kafka基础</h2>\n<h3>1.1 消息队列的应用场景</h3>\n<ul>\n<li>缓存/削峰</li>\n<li>解耦</li>\n<li>异步通信</li>\n</ul>\n<h3>1.2 分组消费</h3>\n<p>消费者组內每个消费者负责消费不同分区的数据，一个分区只能由一个组內消费者消费；消费者组之间互不影响。</p>\n<h3>1.3 顺序消费</h3>\n<p>partition是一个有序队列，要保证顺序的有序性，生产者将消息发送到指定的分区上，消费者才能顺序消费。</p>\n<h2>2、Kafka生产者</h2>\n<h3>2.1 生产者消息发送原理</h3>\n<p>消息发送过程中，涉及到两个线程——main线程和Sender线程。在Main线程中创建了一个双端队列RecordAccumulator。main线程将消息发送给RecordAccumulator，Sender线程不断从RecordAccumulator中拉取消息发送到Kafka Broker。</p>","r":{"minutes":19.1,"words":5729},"t":"kafka看这篇就够了","i":"pen-to-square","y":"a"} }],
  ["/%E5%85%AD%E3%80%81Redis/6.1%20%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3Redis.html", { loader: () => import(/* webpackChunkName: "六、Redis_6.1 一文了解Redis.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/六、Redis/6.1 一文了解Redis.html.js"), meta: {"d":1731888000000,"l":"2024年11月18日","c":["Redis"],"g":["redis使用场景","redis watch"],"e":"\n<h2>一、Redis使用场景</h2>\n<ul>\n<li>缓存：将经常被访问的数据存储在Redis中，减少对数据库的访问压力</li>\n<li>计数器：使用Redis的原子操作，实现高并发场景下的计数功能</li>\n<li>分布式锁：使用Redis的原子操作和过期时间设置，实现分布式锁，确保在分布式系统中的数据一致性。</li>\n<li>简单的发布订阅消息系统：实现消息的异步处理</li>\n</ul>\n<h2>二、Redis是单线程的</h2>\n<p>Redis是很快的，官⽅表示，Redis是基于<strong>内存操作</strong>，CPU不是Redis性能瓶颈，Redis的瓶颈是根据机器的<strong>内存和⽹络带宽</strong>，既然可以使⽤单线程来实现，就使⽤单线程了！所有就使⽤了单线程了！</p>","r":{"minutes":2.85,"words":855},"t":"6.1 一文了解Redis","i":"pen-to-square","y":"a"} }],
  ["/%E5%85%AD%E3%80%81Redis/6.2%20Redis%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86.html", { loader: () => import(/* webpackChunkName: "六、Redis_6.2 Redis持久化原理.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/六、Redis/6.2 Redis持久化原理.html.js"), meta: {"d":1731888000000,"l":"2024年11月18日","c":["Redis"],"g":["redis持久化","RDB","AOF"],"e":"\n<p>Redis持久化方式有RDB和AOF</p>\n<h2>一、RDB</h2>\n<p>RDB 是⼀种快照存储持久化⽅式，具体就是将 Redis 某⼀时刻的内存数据保存到硬盘的⽂件当中，默认保存的⽂件名为 dump.rdb ，⽽在 Redis 服务器启动时，会重新加载 dump.rdb ⽂件的数据到内存当中恢复数据。</p>\n<h3>1、开启RDB持久化方式</h3>\n<ul>\n<li>命令生成：客户端可以通过向 Redis 服务器发送 save 或 bgsave 命令让服务器⽣成 rdb ⽂件</li>\n<li>通过服务器配置⽂件指定触发 RDB 条件。</li>\n</ul>\n<h4>1.1 命令生成方式</h4>","r":{"minutes":5.06,"words":1517},"t":"6.2 Redis持久化原理","i":"pen-to-square","y":"a"} }],
  ["/%E5%85%AD%E3%80%81Redis/6.3%20%E4%BF%9D%E8%AF%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7.html", { loader: () => import(/* webpackChunkName: "六、Redis_6.3 保证缓存和数据库的一致性.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/六、Redis/6.3 保证缓存和数据库的一致性.html.js"), meta: {"d":1731888000000,"l":"2024年11月18日","c":["Redis"],"g":["缓存和数据库一致性","只读场景","并发读写场景"],"e":"\n<h2>一、只读场景</h2>\n<p><strong>注意</strong>：单独的只读去数据场景是不会出现不一致。只有读和写在一起才会出现。</p>\n<p>逻辑如下：</p>\n<figure><figcaption></figcaption></figure>\n<p>1、当应用程序需要从数据库读取数据时，先检查缓存数据是否命中。\n2、如果缓存命中，则查下数据库获取数据，同时将数据写到缓存中并设置过期时间，以便后续读取相同数据会命中缓存，最后再把数据返回给调用者。\n3、如果缓存命中，直接返回。</p>\n<h2>二、并发读写数据场景</h2>\n<p><strong>先操作数据库再操作缓存</strong></p>","r":{"minutes":2.17,"words":650},"t":"6.3 保证缓存和数据库的一致性","i":"pen-to-square","y":"a"} }],
  ["/%E5%85%AD%E3%80%81Redis/6.4%20%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.html", { loader: () => import(/* webpackChunkName: "六、Redis_6.4 缓存穿透、缓存击穿、缓存雪崩.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/六、Redis/6.4 缓存穿透、缓存击穿、缓存雪崩.html.js"), meta: {"d":1731974400000,"l":"2024年11月19日","c":["Redis"],"g":["缓存穿透","缓存击穿","缓存雪崩"],"e":"\n<h2>一、缓存穿透</h2>\n<p><strong>缓存穿透：</strong>⽤户想要查询⼀个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询，当⽤户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很⼤的压⼒，这时候就相当于出现了缓存穿透。</p>\n<p>解决方法是：<strong>布隆过滤器</strong>和<strong>缓存空对象</strong></p>\n<h3>1、布隆过滤器</h3>\n<p>布隆过滤器是⼀种数据结构，对所有可能查询的参数以hash形式存储，可以用于检索一个元素是否在一个集合中，在控制层先进⾏校验，不符合则丢弃，从⽽避免了对底层存储系统的查询压⼒。</p>","r":{"minutes":7.19,"words":2156},"t":"6.4 缓存穿透、缓存击穿、缓存雪崩","i":"pen-to-square","y":"a"} }],
  ["/%E5%85%AD%E3%80%81Redis/6.5%20Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html", { loader: () => import(/* webpackChunkName: "六、Redis_6.5 Redisson分布式锁.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/六、Redis/6.5 Redisson分布式锁.html.js"), meta: {"d":1731974400000,"l":"2024年11月19日","c":["Redis"],"g":["分布式锁","分布式读写锁","分布式信号量"],"e":"\n<h2>一、Redisson概念</h2>\n<p><strong>原理</strong></p>\n<ul>\n<li>基于NIO的Netty框架</li>\n<li>将Redis原生数据结构进行封装</li>\n<li>分布式锁基础上还提供了读写锁、公平锁、红锁、信号量、闭锁等</li>\n</ul>\n<p><strong>jedis和redisson分布式锁实现方式区别</strong></p>\n<ul>\n<li>Jedis锁不具有可重入性，redisson具有可重入性</li>\n<li>jedis是只支持单机的，redisson支持集群模式</li>\n<li>redisson<code>目前是官方唯一推荐的java版的分布式锁,他支持 </code>redlock</li>\n</ul>","r":{"minutes":3.97,"words":1190},"t":"6.5 Redisson分布式锁","i":"pen-to-square","y":"a"} }],
  ["/%E5%85%AD%E3%80%81Redis/", { loader: () => import(/* webpackChunkName: "六、Redis_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/六、Redis/index.html.js"), meta: {"d":1730851200000,"l":"2024年11月6日","c":["使用指南"],"r":{"minutes":0.06,"words":19},"t":"六、Redis","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.1%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.1 代理模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.1 代理模式.html.js"), meta: {"d":1730419200000,"l":"2024年11月1日","c":["设计模式"],"g":["代理模式","静态代理","JDK动态代理","cglib动态代理"],"e":"\n<h2>一、介绍</h2>\n<p>代理模式提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p>\n<p>简言之，代理模式就是设置一个中间代理来控制访问原目标对象，以达到增强原对象的功能和简化访问方式。</p>\n<figure><figcaption>代理模式</figcaption></figure>\n<p><strong>UML理解</strong></p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>代理对象实现真实对象的同一个接口，然后代理对象引用真实对象，代理对象给真实对象的方法增强</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div></div></div>","r":{"minutes":7.13,"words":2138},"t":"3.1 代理模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.2%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.2 单例模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.2 单例模式.html.js"), meta: {"d":1731283200000,"l":"2024年11月11日","c":["设计模式"],"g":["单例模式"],"e":"\n<p>单例（Singleton）模式的定义**：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。**例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p>\n<p>单例模式的<strong>优点</strong>：</p>\n<ul>\n<li>单例模式可以保证内存里只有一个实例，减少了内存的开销。</li>\n<li>可以避免对资源的多重占用。</li>\n<li>单例模式设置全局访问点，可以优化和共享资源的访问。</li>\n</ul>\n<p>单例模式的<strong>缺点</strong>：</p>","r":{"minutes":3.51,"words":1053},"t":"3.2 单例模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.3%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.3 观察者模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.3 观察者模式.html.js"), meta: {"d":1731283200000,"l":"2024年11月11日","c":["设计模式"],"g":["观察者模式"],"e":"\n<h2>一、介绍</h2>\n<p>观察者模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，其主要解决一个对象状态改变给其他关联对象通知的问题，保证易用和低耦合。</p>\n<p>观察者模式又叫发布-订阅模式，UML图如下：</p>\n<figure><figcaption>观察者模式</figcaption></figure>\n<p>理解：将观察者对象添加到观察者集合里面，通知方法循环调用观察者集合里面的对象方法。</p>\n<p>观察者多用于类似消息队列的场景。</p>\n<ul>\n<li>具体观察者实现同一个接口</li>\n<li>抽象目标里引用观察者集合，具备新增和移除观察者方法以及通知观察着的通知方法</li>\n<li>具体目标继承抽象目标并实现通知方法</li>\n</ul>","r":{"minutes":3.45,"words":1036},"t":"3.3 观察者模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.4%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.4 策略模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.4 策略模式.html.js"), meta: {"d":1731369600000,"l":"2024年11月12日","c":["设计模式"],"g":["策略模式"],"e":"\n<h2>一、介绍</h2>\n<p>阿里开发规约-编程规约-控制语句-第六条 ：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现。相信大家都见过这种代码：</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (conditionA) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    逻辑1</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (conditionB) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    逻辑2</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> if</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> (conditionC) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    逻辑3</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">} </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">else</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">    逻辑4</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.19,"words":1258},"t":"3.4 策略模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.5%20%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.5 工厂模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.5 工厂模式.html.js"), meta: {"d":1731369600000,"l":"2024年11月12日","c":["设计模式"],"g":["工厂模式"],"e":"\n<h2>一、简单工厂模式</h2>\n<p>含义：我们把被创建的对象称为“产品”，把创建产品的对象称为“工厂”。如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”。</p>\n<p>简单工厂：一个工厂生产多个产品</p>\n<p>违反开闭原则：每新增一个产品就要去修改工厂代码</p>\n<figure><figcaption>简单工厂模式</figcaption></figure>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Client</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> main</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">[] </span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\">args</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //抽象产品</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> interface</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Product</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> show</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //具体产品：ProductA</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ConcreteProduct1</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Product</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> show</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"具体产品1显示...\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">    //具体产品：ProductB</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> ConcreteProduct2</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Product</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> show</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">            System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"具体产品2显示...\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Const</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> PRODUCT_A </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> PRODUCT_B </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> PRODUCT_C </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    static</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> SimpleFactory</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">        public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> static</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Product</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> makeProduct</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">int</span><span style=\"--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic\"> kind</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            switch</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> (kind) {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                case</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Const</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">PRODUCT_A</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                    return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ConcreteProduct1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                case</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\"> Const</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">PRODUCT_B</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">:</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">                    return</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> ConcreteProduct2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            return</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> null</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">        }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">    }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.28,"words":1285},"t":"3.5 工厂模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.6%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.6 模板方法模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.6 模板方法模式.html.js"), meta: {"d":1731369600000,"l":"2024年11月12日","c":["设计模式"],"g":["模版方法模式"],"e":"\n<h2>一、介绍</h2>\n<p>抽象模板角色声明并实现，负责对基本方法的调度，一般以final修饰，不允许具体模板角色重写。模板方法一般也是一个具体方法。</p>\n<p>钩子方法（Hook Method）是模板方法模式中的一种特殊方法，用于在抽象类中提供一个默认的实现，但允许具体子类选择性地进行重写或扩展。钩子方法允许子类在不改变算法骨架的情况下，对算法的某些步骤进行定制。</p>\n<figure><figcaption>模版方法模式</figcaption></figure>\n<p>抽象模板角色声明并实现，负责对基本方法的调度，一般以<strong>final修饰</strong>，不允许具体模板角色重写。模板方法一般也是一个具体方法。</p>","r":{"minutes":4.44,"words":1333},"t":"3.6 模板方法模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.7%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.7 责任链模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.7 责任链模式.html.js"), meta: {"d":1731456000000,"l":"2024年11月13日","c":["设计模式"],"g":["责任链模式"],"e":"\n<h2>一、介绍</h2>\n<p>责任链模式顾名思义是将不同职责的步骤串联起来执行，并且一个步骤执行完成之后才能够执行下一个步骤。从名字可以看出通常责任链模式使用链表来完成。因此当执行任务的请求发起时，从责任链上第一步开始往下传递，直到最后一个步骤完成。在责任链模式当中，客户端只用执行一次流程开始的请求便不再需要参与到流程执行当中，责任链上的流程便能够自己一直往下执行，客户端同样也并不关心执行流程细节，从而实现与流程之间的解耦。</p>\n<figure><figcaption></figcaption></figure>\n<p>责任链模式主要角色如下：</p>\n<figure><figcaption></figcaption></figure>","r":{"minutes":6.25,"words":1874},"t":"3.7 责任链模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.8%20%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "三、设计模式_3.8 适配器模式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/3.8 适配器模式.html.js"), meta: {"d":1731456000000,"l":"2024年11月13日","c":["设计模式"],"g":["适配器模式"],"e":"\n<p>在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。例如，讲中文的人同讲英文的人对话时需要一个翻译，用直流电的笔记本电脑接交流电源时需要一个电源适配器，用计算机访问照相机的 SD 内存卡时需要一个读卡器等。</p>\n<p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式分为<strong>类结构型模式</strong>和<strong>对象结构型模式</strong>两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p>\n<p>理解：<strong>适配者</strong>通过<strong>适配器</strong>转化成想要的<strong>目标</strong></p>","r":{"minutes":5.47,"words":1640},"t":"3.8 适配器模式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "三、设计模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/三、设计模式/index.html.js"), meta: {"d":1730592000000,"l":"2024年11月3日","c":["使用指南"],"r":{"minutes":0.07,"words":22},"t":"三、设计模式","y":"a"} }],
  ["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "四、并发编程_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/四、并发编程/index.html.js"), meta: {"d":1730678400000,"l":"2024年11月4日","c":["使用指南"],"r":{"minutes":0.07,"words":22},"t":"四、并发编程","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/", { loader: () => import(/* webpackChunkName: "五、MySQL_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/index.html.js"), meta: {"d":1730764800000,"l":"2024年11月5日","c":["使用指南"],"r":{"minutes":0.06,"words":19},"t":"五、MySQL","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/1.1.1%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.1 JDK8新特性_1.1.1 接口的静态方法和默认方法.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.1 JDK8新特性/1.1.1 接口的静态方法和默认方法.html.js"), meta: {"d":1730419200000,"l":"2024年11月1日","c":["JDK8新特性"],"g":["default关键字","static关键字"],"e":"\n<p>JDK8前interface</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>变量修饰符：public、static、final</span></span>\n<span class=\"line\"><span>方法：public、abstract</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.01,"words":604},"t":"1.1.1 接口的静态方法和默认方法","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/1.1.2%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.1 JDK8新特性_1.1.2 Lambda表达式.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.1 JDK8新特性/1.1.2 Lambda表达式.html.js"), meta: {"d":1732060800000,"l":"2024年11月20日","c":["JDK8新特性"],"g":["Lambda表达式"],"e":"\n<h2>一、匿名内部类</h2>\n<p>能够使用Lambda的依据是必须有相应的函数接口（函数接口，是指内部只有一个抽象方法的接口）接口名和函数名都一同省掉了。</p>\n<h3>1、无参函数的简写</h3>\n<p>JDK7代码</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">\t\t\tnew</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Thread</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Runnable</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">() {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            @</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#E5C07B\">Override</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">            public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> void</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> run</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">()</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">                System</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E5C07B\">out</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">println</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">\"Thread run()\"</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">            }</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">        })</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">.</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">start</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">();</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.71,"words":1113},"t":"1.1.2 Lambda表达式","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.3%20Java%20IO%E6%A8%A1%E5%9E%8B/1.3.1%20BIO%E3%80%81NIO.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.3 Java IO模型_1.3.1 BIO、NIO.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.3 Java IO模型/1.3.1 BIO、NIO.html.js"), meta: {"d":1731888000000,"l":"2024年11月18日","c":["Java IO模型"],"g":["BIO","NIO","多路复用","信号驱动","异步IO"],"e":"\n<p>Java的IO分为两大类</p>\n<ul>\n<li>阻塞IO（Blocking IO），基于字节流和字符流，以阻塞式IO操作为主。如FileInputStream、InputStreamReader等</li>\n<li>非阻塞IO（NIO），基于通道（Channel）和缓冲区（Buffer）进行操作，允许线程在等待IO时执行其它任务。如ByteBuffer、FileChannel等</li>\n</ul>\n<p><strong>阻塞 I/O（Blocking I/O）</strong>：在这种模型中，I/O 操作是阻塞的，即执行 I/O 操作时，线程会被阻塞，直到操作完成。在阻塞 I/O 模型中，每个连接都需要一个线程来处理。因此，对于大量并发连接的场景，阻塞 I/O 模型的性能较差。</p>","r":{"minutes":4.32,"words":1295},"t":"1.3.1 BIO、NIO","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.4%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/1.4.1%20equals%E3%80%81hashcode.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.4 面向对象编程_1.4.1 equals、hashcode.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.4 面向对象编程/1.4.1 equals、hashcode.html.js"), meta: {"d":1732060800000,"l":"2024年11月20日","c":["面向对象编程"],"g":["equals","hashcode"],"e":"\n<h2>一、概念</h2>\n<p>equals方法和hashCode方法Object类中的两个基础方法，它们共同协作来判断两个对象是否相等。——原因在于性能。</p>\n<p>使用过 HashMap 我们就知道，通过 hash 计算之后，我们就可以直接定位出某个值存储的位置了，那么试想一下，如果你现在要查询某个值是否在集合中？如果不通过 hash 方式直接定位元素（的存储位置），那么就只能按照集合的前后顺序，一个一个的询问比对了，而这种依次比对的效率明显低于 hash 定位的方式。这就是 hash 以及 hashCode 存在的价值。</p>\n<p>当我们对比两个对象是否相等时，我们就可以先使用 hashCode 进行比较，如果比较的结果是 true，那么就可以使用 equals 再次确认两个对象是否相等，如果比较的结果是 true，那么这两个对象就是相等的，否则其他情况就认为两个对象不相等。这样就大大的提升了对象比较的效率，这也是为什么 Java 设计使用 hashCode 和 equals 协同的方式，来确认两个对象是否相等的原因。</p>","r":{"minutes":6.11,"words":1834},"t":"1.4.1 equals、hashcode","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.4%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/1.4.2%20%E5%8F%8D%E5%B0%84.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.4 面向对象编程_1.4.2 反射.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.4 面向对象编程/1.4.2 反射.html.js"), meta: {"d":1732406400000,"l":"2024年11月24日","c":["面向对象编程"],"g":["反射"],"e":"\n<h2>一、概念</h2>\n<p>反射就是可以从类里面拿字段、构造方法、成员方法。</p>\n<figure><figcaption></figcaption></figure>\n<p>比如IDEA编辑器里面的提示信息就是用的反射。</p>\n<ul>\n<li>\n<p>利用<strong>反射</strong>创建的对象<strong>可以无视修饰符</strong>调用类里面的内容</p>\n</li>\n<li>\n<p>可以跟<strong>配置文件结合起来使用</strong>，把要创建的对象信息和方法写在配置文件中。</p>\n<p>读取到什么类，就创建什么类的对象</p>\n<p>读取到什么方法，就调用什么方法</p>\n<p>此时当需求变更的时候不需要修改代码，只要修改配置文件即可。</p>\n</li>\n</ul>","r":{"minutes":8.6,"words":2580},"t":"1.4.2 反射","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.4%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/1.4.3%20String%E7%9C%8B%E8%BF%99%E7%AF%87%E5%B0%B1%E5%A4%9F%E4%BA%86.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.4 面向对象编程_1.4.3 String看这篇就够了.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.4 面向对象编程/1.4.3 String看这篇就够了.html.js"), meta: {"d":1733356800000,"l":"2024年12月5日","c":["面向对象编程"],"g":["String"],"e":"\n<h2>一、字符串源码解读</h2>\n<h3>String类的声明</h3>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">public</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> class</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> String</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">    implements</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E06C75\"> java.io.</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Serializable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> Comparable</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&lt;</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">String</span><span style=\"--shiki-light:#C18401;--shiki-dark:#ABB2BF\">&gt;,</span><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\"> CharSequence</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> {</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">}</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":19.69,"words":5906},"t":"1.4.3 String看这篇就够了","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.5%20Java%E9%9B%86%E5%90%88/1.5.1%20Collection.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.5 Java集合_1.5.1 Collection.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.5 Java集合/1.5.1 Collection.html.js"), meta: {"d":1732060800000,"l":"2024年11月20日","c":["面向对象编程"],"g":["Java集合","ArrayList"],"e":"\n<h2>一、概念</h2>\n<p>Collection是集合类的上级接口，子接口主要有Set和List，Collections是针对集合类的一个帮助类，提供了操作集合的工具方法。</p>\n<p>Collection：单列集合\nList：元素有序的，可重复的\nVector：线程安全，但是速度慢，底层结构是数组结构已经被ArrayList取代\nArrayList：线程不安全，查找速度快，底层是数组结构\nLinkedList：线程不安全，增删快，底层是链表结构\nSet：元素是无序的，不可重复的，取出元素的方法只有迭代器\nHashSet：线程不安全，存取速度快。底层依赖hashCode和equals方法保证唯一性。（<a href=\"https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.4%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/1.4.1%20%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3equals%E5%92%8Chashcode.html\" target=\"_blank\" rel=\"noopener noreferrer\">equals和hashCode理解</a>）\nTreeSet：线程不安全，可以对Set中的元素进行排序</p>","r":{"minutes":3.2,"words":959},"t":"1.4.2 Collection","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.5%20Java%E9%9B%86%E5%90%88/1.5.2%20HashMap%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.5 Java集合_1.5.2 HashMap源码分析.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.5 Java集合/1.5.2 HashMap源码分析.html.js"), meta: {"d":1732406400000,"l":"2024年11月24日","c":["面向对象编程"],"g":["hashmap"],"e":"\n<h2>前言</h2>\n<p>Map：双列集合。\nHashTable：线程安全，速度快。底层是哈希表数据结构。不允许null作为键，允许null作为值。\nHashMap：线程不安全，速度慢，底层是哈希表数据结构。允许null作为键，null作为值，代替了hashtable。\nLinkedHashMap：可以保证HashMap集合有序，存入顺序和取出的顺序一致。\nTreeMap：可以用来对Map集合中的键进行排序。</p>\n<h2>一、基础入门</h2>\n<h3>1、数组的优势/劣势</h3>\n<p>数组在内存空间是连续的，</p>\n<p>优势：通过元素索引（index）快速访问到元素</p>","r":{"minutes":13.74,"words":4121},"t":"1.5.2 HashMap源码分析","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.3%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/2.3.4%20HotSpot%E7%9A%84%E7%AE%97%E6%B3%95%E7%BB%86%E8%8A%82%E5%AE%9E%E7%8E%B0.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.3 垃圾收集器与内存分配策略_2.3.4 HotSpot的算法细节实现.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.3 垃圾收集器与内存分配策略/2.3.4 HotSpot的算法细节实现.html.js"), meta: {"d":1733443200000,"l":"2024年12月6日","c":["JVM","垃圾收集器与内存分配策略"],"g":["HotSpot"],"e":"\n<p>HotSpot虚拟机如何发起内存回收、如何加速内存回收以及如何保证回收正确性的，看完这篇文章就懂了～</p>\n<ul>\n<li>\n<p>根节点枚举：找到GC Roots，这一步骤必须暂停用户线程。使用OopMap的数据结构得到存放的引用对象</p>\n</li>\n<li>\n<p>安全点：在特定位置记录了GC Roots的信息，这些位置称为安全点，强制要求线程执行到安全点后才能暂停，采用主动式中断线程</p>\n</li>\n<li>\n<p>安全区域：安全点只能保证程序执行时不太长时间进入垃圾收集过程的安全点，但是，程序不执行的时候（处理器没有分配执行时间比如Sleep/Blocked），需要安全区域来解决。\n安全区域能够保证某一段代码片段中引用关系不用发生变化，这个区域中任意地方开始垃圾收集都是安全的。</p>\n</li>\n<li>\n<p>记忆集与卡表：解决对象跨代引用所带来的问题，垃圾收集器在新生代中建立了记忆集的数据结构，用以避免把整个老年代加进GC Roots扫描范围。卡表是一种记忆集实现形式</p>\n<ul>\n<li>卡表中每个元素对应着卡页</li>\n<li>卡页中存在跨代指针，则卡表数组表示为1</li>\n<li>筛选卡表中变脏的元素</li>\n</ul>\n</li>\n<li>\n<p>写屏障：维护卡表的元素，比如何时变脏，谁来变脏</p>\n</li>\n</ul>","r":{"minutes":2.15,"words":646},"t":"2.3.4 HotSpot的算法细节实现","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.1%20%E8%AF%AD%E6%B3%95%E7%B3%96.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.7 前端编译与优化_2.7.1 语法糖.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.7 前端编译与优化/2.7.1 语法糖.html.js"), meta: {"d":1730678400000,"l":"2024年11月4日","c":["JVM","前端编译与优化"],"g":["final关键字","泛型","装箱拆箱"],"e":"\n<p>指的是在计算机语言中添加的某种语法，这种语法对语言的编译结果和功能并没有实际影响，但是却能更方便程序员使用该语言。</p>\n<p>常见的语法糖：泛型、自动装箱拆箱、条件编译等。</p>\n<p><strong>解语法糖</strong>：Java虚拟机运行时并不支持这些语法，它们在编译阶段会还原回原始的基础语法结构，这个过程叫解语法糖。</p>\n","r":{"minutes":0.53,"words":159},"t":"2.7.1 语法糖","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.2%20%E6%B3%9B%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.7 前端编译与优化_2.7.2 泛型.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.7 前端编译与优化/2.7.2 泛型.html.js"), meta: {"d":1730678400000,"l":"2024年11月4日","c":["JVM","前端编译与优化"],"g":["泛型","类型擦除"],"e":"\n<p>泛型的本质是参数化类型或者参数化多态的应用。</p>\n<h2>概念</h2>\n<p>Java语言中的泛型只在程序源码中存在，在编译之后的字节码文件中，全部泛型都被替换为原来的裸类型，并在相应的地方插入了强制转型代码。因此对于Java来说，<code>ArrayList&lt;Integer&gt;</code>与<code>ArrayList&lt;String&gt;</code>其实是同一个类型。</p>\n<p><strong>优缺点</strong></p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">缺点：性能低，需要不断的拆箱和装箱</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">优点：擦除式泛型的实现只需要在Javac编译器上做出改进即可，不需要改动字节码、不需要改动虚拟机，保证了和之前版本的兼容性。</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.24,"words":973},"t":"2.7.2 泛型","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.3%20%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.7 前端编译与优化_2.7.3 自动装箱、拆箱.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.7 前端编译与优化/2.7.3 自动装箱、拆箱.html.js"), meta: {"d":1730678400000,"l":"2024年11月4日","c":["JVM","前端编译与优化"],"g":["装箱、拆箱","语法糖"],"e":"\n<h2>一、什么是装箱</h2>\n<p>为什么要装箱？——让基本类型具备对象的特征，实现更多的功能。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">new</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> Integer</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">)</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//JDK5前必须new</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#C18401;--shiki-dark:#E5C07B\">Integer</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> i</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//JDK5后自动装箱</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":2.19,"words":658},"t":"2.7.3 自动装箱、拆箱","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.1%20final%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%B9%E7%90%86%E8%A7%A3.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.2 关键字_1.2.1 final关键字对理解.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.2 关键字/1.2.1 final关键字对理解.html.js"), meta: {"d":1730332800000,"l":"2024年10月31日","c":["JVM"],"g":["final关键字","final内存语义"],"e":"\n<h2>一、修饰基本数据类型</h2>\n<p>当final修饰的是一个基本数据类型数据时, 这个数据的值在初始化后将不能被改变。final修饰基本数据类型时的内存示意图：</p>\n<figure><figcaption>image</figcaption></figure>\n<p>变量a在初始化后将永远指向003这块内存, 而这块内存在初始化后将永远保存数值100。</p>\n<div class=\"language-java line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"java\" data-title=\"java\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">final</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> int</span><span style=\"--shiki-light:#E45649;--shiki-dark:#E06C75\"> a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#E06C75\">a</span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">30</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">//编译器会报错提示无法将值赋给final变量a</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.8,"words":1139},"t":"1.2.1 final关键字的理解","i":"pen-to-square","y":"a"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html", { loader: () => import(/* webpackChunkName: "一、Java基础_1.2 关键字_1.2.2 synchronized关键字.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.2 关键字/1.2.2 synchronized关键字.html.js"), meta: {"d":1731024000000,"l":"2024年11月8日","c":["关键字","并发编程"],"g":["synchronized关键字"],"e":"\n<p>Java里synchronized关键字保障互斥同步，这是一种块结构的同步语法。</p>\n<p>synchronized具体表现为以下三种形式：</p>\n<ul>\n<li>对于普通同步方法，锁是当前实例对象</li>\n<li>对于静态同步方法，锁是当前类的Class对象</li>\n<li>对于同步方法块，锁是synchronized括号里配置的对象</li>\n</ul>\n<p><strong>synchronized原理</strong>：synchronized关键字经过Javac编译之后，会在同步块前后分别形成monitorenter和monitorexit两个字节码指令。在执行monitorenter指令时，首先要去尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经持有了那个对象的锁，就把锁的计数器的值增加一，而在执行monitorexit指令时会将锁计数器的值减一。一旦计数器的值为零，锁随即就被释放了。如果获取对象锁失败，那当前线程就应当被阻塞等待，直到请求锁定的对象被持有它的线程释放为止。</p>","r":{"minutes":1.84,"words":553},"t":"1.2.2 synchronized关键字的理解","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.1%20%E8%A1%A1%E9%87%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.8 Java内存模型与线程_2.8.1 衡量服务器性能.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.8 Java内存模型与线程/2.8.1 衡量服务器性能.html.js"), meta: {"d":1730678400000,"l":"2024年11月4日","c":["JVM","Java内存模型与线程"],"g":["QPS","TPS","PV","UV","RT","最佳线程数"],"e":"\n<blockquote>\n<p>QPS</p>\n</blockquote>\n<p>QPS表示系统/接口每秒能够处理的查询请求次数</p>\n<blockquote>\n<p>TPS</p>\n</blockquote>\n<p>TPS表示系统每秒能响应的请求次数（事务数），可以衡量一个服务器性能的高低好坏。</p>\n<p>TPS和QPS区别：一个事务指客户端向服务器发送请求然后服务器作出反应的过程。而在TPS中，为处理1次请求可能会引发后续多次对服务器端的访问才能完成这次工作。每次访问都算1次QPS，所以一次TPS可能包含多个QPS。</p>\n<p>如：访问一个页面会请求服务器3次，产生了1个T，3个Q。</p>","r":{"minutes":1.26,"words":379},"t":"2.8.1 衡量服务器性能","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.2%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.8 Java内存模型与线程_2.8.2 Java内存模型.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.8 Java内存模型与线程/2.8.2 Java内存模型.html.js"), meta: {"d":1730851200000,"l":"2024年11月6日","c":["JVM","Java内存模型与线程"],"g":["主内存与工作内存","volatile关键字","Java内存模型特征","happens-before"],"e":"\n<h2>一、主内存与工作内存</h2>\n<p>Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存保存了被该线程使用的变量的主内存副本，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的数据。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p>\n<h2>二、volatile型变量特殊规则</h2>\n<p>一个变量被定义成volatile后，它将具备两项特性：</p>\n<h3>1、可见性</h3>\n<p>保证此变量对所有线程的可见性，这里的“可见性”是指一条线程修改了这个变量的值，新值对于其他线程来说是立即可知的</p>","r":{"minutes":7.98,"words":2394},"t":"2.8.2 Java内存模型","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.3%20Java%E4%B8%8E%E7%BA%BF%E7%A8%8B.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.8 Java内存模型与线程_2.8.3 Java与线程.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.8 Java内存模型与线程/2.8.3 Java与线程.html.js"), meta: {"d":1730851200000,"l":"2024年11月6日","c":["JVM","Java内存模型与线程"],"g":["内核线程实现","用户线程实现","混合实现","线程调度","状态转换"],"e":"\n<p>进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。Thread所有关键方法都被声明为Native。</p>\n<p>操作系统实现线程的三种方式：</p>\n<ul>\n<li>使用内核线程实现（线程和内核线程1:1实现）</li>\n<li>使用用户线程实现（进程和用户线程1:N实现）</li>\n<li>使用用户线程➕轻量级进程混合实现（N:M实现）</li>\n</ul>\n<h2>一、内核线程实现</h2>\n<p><strong>Java线程是采用内核线程来实现的。</strong></p>\n<p>内核线程是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。</p>","r":{"minutes":4.32,"words":1295},"t":"2.8.3 Java与线程","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.4%20Java%E4%B8%8E%E5%8D%8F%E7%A8%8B.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.8 Java内存模型与线程_2.8.4 Java与协程.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.8 Java内存模型与线程/2.8.4 Java与协程.html.js"), meta: {"d":1730937600000,"l":"2024年11月7日","c":["JVM","Java内存模型与线程"],"g":["线程缺陷","协程"],"e":"\n<h2>一、线程的缺陷</h2>\n<p>在理解虚拟线程前，我们先回顾一下线程的特点：</p>\n<ul>\n<li>线程是由操作系统创建并调度的资源；</li>\n<li>线程切换会耗费大量CPU时间；</li>\n<li>一个系统能同时调度的线程数量是有限的，通常在几百至几千级别。</li>\n</ul>\n<p>因此，我们说线程是一种重量级资源。在服务器端，对用户请求，通常都实现为一个线程处理一个请求。由于用户的请求数往往远超操作系统能同时调度的线程数量，所以通常使用线程池来尽量减少频繁创建和销毁线程的成本</p>\n<p>对于需要处理大量IO请求的任务来说，使用线程是低效的，因为一旦读写IO，线程就必须进入等待状态，直到IO数据返回。常见的IO操作包括：</p>","r":{"minutes":3.18,"words":954},"t":"2.8.4 Java与协程","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.1%20Java%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.9 线程安全与锁优化_2.9.1 Java语言中的线程安全.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.9 线程安全与锁优化/2.9.1 Java语言中的线程安全.html.js"), meta: {"d":1730937600000,"l":"2024年11月7日","c":["JVM","前端编译与优化"],"g":["泛型","类型擦除"],"e":"\n<p>什么是<strong>线程安全</strong>：当多个线程同时访问一个对象时，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。</p>\n<p>Java语言中操作共享的数据分为以下五类：</p>\n<ul>\n<li>不可变</li>\n<li>绝对线程安全</li>\n<li>相对线程安全</li>\n<li>线程兼容</li>\n<li>线程对立</li>\n</ul>\n<h2>1、不可变</h2>\n<p>不可变的对象一定是线程安全的，用final关键字修饰就可以保证它是不可变的。可以类比java.lang.String类的对象实例，它是一个典型的不可变对象，用户调用它的subString()、replace()、和concat()这些方法都不会影响它原来的值，只会返回一个新构建的字符串（关于String字符串的理解后续会发布一篇）。</p>","r":{"minutes":4.02,"words":1206},"t":"2.9.1 Java语言中的线程安全","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.2%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.9 线程安全与锁优化_2.9.2 线程安全的实现方法.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.9 线程安全与锁优化/2.9.2 线程安全的实现方法.html.js"), meta: {"d":1731196800000,"l":"2024年11月10日","c":["线程安全的实现方法"],"g":["互斥同步","非阻塞同步","无同步方案"],"e":"\n<h2>一、互斥同步（阻塞同步）</h2>\n<p>互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。</p>\n<p>synchronized和ReentrantLock是互斥同步的实现，可参考<a href=\"https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html\" target=\"_blank\" rel=\"noopener noreferrer\">synchronized关键字的理解</a>文章和<a href=\"https://ranqingisfine.github.io/myBlog/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.3%20ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81.html\" target=\"_blank\" rel=\"noopener noreferrer\">Reentrant重入锁</a>文章。</p>","r":{"minutes":3.25,"words":974},"t":"2.9.2 线程安全的实现方法","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.3%20%E9%94%81%E4%BC%98%E5%8C%96.html", { loader: () => import(/* webpackChunkName: "二、JVM_2.9 线程安全与锁优化_2.9.3 锁优化.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.9 线程安全与锁优化/2.9.3 锁优化.html.js"), meta: {"d":1731196800000,"l":"2024年11月10日","c":["线程安全的实现方法"],"g":["锁优化","锁消除","锁膨胀","轻量级锁","偏向锁"],"e":"\n<p>有哪些锁优化技术？</p>\n<ul>\n<li>自适应自旋</li>\n<li>锁消除</li>\n<li>锁膨胀</li>\n<li>轻量级锁</li>\n<li>偏向锁</li>\n</ul>\n<h2>一、自旋锁与自适应锁</h2>\n<p>互斥同步对性能最大的影响是阻塞的实现，挂起和恢复线程操作都需要转入内核态中完成。</p>\n<p><strong>自旋锁</strong>：如果有多个处理器核心，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一会儿”，但不放弃处理器的执行时间，看看持有锁的线程释放很快就会释放锁。为了让线程等待，我们只须让线程执行一个忙循环（自旋）。</p>","r":{"minutes":9.42,"words":2827},"t":"2.9.3 锁优化","i":"pen-to-square","y":"a"} }],
  ["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.2%20%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8.html", { loader: () => import(/* webpackChunkName: "四、并发编程_4.5 Java中的锁_4.5.2 队列同步器.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/四、并发编程/4.5 Java中的锁/4.5.2 队列同步器.html.js"), meta: {"d":1732492800000,"l":"2024年11月25日","c":["Java中的锁","队列同步器"],"g":["AQS"],"e":"\n<p>队列同步器（AbstractQueuedSynchronizer）简称AQS，是用来构建锁或者其他同步组件的基础框架，它使用了一个int成员变量表示同步状态，通过内置FIFO队列来完成资源获取线程的排队工作。</p>\n<p>同步器的主要使用方式是继承，子类通过继承同步器并实现它的抽象方法来管理同步状态，抽象方法实现的过程中免不了要对同步状态进行更改，这时就需要同步器AbstractQueuedSynchronizer提供的3个方法进行操作，因为它们能够保证状态的改变是安全的：</p>\n<ul>\n<li>getState()</li>\n<li>setState(int newState)</li>\n<li>compareAndSetState(int expect,int update)</li>\n</ul>","r":{"minutes":16.82,"words":5046},"t":"4.5.2 队列同步器","i":"pen-to-square","y":"a"} }],
  ["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.3%20ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81.html", { loader: () => import(/* webpackChunkName: "四、并发编程_4.5 Java中的锁_4.5.3 ReentrantLock重入锁.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/四、并发编程/4.5 Java中的锁/4.5.3 ReentrantLock重入锁.html.js"), meta: {"d":1732579200000,"l":"2024年11月26日","c":["并发编程","Java中的锁"],"g":["ReentrantLock"],"e":"\n<p>从这篇文章<a href=\"https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html\" target=\"_blank\" rel=\"noopener noreferrer\">synchronized关键字的理解</a>可以看到synchronized的局限性，除了synchronized关键字外，java.util.concurrent.locks.Lock接口成为Java的另一种全新的互斥同步手段。基于Lock接口，用户能够以非块结构来实现互斥同步。</p>","r":{"minutes":7.32,"words":2197},"t":"4.5.3 ReentrantLock重入锁","i":"pen-to-square","y":"a"} }],
  ["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.4%20%E8%AF%BB%E5%86%99%E9%94%81.html", { loader: () => import(/* webpackChunkName: "四、并发编程_4.5 Java中的锁_4.5.4 读写锁.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/四、并发编程/4.5 Java中的锁/4.5.4 读写锁.html.js"), meta: {"d":1732665600000,"l":"2024年11月27日","c":["并发编程","Java中的锁"],"g":["读写锁"],"e":"\n<h2>一、概念</h2>\n<p>先代入两个问题：1、只在写操作加互斥锁不行吗，为什么非要读写锁。2、什么场景会用到读写锁。</p>\n<p>读写锁在同一时刻可以允许多个读线程访问，但是在写线程访问时，所有的读线程和其它写线程均被阻塞。特点是<strong>读读不互斥、读写互斥、写写互斥</strong>。</p>\n<p>读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大提升，它的优点有：</p>\n<ul>\n<li>提高了程序执行性能：多个读锁可以同时执行，相比于普通锁在任何情况下都要排队执行来说，读写锁提高了程序的执行性能</li>\n<li>避免读到临时数据：读锁和写锁是互斥排队执行的，这样可以保证了读取操作不会读到写了一半的临时数据。</li>\n</ul>","r":{"minutes":2.64,"words":793},"t":"4.5.4 读写锁","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.1%20%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.1 事务_5.1.1 事务及其特性.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.1 事务/5.1.1 事务及其特性.html.js"), meta: {"d":1731283200000,"l":"2024年11月11日","c":["MySQL","事务"],"g":["脏读","不可重复读","幻读"],"e":"\n<p><strong>什么是事务</strong>：事务，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。</p>\n<p>假如A转账给B 100 元，先从A的账户里扣除 100 元，再在 B 的账户上加上 100 元。如果扣完A的100元后，还没来得及给B加上，银行系统异常了，最后导致A的余额减少了，B的余额却没有增加。所以就需要事务，将A的钱回滚回去，就是这么简单。</p>\n<h2>一、事务的四大特性</h2>\n<figure><figcaption>事务的四大特性</figcaption></figure>\n<ul>\n<li>\n<p><strong>原子性：</strong> 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部都执行，要么都不执行。原子性由undo log日志来保证。</p>\n<p>理解：生单和减库存要保证原子性。</p>\n</li>\n<li>\n<p><strong>一致性：</strong> 使用事务的最终目的，由业务代码正确逻辑保证。</p>\n<p>理解：指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。</p>\n</li>\n<li>\n<p><strong>隔离性：</strong> 多个事务并发访问时，事务之间是相互隔离的，一个事务不应该被其他事务干扰，多个并发事务之间要相互隔离。。</p>\n<p>隔离性由加锁和MVCC实现的。</p>\n</li>\n<li>\n<p><strong>持久性：</strong> 表示事务完成提交后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。持久性由redo log实现的，比如事务的两阶段提交。</p>\n</li>\n</ul>","r":{"minutes":3.63,"words":1090},"t":"5.1.1 事务及其特性","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.2%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.1 事务_5.1.2 事务的四大隔离级别.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.1 事务/5.1.2 事务的四大隔离级别.html.js"), meta: {"d":1731369600000,"l":"2024年11月12日","c":["MySQL","事务"],"g":["读未提交","读已提交","可重复读","串行化"],"e":"\n<p>导语：在看这文章的时候，脑海先想到平时代码里是如何用事务的，用的什么注解～</p>\n<p>既然并发事务存在<strong>脏读、不可重复、幻读</strong>等问题，InnoDB实现了哪几种事务的隔离级别应对呢？</p>\n<ul>\n<li>读未提交（Read Uncommitted）</li>\n<li>读已提交（Read Committed）</li>\n<li>可重复读（Repeatable Read）（mysql默认隔离级别）</li>\n<li>串行化（Serializable）</li>\n</ul>\n<h2>一、读未提交（Read Uncommitted）</h2>\n<p>我们去数据库给它设置<strong>读未提交</strong>隔离级别，实践一下吧~</p>","r":{"minutes":4.33,"words":1298},"t":"5.1.2 事务的四大隔离级别","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.3%20MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.1 事务_5.1.3 MVCC多版本并发控制.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.1 事务/5.1.3 MVCC多版本并发控制.html.js"), meta: {"d":1731456000000,"l":"2024年11月13日","c":["MySQL","事务"],"g":["MVCC"],"e":"\n<h2>一、什么是MVCC</h2>\n<p>MVCC解决的不是幻读，而是不可重复读。</p>\n<p><strong>多版本控制</strong>: 指的是一种提高并发的技术。最早的数据库系统，只有读读之间可以并发，读写，写读，写写都要阻塞。引入多版本之后，<strong>只有写写之间相互阻塞</strong>，其他三种操作都可以并行，这样大幅度提高了InnoDB的并发度。</p>\n<p>在内部实现中，InnoDB通过undo log保存每条数据的多个版本，并且能够找回数据历史版本提供给用户读，每个事务读到的数据版本可能是不一样的。在同一个事务中，用户只能看到该事务创建快照之前已经提交的修改和该事务本身做的修改。</p>","r":{"minutes":8.59,"words":2577},"t":"5.1.3 MVCC多版本并发控制","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.4%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.1 事务_5.1.4 事务的两阶段提交.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.1 事务/5.1.4 事务的两阶段提交.html.js"), meta: {"d":1731542400000,"l":"2024年11月14日","c":["MySQL","事务的两阶段提交"],"g":["redo log","bin log"],"e":"\n<p>事务四大特性之一的持久性由事务的两阶段提交来保证。事务是数据库中一组原子性的操作，要么全部成功，要么全部失败。</p>\n<p>在 MySQL 中，我们可以使用 <code>begin</code> 或 <code>start transaction</code> 命令开启一个事务，使用 <code>commit</code> 命令提交一个事务，或者使用 <code>rollback</code> 命令回滚一个事务。例如：</p>\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">begin</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">update</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> account </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">set</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> balance </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> balance - </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 1</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">update</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> account </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">set</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> balance </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> balance + </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">100</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> where</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> id </span><span style=\"--shiki-light:#383A42;--shiki-dark:#56B6C2\">=</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 2</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">commit</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":4.76,"words":1427},"t":"5.1.4 事务的两阶段提交","i":"pen-to-square","y":"a"} }],
  ["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.2%20Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/4.2.3%20Java%E5%AE%9E%E7%8E%B0%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-%E5%BE%AA%E7%8E%AFCAS.html", { loader: () => import(/* webpackChunkName: "四、并发编程_4.2 Java并发机制的底层实现原理_4.2.3 Java实现原子操作-循环CAS.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/四、并发编程/4.2 Java并发机制的底层实现原理/4.2.3 Java实现原子操作-循环CAS.html.js"), meta: {"d":1731196800000,"l":"2024年11月10日","c":["并发编程","CAS"],"g":["CAS","Atomic类"],"e":"\n<p>Java实现原子操作的方式：</p>\n<ul>\n<li>使用锁机制实现原子操作</li>\n<li>循环CAS实现原子操作</li>\n</ul>\n<p>本文主要记录使用循环CAS的实现方式。</p>\n<h2>一、什么是CAS</h2>\n<p>顾名思义，CAS指的是比较并交换，需要有三个操作数</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>        V\t\t\t\t\t\t\t           A\t\t\t\t\t\t\tB</span></span>\n<span class=\"line\"><span> 变量的内存位置                 旧的预期值      准备设置的新值</span></span>\n<span class=\"line\"><span>（可通过它获取内存中的的值）</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.6,"words":1080},"t":"4.2.3 Java实现原子操作-循环CAS","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.1%20%E8%A1%8C%E9%94%81%E3%80%81%E8%A1%A8%E9%94%81.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.2 锁_5.2.1 行锁、表锁.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.2 锁/5.2.1 行锁、表锁.html.js"), meta: {"d":1731542400000,"l":"2024年11月14日","c":["MySQL","事务"],"g":["行锁","表锁"],"e":"\n<h2>一、介绍</h2>\n<p>首先锁的存在，目的是为了在并发场景下，保持数据的安全、一致。\n并发场景有：</p>\n<ul>\n<li>\n<p>读-读 ：此并发场景不需要进行并发控制，也就是不需要加锁。</p>\n</li>\n<li>\n<p>读-写 ：此并发场景需要并发控制，不然就会出现脏读，幻读，不可重复读的问题。</p>\n</li>\n<li>\n<p>写-写 ：此并发场景需要并发控制，不然就会出现更新丢失的问题。</p>\n<p>进行并发控制，常规手段就是加锁，不管是咋java业务代码中，还是mysql数据库本身，都有实现自己的锁，其中mysql的锁有以下几种：</p>\n</li>\n</ul>","r":{"minutes":5.72,"words":1717},"t":"5.2.1 行锁、表锁","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.2%20%E9%97%B4%E9%9A%99%E9%94%81%E3%80%81%E4%B8%B4%E9%94%AE%E9%94%81.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.2 锁_5.2.2 间隙锁、临键锁.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.2 锁/5.2.2 间隙锁、临键锁.html.js"), meta: {"d":1731628800000,"l":"2024年11月15日","c":["MySQL","间隙锁","临键锁"],"g":["锁升级","事务"],"e":"\n<h2>一、介绍</h2>\n<p><strong>什么是间隙锁</strong></p>\n<p><strong>间隙锁</strong>会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 <strong>幻读</strong> 现象；当我们采用范围条件查询数据时，InnoDB 会对这个范围内的数据进行加锁。比如有 id 为：1、3、5、7 的 4 条数据，我们查找 1-7 范围的数据。那么 1-7 都会被加上锁。2、4、6 也在 1-7 的范围中，但是不存在这些数据记录，这些 2、4、6 就被称为间隙。</p>\n<p><strong>间隙锁的危害</strong></p>","r":{"minutes":4.96,"words":1488},"t":"5.2.2 间隙锁、临键锁","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.3%20%E9%94%81%E5%8D%87%E7%BA%A7.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.2 锁_5.2.3 锁升级.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.2 锁/5.2.3 锁升级.html.js"), meta: {"d":1731628800000,"l":"2024年11月15日","c":["MySQL","锁"],"g":["间隙锁演示"],"e":"\n<p>本文讨论InnoDB引擎在什么情况下，行锁会升级成表锁。</p>\n<h2>一、update行锁升级成表锁场景</h2>\n<p>有表如下，id是索引，name是非索引：</p>\n<div class=\"language- line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"\" data-title=\"\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span>id\t\tname</span></span>\n<span class=\"line\"><span>1\t\t\t张三</span></span>\n<span class=\"line\"><span>2\t\t\t李四</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":6.01,"words":1803},"t":"5.2.3 锁升级","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.4%20%E6%AD%BB%E9%94%81.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.2 锁_5.2.4 死锁.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.2 锁/5.2.4 死锁.html.js"), meta: {"d":1731628800000,"l":"2024年11月15日","c":["MySQL","死锁"],"g":["死锁检测","死锁演示"],"e":"\n<h2>一、什么是MySQL死锁</h2>\n<p>死锁是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等的进程称为死锁进程。</p>\n<h2>二、MySQL死锁产生的原因</h2>\n<ol>\n<li>竞争同一资源</li>\n</ol>\n<p>当多个事务试图同时修改同一行数据时，就可能发生死锁。例如，事务A锁定了表中的某一行以进行修改，而事务B也试图修改这一行。如果事务B在事务A提交之前请求了锁，并且事务A也试图访问事务B已锁定的资源，就可能发生死锁。</p>\n<ol start=\"2\">\n<li>锁的升级</li>\n</ol>","r":{"minutes":5.63,"words":1688},"t":"5.2.4 死锁","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.1%20%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.3 索引_5.3.1 索引数据结构.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.3 索引/5.3.1 索引数据结构.html.js"), meta: {"d":1731542400000,"l":"2024年11月14日","c":["索引"],"g":["索引数据结构","B+Tree"],"e":"\n<p><strong>索引</strong>是帮助MySQL高效获取数据的排好序的数据结构</p>\n<p>索引数据结构</p>\n<ul>\n<li>二叉树</li>\n<li>红黑树</li>\n<li>Hash表</li>\n<li>B-Tree</li>\n<li>B+Tree</li>\n</ul>\n<p>上面的数据结构有什么缺点？为什么MySQL底层采用B+树呢？</p>\n<h2>一、二叉树</h2>\n<p>如果索引是二叉树数据结构，它有个严重问题，比如Col1自增的数据列存储到二叉树的数据结构中，自增的数据列存储到二叉树中会变成一个链表，那跟全表查找一样了</p>\n<figure><figcaption></figcaption></figure>","r":{"minutes":3.75,"words":1124},"t":"5.3.1 索引数据结构","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.2%20Mylsam%E3%80%81InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.3 索引_5.3.2 Mylsam、InnoDB存储引擎.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.3 索引/5.3.2 Mylsam、InnoDB存储引擎.html.js"), meta: {"d":1731628800000,"l":"2024年11月15日","c":["MySQL","索引"],"g":["Mylsam","InnoDB","回表","聚集索引","非聚集索引"],"e":"\n<p><strong>MyISAM不支持事务，MyISAM中的锁是表级锁；而InnoDB支持事务，并且支持行级锁。</strong></p>\n<figure><figcaption></figcaption></figure>\n<h2>一、Mylsam存储引擎</h2>\n<figure><figcaption></figcaption></figure>\n<p><strong>存储引擎是形容数据库的还是表的？</strong>——是形容数据库表的。</p>\n<p>Mylsam存储引擎的表有三个文件</p>\n<ul>\n<li>.frm，frame“框架”简写，存储表结构</li>\n<li>.MYD，Mylsam Data，存储表数据</li>\n<li>.MYI，index，存储索引</li>\n</ul>","r":{"minutes":3.39,"words":1016},"t":"5.3.2 Mylsam、InnoDB存储引擎","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.3%20%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E3%80%81%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.3 索引_5.3.3 联合索引、覆盖索引.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.3 索引/5.3.3 联合索引、覆盖索引.html.js"), meta: {"d":1731715200000,"l":"2024年11月16日","c":["MySQL","索引"],"g":["联合索引","覆盖索引","回表"],"e":"\n<h2>前言：回表</h2>\n<h3>1、什么是回表</h3>\n<p>回表（<code>Look Up</code>）指的是在进行索引查询时，首先通过索引定位到对应页，然后再根据行的物理地址找到所需的数据行。换句话说，回表是指根据索引查询到的主键值再去访问<strong>主键索引</strong>，从而获取完整的数据记录。</p>\n<h3>2、什么情况下会回表</h3>\n<ul>\n<li>\n<p><strong>索引不覆盖所有需要查询的字段</strong>：当查询语句中需要返回的列不在索引列上时，即使通过索引定位了相关行，仍然需要回表获取其他列的值。</p>\n</li>\n<li>\n<p><strong>使用了非聚簇索引</strong>：非聚簇索引（Secondary Index）只包含了索引列的副本以及指向对应主键的引用，查询需要通过回表才能获取完整的行数据</p>\n</li>\n<li>\n<p><strong>使用了覆盖索引但超过了最大索引长度</strong>：在MySQL的InnoDB存储引擎中，每个索引项的最大长度是767字节，如果查询需要返回的字段长度超过了该限制，同样会触发回表操作。</p>\n</li>\n</ul>","r":{"minutes":2.76,"words":829},"t":"5.3.3 联合索引、覆盖索引","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.4%20MySQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.3 索引_5.3.4 MySQL性能分析.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.3 索引/5.3.4 MySQL性能分析.html.js"), meta: {"d":1731715200000,"l":"2024年11月16日","c":["MySQL","索引"],"g":["explain执行计划","索引优化"],"e":"\n<p>MySQL常见瓶颈</p>\n<ul>\n<li>\n<p>CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</p>\n</li>\n<li>\n<p>IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p>\n</li>\n<li>\n<p>服务器硬件的性能瓶颈：top，free，iostat和vmstat来查看系统的性能状态</p>\n</li>\n</ul>\n<h2>一、Explain执行计划</h2>\n<p>使用方式：Explain+SQL语句</p>\n<p><strong>执行计划包含的信息</strong></p>\n<figure><figcaption></figcaption></figure>","r":{"minutes":8.41,"words":2524},"t":"5.3.4 MySQL性能分析","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.5%20%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.3 索引_5.3.5 索引失效.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.3 索引/5.3.5 索引失效.html.js"), meta: {"d":1731801600000,"l":"2024年11月17日","c":["MySQL","索引"],"g":["索引失效"],"e":"\n<div class=\"language-sql line-numbers-mode\" data-highlighter=\"shiki\" data-ext=\"sql\" data-title=\"sql\" style=\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\"><pre class=\"shiki shiki-themes one-light one-dark-pro vp-code\"><code><span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TABLE</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> `</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\">staffs</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">`(</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`id`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> INT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">PRIMARY KEY</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> AUTO_INCREMENT,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`name`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> VARCHAR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">24</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DEFAULT</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ''</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'姓名'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`age`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> INT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">10</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DEFAULT</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\"> 0</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'年龄'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`pos`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> VARCHAR</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">NOT NULL</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DEFAULT</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> ''</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'职位'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`add_time`</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> TIMESTAMP</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> NOT NULL</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> DEFAULT</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\"> CURRENT_TIMESTAMP COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'入职时间'</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">)COMMENT </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'员工记录表'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">;</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">INSERT INTO</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `staffs`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`name`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`age`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`pos`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">VALUES</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'Ringo'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">18</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'manager'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">INSERT INTO</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `staffs`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`name`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`age`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`pos`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">VALUES</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'张三'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">20</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'dev'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">INSERT INTO</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `staffs`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`name`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`age`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`pos`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">) </span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">VALUES</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'李四'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#986801;--shiki-dark:#D19A66\">21</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">, </span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">'dev'</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span>\n<span class=\"line\"></span>\n<span class=\"line\"><span style=\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\">/* 创建索引 */</span></span>\n<span class=\"line\"><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\">CREATE</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> INDEX</span><span style=\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\"> idx_staffs_name_age_pos</span><span style=\"--shiki-light:#A626A4;--shiki-dark:#C678DD\"> ON</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\"> `staffs`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">(</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`name`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`age`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">,</span><span style=\"--shiki-light:#50A14F;--shiki-dark:#98C379\">`pos`</span><span style=\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\">);</span></span></code></pre>\n<div class=\"line-numbers\" aria-hidden=\"true\" style=\"counter-reset:line-number 0\"><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div><div class=\"line-number\"></div></div></div>","r":{"minutes":3.79,"words":1136},"t":"5.3.5 索引失效","i":"pen-to-square","y":"a"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.6%20count()%E7%9A%84%E7%94%A8%E6%B3%95.html", { loader: () => import(/* webpackChunkName: "五、MySQL_5.3 索引_5.3.6 count()的用法.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.3 索引/5.3.6 count()的用法.html.js"), meta: {"d":1731801600000,"l":"2024年11月17日","c":["MySQL","索引"],"g":["count()用法"],"e":"\n<p>先说结论</p>\n<figure><figcaption></figcaption></figure>\n<p>在InnoDB中<code>COUNT(*)</code>和<code>COUNT(1)</code>实现上没有区别，而且效率一样，但是<code>COUNT(字段)</code>需要进行字段的非NULL判断，所以效率会低一些。</p>\n<h2>一、count(*)</h2>\n<p><strong>MyISAM</strong>做了一个简单的优化，把表的总行数单独记录下来，如果执行<code>count(*)</code>时可以直接返回，前提是不能有where条件。MyISAM是表级锁，不会有并发的行操作，所以查到的结果是准确的。</p>","r":{"minutes":1.21,"words":362},"t":"5.3.6 count()的用法","i":"pen-to-square","y":"a"} }],
  ["/404.html", { loader: () => import(/* webpackChunkName: "404.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/404.html.js"), meta: {"t":""} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/", { loader: () => import(/* webpackChunkName: "一、Java基础_1.1 JDK8新特性_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.1 JDK8新特性/index.html.js"), meta: {"t":"1.1 JDK8新特性"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.3%20Java%20IO%E6%A8%A1%E5%9E%8B/", { loader: () => import(/* webpackChunkName: "一、Java基础_1.3 Java IO模型_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.3 Java IO模型/index.html.js"), meta: {"t":"1.3 Java IO模型"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.4%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "一、Java基础_1.4 面向对象编程_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.4 面向对象编程/index.html.js"), meta: {"t":"1.4 面向对象编程"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.5%20Java%E9%9B%86%E5%90%88/", { loader: () => import(/* webpackChunkName: "一、Java基础_1.5 Java集合_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.5 Java集合/index.html.js"), meta: {"t":"1.5 Java集合"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.3%20%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/", { loader: () => import(/* webpackChunkName: "二、JVM_2.3 垃圾收集器与内存分配策略_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.3 垃圾收集器与内存分配策略/index.html.js"), meta: {"t":"2.3 垃圾收集器与内存分配策略"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/", { loader: () => import(/* webpackChunkName: "二、JVM_2.7 前端编译与优化_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.7 前端编译与优化/index.html.js"), meta: {"t":"2.7 前端编译与优化"} }],
  ["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/", { loader: () => import(/* webpackChunkName: "一、Java基础_1.2 关键字_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/一、Java基础/1.2 关键字/index.html.js"), meta: {"t":"1.2 关键字"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "二、JVM_2.8 Java内存模型与线程_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.8 Java内存模型与线程/index.html.js"), meta: {"t":"2.8 Java内存模型与线程"} }],
  ["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/", { loader: () => import(/* webpackChunkName: "二、JVM_2.9 线程安全与锁优化_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/二、JVM/2.9 线程安全与锁优化/index.html.js"), meta: {"t":"2.9 线程安全与锁优化"} }],
  ["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/", { loader: () => import(/* webpackChunkName: "四、并发编程_4.5 Java中的锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/四、并发编程/4.5 Java中的锁/index.html.js"), meta: {"t":"4.5 Java中的锁"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/", { loader: () => import(/* webpackChunkName: "五、MySQL_5.1 事务_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.1 事务/index.html.js"), meta: {"t":"5.1 事务"} }],
  ["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.2%20Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/", { loader: () => import(/* webpackChunkName: "四、并发编程_4.2 Java并发机制的底层实现原理_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/四、并发编程/4.2 Java并发机制的底层实现原理/index.html.js"), meta: {"t":"4.2 Java并发机制的底层实现原理"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/", { loader: () => import(/* webpackChunkName: "五、MySQL_5.2 锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.2 锁/index.html.js"), meta: {"t":"5.2 锁"} }],
  ["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/", { loader: () => import(/* webpackChunkName: "五、MySQL_5.3 索引_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/五、MySQL/5.3 索引/index.html.js"), meta: {"t":"5.3 索引"} }],
  ["/category/", { loader: () => import(/* webpackChunkName: "category_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/index.html.js"), meta: {"t":"分类","I":false} }],
  ["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/", { loader: () => import(/* webpackChunkName: "category_使用指南_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/使用指南/index.html.js"), meta: {"t":"使用指南 分类","I":false} }],
  ["/category/%E6%8C%87%E5%8D%97/", { loader: () => import(/* webpackChunkName: "category_指南_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/指南/index.html.js"), meta: {"t":"指南 分类","I":false} }],
  ["/category/kafka/", { loader: () => import(/* webpackChunkName: "category_kafka_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/kafka/index.html.js"), meta: {"t":"kafka 分类","I":false} }],
  ["/category/redis/", { loader: () => import(/* webpackChunkName: "category_redis_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/redis/index.html.js"), meta: {"t":"Redis 分类","I":false} }],
  ["/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "category_设计模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/设计模式/index.html.js"), meta: {"t":"设计模式 分类","I":false} }],
  ["/category/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/", { loader: () => import(/* webpackChunkName: "category_jdk8新特性_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/jdk8新特性/index.html.js"), meta: {"t":"JDK8新特性 分类","I":false} }],
  ["/category/java-io%E6%A8%A1%E5%9E%8B/", { loader: () => import(/* webpackChunkName: "category_java-io模型_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/java-io模型/index.html.js"), meta: {"t":"Java IO模型 分类","I":false} }],
  ["/category/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%BC%96%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "category_面向对象编程_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/面向对象编程/index.html.js"), meta: {"t":"面向对象编程 分类","I":false} }],
  ["/category/jvm/", { loader: () => import(/* webpackChunkName: "category_jvm_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/jvm/index.html.js"), meta: {"t":"JVM 分类","I":false} }],
  ["/category/%E5%9E%83%E5%9C%BE%E6%94%B6%E9%9B%86%E5%99%A8%E4%B8%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%AD%96%E7%95%A5/", { loader: () => import(/* webpackChunkName: "category_垃圾收集器与内存分配策略_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/垃圾收集器与内存分配策略/index.html.js"), meta: {"t":"垃圾收集器与内存分配策略 分类","I":false} }],
  ["/category/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/", { loader: () => import(/* webpackChunkName: "category_前端编译与优化_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/前端编译与优化/index.html.js"), meta: {"t":"前端编译与优化 分类","I":false} }],
  ["/category/%E5%85%B3%E9%94%AE%E5%AD%97/", { loader: () => import(/* webpackChunkName: "category_关键字_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/关键字/index.html.js"), meta: {"t":"关键字 分类","I":false} }],
  ["/category/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "category_并发编程_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/并发编程/index.html.js"), meta: {"t":"并发编程 分类","I":false} }],
  ["/category/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "category_java内存模型与线程_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/java内存模型与线程/index.html.js"), meta: {"t":"Java内存模型与线程 分类","I":false} }],
  ["/category/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/", { loader: () => import(/* webpackChunkName: "category_线程安全的实现方法_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/线程安全的实现方法/index.html.js"), meta: {"t":"线程安全的实现方法 分类","I":false} }],
  ["/category/java%E4%B8%AD%E7%9A%84%E9%94%81/", { loader: () => import(/* webpackChunkName: "category_java中的锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/java中的锁/index.html.js"), meta: {"t":"Java中的锁 分类","I":false} }],
  ["/category/%E9%98%9F%E5%88%97%E5%90%8C%E6%AD%A5%E5%99%A8/", { loader: () => import(/* webpackChunkName: "category_队列同步器_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/队列同步器/index.html.js"), meta: {"t":"队列同步器 分类","I":false} }],
  ["/category/mysql/", { loader: () => import(/* webpackChunkName: "category_mysql_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/mysql/index.html.js"), meta: {"t":"MySQL 分类","I":false} }],
  ["/category/%E4%BA%8B%E5%8A%A1/", { loader: () => import(/* webpackChunkName: "category_事务_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/事务/index.html.js"), meta: {"t":"事务 分类","I":false} }],
  ["/category/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/", { loader: () => import(/* webpackChunkName: "category_事务的两阶段提交_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/事务的两阶段提交/index.html.js"), meta: {"t":"事务的两阶段提交 分类","I":false} }],
  ["/category/cas/", { loader: () => import(/* webpackChunkName: "category_cas_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/cas/index.html.js"), meta: {"t":"CAS 分类","I":false} }],
  ["/category/%E9%97%B4%E9%9A%99%E9%94%81/", { loader: () => import(/* webpackChunkName: "category_间隙锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/间隙锁/index.html.js"), meta: {"t":"间隙锁 分类","I":false} }],
  ["/category/%E4%B8%B4%E9%94%AE%E9%94%81/", { loader: () => import(/* webpackChunkName: "category_临键锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/临键锁/index.html.js"), meta: {"t":"临键锁 分类","I":false} }],
  ["/category/%E9%94%81/", { loader: () => import(/* webpackChunkName: "category_锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/锁/index.html.js"), meta: {"t":"锁 分类","I":false} }],
  ["/category/%E6%AD%BB%E9%94%81/", { loader: () => import(/* webpackChunkName: "category_死锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/死锁/index.html.js"), meta: {"t":"死锁 分类","I":false} }],
  ["/category/%E7%B4%A2%E5%BC%95/", { loader: () => import(/* webpackChunkName: "category_索引_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/category/索引/index.html.js"), meta: {"t":"索引 分类","I":false} }],
  ["/tag/", { loader: () => import(/* webpackChunkName: "tag_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/index.html.js"), meta: {"t":"标签","I":false} }],
  ["/tag/%E7%A6%81%E7%94%A8/", { loader: () => import(/* webpackChunkName: "tag_禁用_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/禁用/index.html.js"), meta: {"t":"标签: 禁用","I":false} }],
  ["/tag/%E5%8A%A0%E5%AF%86/", { loader: () => import(/* webpackChunkName: "tag_加密_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/加密/index.html.js"), meta: {"t":"标签: 加密","I":false} }],
  ["/tag/%E5%B8%83%E5%B1%80/", { loader: () => import(/* webpackChunkName: "tag_布局_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/布局/index.html.js"), meta: {"t":"标签: 布局","I":false} }],
  ["/tag/markdown/", { loader: () => import(/* webpackChunkName: "tag_markdown_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/markdown/index.html.js"), meta: {"t":"标签: Markdown","I":false} }],
  ["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/", { loader: () => import(/* webpackChunkName: "tag_页面配置_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/页面配置/index.html.js"), meta: {"t":"标签: 页面配置","I":false} }],
  ["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/", { loader: () => import(/* webpackChunkName: "tag_使用指南_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/使用指南/index.html.js"), meta: {"t":"标签: 使用指南","I":false} }],
  ["/tag/kafka/", { loader: () => import(/* webpackChunkName: "tag_kafka_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/kafka/index.html.js"), meta: {"t":"标签: kafka","I":false} }],
  ["/tag/redis%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/", { loader: () => import(/* webpackChunkName: "tag_redis使用场景_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/redis使用场景/index.html.js"), meta: {"t":"标签: redis使用场景","I":false} }],
  ["/tag/redis-watch/", { loader: () => import(/* webpackChunkName: "tag_redis-watch_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/redis-watch/index.html.js"), meta: {"t":"标签: redis watch","I":false} }],
  ["/tag/redis%E6%8C%81%E4%B9%85%E5%8C%96/", { loader: () => import(/* webpackChunkName: "tag_redis持久化_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/redis持久化/index.html.js"), meta: {"t":"标签: redis持久化","I":false} }],
  ["/tag/rdb/", { loader: () => import(/* webpackChunkName: "tag_rdb_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/rdb/index.html.js"), meta: {"t":"标签: RDB","I":false} }],
  ["/tag/aof/", { loader: () => import(/* webpackChunkName: "tag_aof_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/aof/index.html.js"), meta: {"t":"标签: AOF","I":false} }],
  ["/tag/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7/", { loader: () => import(/* webpackChunkName: "tag_缓存和数据库一致性_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/缓存和数据库一致性/index.html.js"), meta: {"t":"标签: 缓存和数据库一致性","I":false} }],
  ["/tag/%E5%8F%AA%E8%AF%BB%E5%9C%BA%E6%99%AF/", { loader: () => import(/* webpackChunkName: "tag_只读场景_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/只读场景/index.html.js"), meta: {"t":"标签: 只读场景","I":false} }],
  ["/tag/%E5%B9%B6%E5%8F%91%E8%AF%BB%E5%86%99%E5%9C%BA%E6%99%AF/", { loader: () => import(/* webpackChunkName: "tag_并发读写场景_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/并发读写场景/index.html.js"), meta: {"t":"标签: 并发读写场景","I":false} }],
  ["/tag/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/", { loader: () => import(/* webpackChunkName: "tag_缓存穿透_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/缓存穿透/index.html.js"), meta: {"t":"标签: 缓存穿透","I":false} }],
  ["/tag/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/", { loader: () => import(/* webpackChunkName: "tag_缓存击穿_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/缓存击穿/index.html.js"), meta: {"t":"标签: 缓存击穿","I":false} }],
  ["/tag/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/", { loader: () => import(/* webpackChunkName: "tag_缓存雪崩_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/缓存雪崩/index.html.js"), meta: {"t":"标签: 缓存雪崩","I":false} }],
  ["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/", { loader: () => import(/* webpackChunkName: "tag_分布式锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/分布式锁/index.html.js"), meta: {"t":"标签: 分布式锁","I":false} }],
  ["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%BB%E5%86%99%E9%94%81/", { loader: () => import(/* webpackChunkName: "tag_分布式读写锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/分布式读写锁/index.html.js"), meta: {"t":"标签: 分布式读写锁","I":false} }],
  ["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BF%A1%E5%8F%B7%E9%87%8F/", { loader: () => import(/* webpackChunkName: "tag_分布式信号量_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/分布式信号量/index.html.js"), meta: {"t":"标签: 分布式信号量","I":false} }],
  ["/tag/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_代理模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/代理模式/index.html.js"), meta: {"t":"标签: 代理模式","I":false} }],
  ["/tag/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/", { loader: () => import(/* webpackChunkName: "tag_静态代理_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/静态代理/index.html.js"), meta: {"t":"标签: 静态代理","I":false} }],
  ["/tag/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/", { loader: () => import(/* webpackChunkName: "tag_jdk动态代理_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/jdk动态代理/index.html.js"), meta: {"t":"标签: JDK动态代理","I":false} }],
  ["/tag/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/", { loader: () => import(/* webpackChunkName: "tag_cglib动态代理_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/cglib动态代理/index.html.js"), meta: {"t":"标签: cglib动态代理","I":false} }],
  ["/tag/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_单例模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/单例模式/index.html.js"), meta: {"t":"标签: 单例模式","I":false} }],
  ["/tag/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_观察者模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/观察者模式/index.html.js"), meta: {"t":"标签: 观察者模式","I":false} }],
  ["/tag/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_策略模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/策略模式/index.html.js"), meta: {"t":"标签: 策略模式","I":false} }],
  ["/tag/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_工厂模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/工厂模式/index.html.js"), meta: {"t":"标签: 工厂模式","I":false} }],
  ["/tag/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_模版方法模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/模版方法模式/index.html.js"), meta: {"t":"标签: 模版方法模式","I":false} }],
  ["/tag/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_责任链模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/责任链模式/index.html.js"), meta: {"t":"标签: 责任链模式","I":false} }],
  ["/tag/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_适配器模式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/适配器模式/index.html.js"), meta: {"t":"标签: 适配器模式","I":false} }],
  ["/tag/default%E5%85%B3%E9%94%AE%E5%AD%97/", { loader: () => import(/* webpackChunkName: "tag_default关键字_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/default关键字/index.html.js"), meta: {"t":"标签: default关键字","I":false} }],
  ["/tag/static%E5%85%B3%E9%94%AE%E5%AD%97/", { loader: () => import(/* webpackChunkName: "tag_static关键字_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/static关键字/index.html.js"), meta: {"t":"标签: static关键字","I":false} }],
  ["/tag/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/", { loader: () => import(/* webpackChunkName: "tag_lambda表达式_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/lambda表达式/index.html.js"), meta: {"t":"标签: Lambda表达式","I":false} }],
  ["/tag/bio/", { loader: () => import(/* webpackChunkName: "tag_bio_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/bio/index.html.js"), meta: {"t":"标签: BIO","I":false} }],
  ["/tag/nio/", { loader: () => import(/* webpackChunkName: "tag_nio_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/nio/index.html.js"), meta: {"t":"标签: NIO","I":false} }],
  ["/tag/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/", { loader: () => import(/* webpackChunkName: "tag_多路复用_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/多路复用/index.html.js"), meta: {"t":"标签: 多路复用","I":false} }],
  ["/tag/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8/", { loader: () => import(/* webpackChunkName: "tag_信号驱动_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/信号驱动/index.html.js"), meta: {"t":"标签: 信号驱动","I":false} }],
  ["/tag/%E5%BC%82%E6%AD%A5io/", { loader: () => import(/* webpackChunkName: "tag_异步io_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/异步io/index.html.js"), meta: {"t":"标签: 异步IO","I":false} }],
  ["/tag/equals/", { loader: () => import(/* webpackChunkName: "tag_equals_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/equals/index.html.js"), meta: {"t":"标签: equals","I":false} }],
  ["/tag/hashcode/", { loader: () => import(/* webpackChunkName: "tag_hashcode_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/hashcode/index.html.js"), meta: {"t":"标签: hashcode","I":false} }],
  ["/tag/%E5%8F%8D%E5%B0%84/", { loader: () => import(/* webpackChunkName: "tag_反射_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/反射/index.html.js"), meta: {"t":"标签: 反射","I":false} }],
  ["/tag/string/", { loader: () => import(/* webpackChunkName: "tag_string_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/string/index.html.js"), meta: {"t":"标签: String","I":false} }],
  ["/tag/java%E9%9B%86%E5%90%88/", { loader: () => import(/* webpackChunkName: "tag_java集合_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/java集合/index.html.js"), meta: {"t":"标签: Java集合","I":false} }],
  ["/tag/arraylist/", { loader: () => import(/* webpackChunkName: "tag_arraylist_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/arraylist/index.html.js"), meta: {"t":"标签: ArrayList","I":false} }],
  ["/tag/hashmap/", { loader: () => import(/* webpackChunkName: "tag_hashmap_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/hashmap/index.html.js"), meta: {"t":"标签: hashmap","I":false} }],
  ["/tag/hotspot/", { loader: () => import(/* webpackChunkName: "tag_hotspot_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/hotspot/index.html.js"), meta: {"t":"标签: HotSpot","I":false} }],
  ["/tag/final%E5%85%B3%E9%94%AE%E5%AD%97/", { loader: () => import(/* webpackChunkName: "tag_final关键字_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/final关键字/index.html.js"), meta: {"t":"标签: final关键字","I":false} }],
  ["/tag/%E6%B3%9B%E5%9E%8B/", { loader: () => import(/* webpackChunkName: "tag_泛型_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/泛型/index.html.js"), meta: {"t":"标签: 泛型","I":false} }],
  ["/tag/%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/", { loader: () => import(/* webpackChunkName: "tag_装箱拆箱_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/装箱拆箱/index.html.js"), meta: {"t":"标签: 装箱拆箱","I":false} }],
  ["/tag/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4/", { loader: () => import(/* webpackChunkName: "tag_类型擦除_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/类型擦除/index.html.js"), meta: {"t":"标签: 类型擦除","I":false} }],
  ["/tag/%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1/", { loader: () => import(/* webpackChunkName: "tag_装箱、拆箱_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/装箱、拆箱/index.html.js"), meta: {"t":"标签: 装箱、拆箱","I":false} }],
  ["/tag/%E8%AF%AD%E6%B3%95%E7%B3%96/", { loader: () => import(/* webpackChunkName: "tag_语法糖_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/语法糖/index.html.js"), meta: {"t":"标签: 语法糖","I":false} }],
  ["/tag/final%E5%86%85%E5%AD%98%E8%AF%AD%E4%B9%89/", { loader: () => import(/* webpackChunkName: "tag_final内存语义_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/final内存语义/index.html.js"), meta: {"t":"标签: final内存语义","I":false} }],
  ["/tag/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/", { loader: () => import(/* webpackChunkName: "tag_synchronized关键字_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/synchronized关键字/index.html.js"), meta: {"t":"标签: synchronized关键字","I":false} }],
  ["/tag/qps/", { loader: () => import(/* webpackChunkName: "tag_qps_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/qps/index.html.js"), meta: {"t":"标签: QPS","I":false} }],
  ["/tag/tps/", { loader: () => import(/* webpackChunkName: "tag_tps_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/tps/index.html.js"), meta: {"t":"标签: TPS","I":false} }],
  ["/tag/pv/", { loader: () => import(/* webpackChunkName: "tag_pv_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/pv/index.html.js"), meta: {"t":"标签: PV","I":false} }],
  ["/tag/uv/", { loader: () => import(/* webpackChunkName: "tag_uv_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/uv/index.html.js"), meta: {"t":"标签: UV","I":false} }],
  ["/tag/rt/", { loader: () => import(/* webpackChunkName: "tag_rt_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/rt/index.html.js"), meta: {"t":"标签: RT","I":false} }],
  ["/tag/%E6%9C%80%E4%BD%B3%E7%BA%BF%E7%A8%8B%E6%95%B0/", { loader: () => import(/* webpackChunkName: "tag_最佳线程数_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/最佳线程数/index.html.js"), meta: {"t":"标签: 最佳线程数","I":false} }],
  ["/tag/%E4%B8%BB%E5%86%85%E5%AD%98%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98/", { loader: () => import(/* webpackChunkName: "tag_主内存与工作内存_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/主内存与工作内存/index.html.js"), meta: {"t":"标签: 主内存与工作内存","I":false} }],
  ["/tag/volatile%E5%85%B3%E9%94%AE%E5%AD%97/", { loader: () => import(/* webpackChunkName: "tag_volatile关键字_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/volatile关键字/index.html.js"), meta: {"t":"标签: volatile关键字","I":false} }],
  ["/tag/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%89%B9%E5%BE%81/", { loader: () => import(/* webpackChunkName: "tag_java内存模型特征_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/java内存模型特征/index.html.js"), meta: {"t":"标签: Java内存模型特征","I":false} }],
  ["/tag/happens-before/", { loader: () => import(/* webpackChunkName: "tag_happens-before_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/happens-before/index.html.js"), meta: {"t":"标签: happens-before","I":false} }],
  ["/tag/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/", { loader: () => import(/* webpackChunkName: "tag_内核线程实现_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/内核线程实现/index.html.js"), meta: {"t":"标签: 内核线程实现","I":false} }],
  ["/tag/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/", { loader: () => import(/* webpackChunkName: "tag_用户线程实现_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/用户线程实现/index.html.js"), meta: {"t":"标签: 用户线程实现","I":false} }],
  ["/tag/%E6%B7%B7%E5%90%88%E5%AE%9E%E7%8E%B0/", { loader: () => import(/* webpackChunkName: "tag_混合实现_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/混合实现/index.html.js"), meta: {"t":"标签: 混合实现","I":false} }],
  ["/tag/%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/", { loader: () => import(/* webpackChunkName: "tag_线程调度_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/线程调度/index.html.js"), meta: {"t":"标签: 线程调度","I":false} }],
  ["/tag/%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/", { loader: () => import(/* webpackChunkName: "tag_状态转换_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/状态转换/index.html.js"), meta: {"t":"标签: 状态转换","I":false} }],
  ["/tag/%E7%BA%BF%E7%A8%8B%E7%BC%BA%E9%99%B7/", { loader: () => import(/* webpackChunkName: "tag_线程缺陷_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/线程缺陷/index.html.js"), meta: {"t":"标签: 线程缺陷","I":false} }],
  ["/tag/%E5%8D%8F%E7%A8%8B/", { loader: () => import(/* webpackChunkName: "tag_协程_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/协程/index.html.js"), meta: {"t":"标签: 协程","I":false} }],
  ["/tag/%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5/", { loader: () => import(/* webpackChunkName: "tag_互斥同步_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/互斥同步/index.html.js"), meta: {"t":"标签: 互斥同步","I":false} }],
  ["/tag/%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%90%8C%E6%AD%A5/", { loader: () => import(/* webpackChunkName: "tag_非阻塞同步_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/非阻塞同步/index.html.js"), meta: {"t":"标签: 非阻塞同步","I":false} }],
  ["/tag/%E6%97%A0%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/", { loader: () => import(/* webpackChunkName: "tag_无同步方案_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/无同步方案/index.html.js"), meta: {"t":"标签: 无同步方案","I":false} }],
  ["/tag/%E9%94%81%E4%BC%98%E5%8C%96/", { loader: () => import(/* webpackChunkName: "tag_锁优化_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/锁优化/index.html.js"), meta: {"t":"标签: 锁优化","I":false} }],
  ["/tag/%E9%94%81%E6%B6%88%E9%99%A4/", { loader: () => import(/* webpackChunkName: "tag_锁消除_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/锁消除/index.html.js"), meta: {"t":"标签: 锁消除","I":false} }],
  ["/tag/%E9%94%81%E8%86%A8%E8%83%80/", { loader: () => import(/* webpackChunkName: "tag_锁膨胀_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/锁膨胀/index.html.js"), meta: {"t":"标签: 锁膨胀","I":false} }],
  ["/tag/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81/", { loader: () => import(/* webpackChunkName: "tag_轻量级锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/轻量级锁/index.html.js"), meta: {"t":"标签: 轻量级锁","I":false} }],
  ["/tag/%E5%81%8F%E5%90%91%E9%94%81/", { loader: () => import(/* webpackChunkName: "tag_偏向锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/偏向锁/index.html.js"), meta: {"t":"标签: 偏向锁","I":false} }],
  ["/tag/aqs/", { loader: () => import(/* webpackChunkName: "tag_aqs_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/aqs/index.html.js"), meta: {"t":"标签: AQS","I":false} }],
  ["/tag/reentrantlock/", { loader: () => import(/* webpackChunkName: "tag_reentrantlock_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/reentrantlock/index.html.js"), meta: {"t":"标签: ReentrantLock","I":false} }],
  ["/tag/%E8%AF%BB%E5%86%99%E9%94%81/", { loader: () => import(/* webpackChunkName: "tag_读写锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/读写锁/index.html.js"), meta: {"t":"标签: 读写锁","I":false} }],
  ["/tag/%E8%84%8F%E8%AF%BB/", { loader: () => import(/* webpackChunkName: "tag_脏读_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/脏读/index.html.js"), meta: {"t":"标签: 脏读","I":false} }],
  ["/tag/%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/", { loader: () => import(/* webpackChunkName: "tag_不可重复读_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/不可重复读/index.html.js"), meta: {"t":"标签: 不可重复读","I":false} }],
  ["/tag/%E5%B9%BB%E8%AF%BB/", { loader: () => import(/* webpackChunkName: "tag_幻读_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/幻读/index.html.js"), meta: {"t":"标签: 幻读","I":false} }],
  ["/tag/%E8%AF%BB%E6%9C%AA%E6%8F%90%E4%BA%A4/", { loader: () => import(/* webpackChunkName: "tag_读未提交_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/读未提交/index.html.js"), meta: {"t":"标签: 读未提交","I":false} }],
  ["/tag/%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4/", { loader: () => import(/* webpackChunkName: "tag_读已提交_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/读已提交/index.html.js"), meta: {"t":"标签: 读已提交","I":false} }],
  ["/tag/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/", { loader: () => import(/* webpackChunkName: "tag_可重复读_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/可重复读/index.html.js"), meta: {"t":"标签: 可重复读","I":false} }],
  ["/tag/%E4%B8%B2%E8%A1%8C%E5%8C%96/", { loader: () => import(/* webpackChunkName: "tag_串行化_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/串行化/index.html.js"), meta: {"t":"标签: 串行化","I":false} }],
  ["/tag/mvcc/", { loader: () => import(/* webpackChunkName: "tag_mvcc_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/mvcc/index.html.js"), meta: {"t":"标签: MVCC","I":false} }],
  ["/tag/redo-log/", { loader: () => import(/* webpackChunkName: "tag_redo-log_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/redo-log/index.html.js"), meta: {"t":"标签: redo log","I":false} }],
  ["/tag/bin-log/", { loader: () => import(/* webpackChunkName: "tag_bin-log_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/bin-log/index.html.js"), meta: {"t":"标签: bin log","I":false} }],
  ["/tag/cas/", { loader: () => import(/* webpackChunkName: "tag_cas_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/cas/index.html.js"), meta: {"t":"标签: CAS","I":false} }],
  ["/tag/atomic%E7%B1%BB/", { loader: () => import(/* webpackChunkName: "tag_atomic类_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/atomic类/index.html.js"), meta: {"t":"标签: Atomic类","I":false} }],
  ["/tag/%E8%A1%8C%E9%94%81/", { loader: () => import(/* webpackChunkName: "tag_行锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/行锁/index.html.js"), meta: {"t":"标签: 行锁","I":false} }],
  ["/tag/%E8%A1%A8%E9%94%81/", { loader: () => import(/* webpackChunkName: "tag_表锁_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/表锁/index.html.js"), meta: {"t":"标签: 表锁","I":false} }],
  ["/tag/%E9%94%81%E5%8D%87%E7%BA%A7/", { loader: () => import(/* webpackChunkName: "tag_锁升级_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/锁升级/index.html.js"), meta: {"t":"标签: 锁升级","I":false} }],
  ["/tag/%E4%BA%8B%E5%8A%A1/", { loader: () => import(/* webpackChunkName: "tag_事务_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/事务/index.html.js"), meta: {"t":"标签: 事务","I":false} }],
  ["/tag/%E9%97%B4%E9%9A%99%E9%94%81%E6%BC%94%E7%A4%BA/", { loader: () => import(/* webpackChunkName: "tag_间隙锁演示_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/间隙锁演示/index.html.js"), meta: {"t":"标签: 间隙锁演示","I":false} }],
  ["/tag/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/", { loader: () => import(/* webpackChunkName: "tag_死锁检测_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/死锁检测/index.html.js"), meta: {"t":"标签: 死锁检测","I":false} }],
  ["/tag/%E6%AD%BB%E9%94%81%E6%BC%94%E7%A4%BA/", { loader: () => import(/* webpackChunkName: "tag_死锁演示_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/死锁演示/index.html.js"), meta: {"t":"标签: 死锁演示","I":false} }],
  ["/tag/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/", { loader: () => import(/* webpackChunkName: "tag_索引数据结构_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/索引数据结构/index.html.js"), meta: {"t":"标签: 索引数据结构","I":false} }],
  ["/tag/b_tree/", { loader: () => import(/* webpackChunkName: "tag_b_tree_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/b_tree/index.html.js"), meta: {"t":"标签: B+Tree","I":false} }],
  ["/tag/mylsam/", { loader: () => import(/* webpackChunkName: "tag_mylsam_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/mylsam/index.html.js"), meta: {"t":"标签: Mylsam","I":false} }],
  ["/tag/innodb/", { loader: () => import(/* webpackChunkName: "tag_innodb_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/innodb/index.html.js"), meta: {"t":"标签: InnoDB","I":false} }],
  ["/tag/%E5%9B%9E%E8%A1%A8/", { loader: () => import(/* webpackChunkName: "tag_回表_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/回表/index.html.js"), meta: {"t":"标签: 回表","I":false} }],
  ["/tag/%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/", { loader: () => import(/* webpackChunkName: "tag_聚集索引_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/聚集索引/index.html.js"), meta: {"t":"标签: 聚集索引","I":false} }],
  ["/tag/%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/", { loader: () => import(/* webpackChunkName: "tag_非聚集索引_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/非聚集索引/index.html.js"), meta: {"t":"标签: 非聚集索引","I":false} }],
  ["/tag/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95/", { loader: () => import(/* webpackChunkName: "tag_联合索引_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/联合索引/index.html.js"), meta: {"t":"标签: 联合索引","I":false} }],
  ["/tag/%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/", { loader: () => import(/* webpackChunkName: "tag_覆盖索引_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/覆盖索引/index.html.js"), meta: {"t":"标签: 覆盖索引","I":false} }],
  ["/tag/explain%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/", { loader: () => import(/* webpackChunkName: "tag_explain执行计划_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/explain执行计划/index.html.js"), meta: {"t":"标签: explain执行计划","I":false} }],
  ["/tag/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/", { loader: () => import(/* webpackChunkName: "tag_索引优化_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/索引优化/index.html.js"), meta: {"t":"标签: 索引优化","I":false} }],
  ["/tag/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/", { loader: () => import(/* webpackChunkName: "tag_索引失效_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/索引失效/index.html.js"), meta: {"t":"标签: 索引失效","I":false} }],
  ["/tag/count()%E7%94%A8%E6%B3%95/", { loader: () => import(/* webpackChunkName: "tag_count()用法_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/tag/count()用法/index.html.js"), meta: {"t":"标签: count()用法","I":false} }],
  ["/article/", { loader: () => import(/* webpackChunkName: "article_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/article/index.html.js"), meta: {"t":"文章","I":false} }],
  ["/star/", { loader: () => import(/* webpackChunkName: "star_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/star/index.html.js"), meta: {"t":"星标","I":false} }],
  ["/timeline/", { loader: () => import(/* webpackChunkName: "timeline_index.html" */"/Users/qingran/Desktop/jdtm/myBlog/myBlog/src/.vuepress/.temp/pages/timeline/index.html.js"), meta: {"t":"时间轴","I":false} }],
]);

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updateRoutes) {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
  }
  if (__VUE_HMR_RUNTIME__.updateRedirects) {
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ routes, redirects }) => {
    __VUE_HMR_RUNTIME__.updateRoutes(routes)
    __VUE_HMR_RUNTIME__.updateRedirects(redirects)
  })
}
