"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7636],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},888:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>d,data:()=>g});var n=a(641);const t=a.p+"assets/img/2.c8c86a0d.png",e=a.p+"assets/img/3.aa6232d2.png",l=a.p+"assets/img/4.d014694e.png",p=a.p+"assets/img/5.2dfded27.png",r=a.p+"assets/img/6.143d44f2.png",h={},d=(0,a(6262).A)(h,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="_5-1-1-事务及其特性" tabindex="-1"><a class="header-anchor" href="#_5-1-1-事务及其特性"><span>5.1.1 事务及其特性</span></a></h1><p><strong>什么是事务</strong>：事务，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。</p><p>假如A转账给B 100 元，先从A的账户里扣除 100 元，再在 B 的账户上加上 100 元。如果扣完A的100元后，还没来得及给B加上，银行系统异常了，最后导致A的余额减少了，B的余额却没有增加。所以就需要事务，将A的钱回滚回去，就是这么简单。</p><h2 id="一、事务的四大特性" tabindex="-1"><a class="header-anchor" href="#一、事务的四大特性"><span>一、事务的四大特性</span></a></h2><figure><img src="'+t+'" alt="事务的四大特性" tabindex="0" loading="lazy"><figcaption>事务的四大特性</figcaption></figure><ul><li><p><strong>原子性：</strong> 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部都执行，要么都不执行。原子性由undo log日志来保证。</p><p>理解：生单和减库存要保证原子性。</p></li><li><p><strong>一致性：</strong> 使用事务的最终目的，由业务代码正确逻辑保证。</p><p>理解：指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。</p></li><li><p><strong>隔离性：</strong> 多个事务并发访问时，事务之间是相互隔离的，一个事务不应该被其他事务干扰，多个并发事务之间要相互隔离。。</p><p>隔离性由加锁和MVCC实现的。</p></li><li><p><strong>持久性：</strong> 表示事务完成提交后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。持久性由redo log实现的。</p></li></ul><h2 id="二、事务并发存在的问题" tabindex="-1"><a class="header-anchor" href="#二、事务并发存在的问题"><span>二、事务并发存在的问题</span></a></h2><p>事务并发执行存在什么问题呢，换句话说就是，一个事务是怎么干扰到其他事务的呢？看例子吧~假设现在有表：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">account</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `name`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `balance`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  UNIQUE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> KEY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `un_name_idx`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">USING</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> BTREE</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">InnoDB </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>表中有数据：</p><figure><img src="'+e+'" alt="account表" tabindex="0" loading="lazy"><figcaption>account表</figcaption></figure><p>事务并发会存在三大问题</p><ul><li>脏读</li><li>不可重复读</li><li>幻读</li></ul><h3 id="_1、脏读-dirty-read" tabindex="-1"><a class="header-anchor" href="#_1、脏读-dirty-read"><span>1、脏读（dirty read）</span></a></h3><p>假设现在有两个事务A、B：</p><ul><li>假设现在A的余额是100，事务A正在准备查询Jay的余额</li><li>这时候，事务B先扣减Jay的余额，扣了10</li><li>最后A读到的是扣减后的余额</li></ul><figure><img src="'+l+'" alt="脏读" tabindex="0" loading="lazy"><figcaption>脏读</figcaption></figure><p>由上图可以发现，事务A、B交替执行，事务A被事务B干扰到了，因为事务A读取到事务B未提交的数据，这就是<strong>脏读</strong>。</p><p><strong>脏读</strong>是指在数据库事务处理中，一个事务读取了另一个事务未提交的数据。</p><h3 id="_2、不可重复读-unrepeatable-read" tabindex="-1"><a class="header-anchor" href="#_2、不可重复读-unrepeatable-read"><span>2、不可重复读（unrepeatable read）</span></a></h3><p>假设现在有两个事务A和B：</p><ul><li>事务A先查询Jay的余额，查到结果是100</li><li>这时候事务B 对Jay的账户余额进行扣减，扣去10后，提交事务</li><li>事务A再去查询Jay的账户余额发现变成了90</li></ul><figure><img src="'+p+'" alt="不可重复读" tabindex="0" loading="lazy"><figcaption>不可重复读</figcaption></figure><p>事务A又被事务B干扰到了！在事务A范围内，两个相同的查询，读取同一条记录，却返回了不同的数据，这就是<strong>不可重复读</strong>。</p><h3 id="_3、幻读" tabindex="-1"><a class="header-anchor" href="#_3、幻读"><span>3、幻读</span></a></h3><p>注意幻读和不可重复读的区别：幻读是两次范围查询中其他时候更改提交了数据，不可重复读是两次读的同一条记录中其他事务更改提交了数据。</p><p>假设现在有两个事务A、B：</p><ul><li>事务A先查询id大于2的账户记录，得到记录id=2和id=3的两条记录</li><li>这时候，事务B开启，插入一条id=4的记录，并且提交了</li><li>事务A再去执行相同的查询，却得到了id=2,3,4的3条记录了。</li></ul><figure><img src="'+r+'" alt="幻读" tabindex="0" loading="lazy"><figcaption>幻读</figcaption></figure><p>事务A查询一个范围的结果集，另一个并发事务B往这个范围中插入/删除了数据，并静悄悄地提交，然后事务A再次查询相同的范围，两次读取得到的结果集不一样了，这就是<strong>幻读</strong>。</p>',30)]))}]]),g=JSON.parse('{"path":"/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.1%20%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7.html","title":"5.1.1 事务及其特性","lang":"zh-CN","frontmatter":{"\x3c!--cover":"/assets/images/cover2.jpg--\x3e","icon":"pen-to-square","date":"2024-11-11T00:00:00.000Z","category":["MySQL","事务"],"tag":["脏读","不可重复读","幻读"],"star":true,"ticky":true,"description":"5.1.1 事务及其特性 什么是事务：事务，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。 假如A转账给B 100 元，先从A的账户里扣除 100 元，再在 B 的账户上加上 100 元。如果扣完A的100元后，还没来得及给B加上，银行系统异常了，最后导致A的余额减少了，B的余额却没有增加。所以就需要事...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.1%20%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"5.1.1 事务及其特性"}],["meta",{"property":"og:description","content":"5.1.1 事务及其特性 什么是事务：事务，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。 假如A转账给B 100 元，先从A的账户里扣除 100 元，再在 B 的账户上加上 100 元。如果扣完A的100元后，还没来得及给B加上，银行系统异常了，最后导致A的余额减少了，B的余额却没有增加。所以就需要事..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-11T11:07:59.000Z"}],["meta",{"property":"article:tag","content":"脏读"}],["meta",{"property":"article:tag","content":"不可重复读"}],["meta",{"property":"article:tag","content":"幻读"}],["meta",{"property":"article:published_time","content":"2024-11-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-11T11:07:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.1.1 事务及其特性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-11T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-11T11:07:59.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、事务的四大特性","slug":"一、事务的四大特性","link":"#一、事务的四大特性","children":[]},{"level":2,"title":"二、事务并发存在的问题","slug":"二、事务并发存在的问题","link":"#二、事务并发存在的问题","children":[{"level":3,"title":"1、脏读（dirty read）","slug":"_1、脏读-dirty-read","link":"#_1、脏读-dirty-read","children":[]},{"level":3,"title":"2、不可重复读（unrepeatable read）","slug":"_2、不可重复读-unrepeatable-read","link":"#_2、不可重复读-unrepeatable-read","children":[]},{"level":3,"title":"3、幻读","slug":"_3、幻读","link":"#_3、幻读","children":[]}]}],"git":{"createdTime":1731322746000,"updatedTime":1731323279000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":2}]},"readingTime":{"minutes":3.6,"words":1080},"filePathRelative":"五、MySQL/5.1 事务/5.1.1 事务及其特性.md","localizedDate":"2024年11月11日","excerpt":"\\n<p><strong>什么是事务</strong>：事务，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。</p>\\n<p>假如A转账给B 100 元，先从A的账户里扣除 100 元，再在 B 的账户上加上 100 元。如果扣完A的100元后，还没来得及给B加上，银行系统异常了，最后导致A的余额减少了，B的余额却没有增加。所以就需要事务，将A的钱回滚回去，就是这么简单。</p>\\n<h2>一、事务的四大特性</h2>\\n<figure><figcaption>事务的四大特性</figcaption></figure>\\n<ul>\\n<li>\\n<p><strong>原子性：</strong> 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部都执行，要么都不执行。原子性由undo log日志来保证。</p>\\n<p>理解：生单和减库存要保证原子性。</p>\\n</li>\\n<li>\\n<p><strong>一致性：</strong> 使用事务的最终目的，由业务代码正确逻辑保证。</p>\\n<p>理解：指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。</p>\\n</li>\\n<li>\\n<p><strong>隔离性：</strong> 多个事务并发访问时，事务之间是相互隔离的，一个事务不应该被其他事务干扰，多个并发事务之间要相互隔离。。</p>\\n<p>隔离性由加锁和MVCC实现的。</p>\\n</li>\\n<li>\\n<p><strong>持久性：</strong> 表示事务完成提交后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。持久性由redo log实现的。</p>\\n</li>\\n</ul>","autoDesc":true}')}}]);