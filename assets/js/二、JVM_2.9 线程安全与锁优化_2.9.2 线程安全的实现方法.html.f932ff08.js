"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9703],{66262:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,a]of t)n[e]=a;return n}},79505:(e,t,n)=>{n.r(t),n.d(t,{comp:()=>i,data:()=>s});var a=n(20641);const r={},i=(0,n(66262).A)(r,[["render",function(e,t){return(0,a.uX)(),(0,a.CE)("div",null,t[0]||(t[0]=[(0,a.Fv)('<h1 id="_2-9-2-线程安全的实现方法" tabindex="-1"><a class="header-anchor" href="#_2-9-2-线程安全的实现方法"><span>2.9.2 线程安全的实现方法</span></a></h1><h2 id="一、互斥同步-阻塞同步" tabindex="-1"><a class="header-anchor" href="#一、互斥同步-阻塞同步"><span>一、互斥同步（阻塞同步）</span></a></h2><p>互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。</p><p>synchronized和ReentrantLock是互斥同步的实现，可参考<a href="https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html" target="_blank" rel="noopener noreferrer">synchronized关键字的理解</a>文章和<a href="https://ranqingisfine.github.io/myBlog/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.3%20ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81.html" target="_blank" rel="noopener noreferrer">Reentrant重入锁</a>文章。</p><h2 id="二、非阻塞同步" tabindex="-1"><a class="header-anchor" href="#二、非阻塞同步"><span>二、非阻塞同步</span></a></h2><p>互斥同步面临的主要问题是进行线程阻塞和唤醒所带来的性能开销，因此这种同步也被称为阻塞同步。互斥同步是一种悲观的并发策略</p><p><strong>悲观锁</strong>：无论共享的数据是否真的会出现竞争，它都会进行加锁，这将会导致用户态到核心态转换，维护锁计数器和检查是否有被阻塞的线程需要被唤醒等开销。</p><p><strong>乐观锁</strong>：不管风险，先进行操作，如果没有其它线程争用共享数据，那操作就直接成果了；如果共享数据的确被争用，产生了冲突，那再进行其它的补偿措施，最常见的补偿措施就是不断地重试，直到出现没有竞争的共享数据为止。这种乐观并发策略的实现不再需要把线程阻塞挂起，因此这种同步操作被称为<strong>非阻塞同步</strong>。</p><p><strong>为什么使用乐观并发策略需要硬件指令集的发展？</strong>——因为必须要求操作和冲突检测这两个步骤具备原子性，如果用互斥同步来保证就完全失去意义了，所以只能靠硬件来实现这件事情，硬件保证某些从语义上看起来需要多次操作的行为可以只通过一条处理器指令就能完成。常用的有：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>测试并设置（Test-and-Set）</span></span>\n<span class="line"><span>获取并增加（Fetch-and-Increment）</span></span>\n<span class="line"><span>交换（Swap）</span></span>\n<span class="line"><span>比较并交换（Compare-and-Swap，简称CAS）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>非阻塞同步——乐观锁参考<a href="https://ranqingisfine.github.io/myBlog/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.2%20Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/4.2.3%20Java%E5%AE%9E%E7%8E%B0%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-%E5%BE%AA%E7%8E%AFCAS.html" target="_blank" rel="noopener noreferrer">Java实现原子操作-循环CAS</a>文章。</p><h2 id="三、无同步方案" tabindex="-1"><a class="header-anchor" href="#三、无同步方案"><span>三、无同步方案</span></a></h2><p>保证线程安全，也并非一定进行阻塞或非阻塞同步，同步与线程安全两者没有必然联系。如果能让一个方法本来就不涉及共享数据，那它自然就不需要任何同步措施去保证其正确性。因为有一些代码天生就是线程安全的。</p><p>有下面两类</p><ul><li>可重入代码。指可以在代码执行的任何时刻中断它，转而去执行另外一段代码（包括递归），而控制权返回后，原来的程序不会出现任何错误，对结果也不会有所影响。它的特征是不依赖全局变量、存储在堆上的数据和公用的系统资源，用到的状态量都是参数中传入，不调用非可重入的方法等。</li><li>线程本地存储。如ThreadLocal等。</li></ul>',15)]))}]]),s=JSON.parse('{"path":"/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.2%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html","title":"2.9.2 线程安全的实现方法","lang":"zh-CN","frontmatter":{"\x3c!--cover":"/assets/images/cover2.jpg--\x3e","icon":"pen-to-square","date":"2024-11-10T00:00:00.000Z","category":["线程安全的实现方法"],"tag":["互斥同步","非阻塞同步","无同步方案"],"star":true,"ticky":true,"description":"2.9.2 线程安全的实现方法 一、互斥同步（阻塞同步） 互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。 synchronized和ReentrantLock是互斥同步的实现，可参考synchronized关键字的理解文章和Reentra...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.2%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"2.9.2 线程安全的实现方法"}],["meta",{"property":"og:description","content":"2.9.2 线程安全的实现方法 一、互斥同步（阻塞同步） 互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。 synchronized和ReentrantLock是互斥同步的实现，可参考synchronized关键字的理解文章和Reentra..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-10T01:09:56.000Z"}],["meta",{"property":"article:tag","content":"互斥同步"}],["meta",{"property":"article:tag","content":"非阻塞同步"}],["meta",{"property":"article:tag","content":"无同步方案"}],["meta",{"property":"article:published_time","content":"2024-11-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-10T01:09:56.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.9.2 线程安全的实现方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-10T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-10T01:09:56.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、互斥同步（阻塞同步）","slug":"一、互斥同步-阻塞同步","link":"#一、互斥同步-阻塞同步","children":[]},{"level":2,"title":"二、非阻塞同步","slug":"二、非阻塞同步","link":"#二、非阻塞同步","children":[]},{"level":2,"title":"三、无同步方案","slug":"三、无同步方案","link":"#三、无同步方案","children":[]}],"git":{"createdTime":1731116365000,"updatedTime":1731200996000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":3}]},"readingTime":{"minutes":3.25,"words":974},"filePathRelative":"二、JVM/2.9 线程安全与锁优化/2.9.2 线程安全的实现方法.md","localizedDate":"2024年11月10日","excerpt":"\\n<h2>一、互斥同步（阻塞同步）</h2>\\n<p>互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。</p>\\n<p>synchronized和ReentrantLock是互斥同步的实现，可参考<a href=\\"https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">synchronized关键字的理解</a>文章和<a href=\\"https://ranqingisfine.github.io/myBlog/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.3%20ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Reentrant重入锁</a>文章。</p>","autoDesc":true}')}}]);