"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3524],{1709:(i,s,a)=>{a.d(s,{l:()=>e});const e={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0,1,2,3,4,5,6,7,8,9,10,11]},指南:{path:"/category/%E6%8C%87%E5%8D%97/",indexes:[12]},设计模式:{path:"/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",indexes:[13,14,15,16,17,18,19,20]},Redis:{path:"/category/redis/",indexes:[21,22,23,24,25]},JDK8新特性:{path:"/category/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/",indexes:[26,27]},JVM:{path:"/category/jvm/",indexes:[28,29,30,31,32,33,34,35,36]},关键字:{path:"/category/%E5%85%B3%E9%94%AE%E5%AD%97/",indexes:[37]},并发编程:{path:"/category/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",indexes:[38,39,40,37]},"Java IO模型":{path:"/category/java-io%E6%A8%A1%E5%9E%8B/",indexes:[41]},前端编译与优化:{path:"/category/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/",indexes:[29,32,33,34]},Java内存模型与线程:{path:"/category/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/",indexes:[28,30,31,35]},线程安全的实现方法:{path:"/category/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/",indexes:[42,43]},MySQL:{path:"/category/mysql/",indexes:[44,45,46,47,48,49,50,51,52,53,54,55,56]},事务:{path:"/category/%E4%BA%8B%E5%8A%A1/",indexes:[53,54,55,56]},事务的两阶段提交:{path:"/category/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/",indexes:[52]},间隙锁:{path:"/category/%E9%97%B4%E9%9A%99%E9%94%81/",indexes:[48]},临键锁:{path:"/category/%E4%B8%B4%E9%94%AE%E9%94%81/",indexes:[48]},锁:{path:"/category/%E9%94%81/",indexes:[49]},死锁:{path:"/category/%E6%AD%BB%E9%94%81/",indexes:[50]},索引:{path:"/category/%E7%B4%A2%E5%BC%95/",indexes:[44,45,46,47,51,57]},CAS:{path:"/category/cas/",indexes:[39]},Java中的锁:{path:"/category/java%E4%B8%AD%E7%9A%84%E9%94%81/",indexes:[38,40]}}}},tag:{"/":{path:"/tag/",map:{禁用:{path:"/tag/%E7%A6%81%E7%94%A8/",indexes:[9]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[10]},布局:{path:"/tag/%E5%B8%83%E5%B1%80/",indexes:[12]},Markdown:{path:"/tag/markdown/",indexes:[11]},页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[0]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0]},代理模式:{path:"/tag/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/",indexes:[20]},静态代理:{path:"/tag/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/",indexes:[20]},JDK动态代理:{path:"/tag/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",indexes:[20]},cglib动态代理:{path:"/tag/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",indexes:[20]},单例模式:{path:"/tag/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",indexes:[18]},观察者模式:{path:"/tag/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",indexes:[19]},策略模式:{path:"/tag/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/",indexes:[15]},工厂模式:{path:"/tag/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/",indexes:[16]},模版方法模式:{path:"/tag/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/",indexes:[17]},责任链模式:{path:"/tag/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/",indexes:[13]},适配器模式:{path:"/tag/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/",indexes:[14]},redis使用场景:{path:"/tag/redis%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/",indexes:[23]},"redis watch":{path:"/tag/redis-watch/",indexes:[23]},redis持久化:{path:"/tag/redis%E6%8C%81%E4%B9%85%E5%8C%96/",indexes:[24]},RDB:{path:"/tag/rdb/",indexes:[24]},AOF:{path:"/tag/aof/",indexes:[24]},缓存和数据库一致性:{path:"/tag/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7/",indexes:[25]},只读场景:{path:"/tag/%E5%8F%AA%E8%AF%BB%E5%9C%BA%E6%99%AF/",indexes:[25]},并发读写场景:{path:"/tag/%E5%B9%B6%E5%8F%91%E8%AF%BB%E5%86%99%E5%9C%BA%E6%99%AF/",indexes:[25]},缓存穿透:{path:"/tag/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/",indexes:[21]},缓存击穿:{path:"/tag/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/",indexes:[21]},缓存雪崩:{path:"/tag/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/",indexes:[21]},分布式锁:{path:"/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",indexes:[22]},分布式读写锁:{path:"/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%BB%E5%86%99%E9%94%81/",indexes:[22]},分布式信号量:{path:"/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BF%A1%E5%8F%B7%E9%87%8F/",indexes:[22]},default关键字:{path:"/tag/default%E5%85%B3%E9%94%AE%E5%AD%97/",indexes:[27]},static关键字:{path:"/tag/static%E5%85%B3%E9%94%AE%E5%AD%97/",indexes:[27]},Lambda表达式:{path:"/tag/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",indexes:[26]},final关键字:{path:"/tag/final%E5%85%B3%E9%94%AE%E5%AD%97/",indexes:[32,36]},final内存语义:{path:"/tag/final%E5%86%85%E5%AD%98%E8%AF%AD%E4%B9%89/",indexes:[36]},synchronized关键字:{path:"/tag/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/",indexes:[37]},BIO:{path:"/tag/bio/",indexes:[41]},NIO:{path:"/tag/nio/",indexes:[41]},多路复用:{path:"/tag/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",indexes:[41]},信号驱动:{path:"/tag/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8/",indexes:[41]},异步IO:{path:"/tag/%E5%BC%82%E6%AD%A5io/",indexes:[41]},泛型:{path:"/tag/%E6%B3%9B%E5%9E%8B/",indexes:[29,32,33]},装箱拆箱:{path:"/tag/%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/",indexes:[32]},类型擦除:{path:"/tag/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4/",indexes:[29,33]},"装箱、拆箱":{path:"/tag/%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1/",indexes:[34]},语法糖:{path:"/tag/%E8%AF%AD%E6%B3%95%E7%B3%96/",indexes:[34]},QPS:{path:"/tag/qps/",indexes:[35]},TPS:{path:"/tag/tps/",indexes:[35]},PV:{path:"/tag/pv/",indexes:[35]},UV:{path:"/tag/uv/",indexes:[35]},RT:{path:"/tag/rt/",indexes:[35]},最佳线程数:{path:"/tag/%E6%9C%80%E4%BD%B3%E7%BA%BF%E7%A8%8B%E6%95%B0/",indexes:[35]},主内存与工作内存:{path:"/tag/%E4%B8%BB%E5%86%85%E5%AD%98%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98/",indexes:[30]},volatile关键字:{path:"/tag/volatile%E5%85%B3%E9%94%AE%E5%AD%97/",indexes:[30]},Java内存模型特征:{path:"/tag/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%89%B9%E5%BE%81/",indexes:[30]},"happens-before":{path:"/tag/happens-before/",indexes:[30]},内核线程实现:{path:"/tag/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/",indexes:[31]},用户线程实现:{path:"/tag/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/",indexes:[31]},混合实现:{path:"/tag/%E6%B7%B7%E5%90%88%E5%AE%9E%E7%8E%B0/",indexes:[31]},线程调度:{path:"/tag/%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/",indexes:[31]},状态转换:{path:"/tag/%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/",indexes:[31]},线程缺陷:{path:"/tag/%E7%BA%BF%E7%A8%8B%E7%BC%BA%E9%99%B7/",indexes:[28]},协程:{path:"/tag/%E5%8D%8F%E7%A8%8B/",indexes:[28]},互斥同步:{path:"/tag/%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5/",indexes:[42]},非阻塞同步:{path:"/tag/%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%90%8C%E6%AD%A5/",indexes:[42]},无同步方案:{path:"/tag/%E6%97%A0%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/",indexes:[42]},锁优化:{path:"/tag/%E9%94%81%E4%BC%98%E5%8C%96/",indexes:[43]},锁消除:{path:"/tag/%E9%94%81%E6%B6%88%E9%99%A4/",indexes:[43]},锁膨胀:{path:"/tag/%E9%94%81%E8%86%A8%E8%83%80/",indexes:[43]},轻量级锁:{path:"/tag/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81/",indexes:[43]},偏向锁:{path:"/tag/%E5%81%8F%E5%90%91%E9%94%81/",indexes:[43]},脏读:{path:"/tag/%E8%84%8F%E8%AF%BB/",indexes:[56]},不可重复读:{path:"/tag/%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/",indexes:[56]},幻读:{path:"/tag/%E5%B9%BB%E8%AF%BB/",indexes:[56]},读未提交:{path:"/tag/%E8%AF%BB%E6%9C%AA%E6%8F%90%E4%BA%A4/",indexes:[55]},读已提交:{path:"/tag/%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4/",indexes:[55]},可重复读:{path:"/tag/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/",indexes:[55]},串行化:{path:"/tag/%E4%B8%B2%E8%A1%8C%E5%8C%96/",indexes:[55]},MVCC:{path:"/tag/mvcc/",indexes:[54]},"redo log":{path:"/tag/redo-log/",indexes:[52]},"bin log":{path:"/tag/bin-log/",indexes:[52]},行锁:{path:"/tag/%E8%A1%8C%E9%94%81/",indexes:[53]},表锁:{path:"/tag/%E8%A1%A8%E9%94%81/",indexes:[53]},锁升级:{path:"/tag/%E9%94%81%E5%8D%87%E7%BA%A7/",indexes:[48]},事务:{path:"/tag/%E4%BA%8B%E5%8A%A1/",indexes:[48]},间隙锁演示:{path:"/tag/%E9%97%B4%E9%9A%99%E9%94%81%E6%BC%94%E7%A4%BA/",indexes:[49]},死锁检测:{path:"/tag/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/",indexes:[50]},死锁演示:{path:"/tag/%E6%AD%BB%E9%94%81%E6%BC%94%E7%A4%BA/",indexes:[50]},索引数据结构:{path:"/tag/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",indexes:[57]},"B+Tree":{path:"/tag/b_tree/",indexes:[57]},Mylsam:{path:"/tag/mylsam/",indexes:[51]},InnoDB:{path:"/tag/innodb/",indexes:[51]},回表:{path:"/tag/%E5%9B%9E%E8%A1%A8/",indexes:[46,51]},聚集索引:{path:"/tag/%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/",indexes:[51]},非聚集索引:{path:"/tag/%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/",indexes:[51]},联合索引:{path:"/tag/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95/",indexes:[46]},覆盖索引:{path:"/tag/%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/",indexes:[46]},explain执行计划:{path:"/tag/explain%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/",indexes:[47]},索引优化:{path:"/tag/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/",indexes:[47]},索引失效:{path:"/tag/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/",indexes:[44]},"count()用法":{path:"/tag/count()%E7%94%A8%E6%B3%95/",indexes:[45]},CAS:{path:"/tag/cas/",indexes:[39]},Atomic类:{path:"/tag/atomic%E7%B1%BB/",indexes:[39]},ReentrantLock:{path:"/tag/reentrantlock/",indexes:[40]},读写锁:{path:"/tag/%E8%AF%BB%E5%86%99%E9%94%81/",indexes:[38]}}}}}},4776:(i,s,a)=>{a.d(s,{M:()=>e});const e=["/demo/page.html","/demo/","/%E4%B8%83%E3%80%81Kafka/","/%E5%85%AD%E3%80%81Redis/","/%E4%BA%94%E3%80%81MySQL/","/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/","/%E4%BA%8C%E3%80%81JVM/","/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/","/demo/disable.html","/demo/encrypt.html","/demo/markdown.html","/demo/layout.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.7%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.8%20%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.4%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.5%20%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.6%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.2%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.3%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html","/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.1%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html","/%E5%85%AD%E3%80%81Redis/6.4%20%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.html","/%E5%85%AD%E3%80%81Redis/6.5%20Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html","/%E5%85%AD%E3%80%81Redis/6.1%20%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3Redis.html","/%E5%85%AD%E3%80%81Redis/6.2%20Redis%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86.html","/%E5%85%AD%E3%80%81Redis/6.3%20%E4%BF%9D%E8%AF%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7.html","/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/1.1.2%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html","/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/1.1.1%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95.html","/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.4%20Java%E4%B8%8E%E5%8D%8F%E7%A8%8B.html","/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.1%20Java%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8.html","/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.2%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html","/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.3%20Java%E4%B8%8E%E7%BA%BF%E7%A8%8B.html","/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.1%20%E8%AF%AD%E6%B3%95%E7%B3%96.html","/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.2%20%E6%B3%9B%E5%9E%8B.html","/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.3%20%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1.html","/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.1%20%E8%A1%A1%E9%87%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD.html","/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.1%20final%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%B9%E7%90%86%E8%A7%A3.html","/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html","/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.4%20%E8%AF%BB%E5%86%99%E9%94%81.html","/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.2%20Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/4.2.3%20Java%E5%AE%9E%E7%8E%B0%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-%E5%BE%AA%E7%8E%AFCAS.html","/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.3%20ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81.html","/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.3%20Java%20IO%E6%A8%A1%E5%9E%8B/1.3.1%20BIO%E3%80%81NIO.html","/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.2%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html","/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.3%20%E9%94%81%E4%BC%98%E5%8C%96.html","/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.5%20%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88.html","/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.6%20count()%E7%9A%84%E7%94%A8%E6%B3%95.html","/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.3%20%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E3%80%81%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95.html","/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.4%20MySQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html","/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.2%20%E9%97%B4%E9%9A%99%E9%94%81%E3%80%81%E4%B8%B4%E9%94%AE%E9%94%81.html","/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.3%20%E9%94%81%E5%8D%87%E7%BA%A7.html","/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.4%20%E6%AD%BB%E9%94%81.html","/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.2%20Mylsam%E3%80%81InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html","/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.4%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html","/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.1%20%E8%A1%8C%E9%94%81%E3%80%81%E8%A1%A8%E9%94%81.html","/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.3%20MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6.html","/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.2%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html","/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.1%20%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7.html","/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.1%20%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html","/intro.html"]},3781:(i,s,a)=>{a.d(s,{U:()=>e});const e={article:{"/":{path:"/article/",indexes:[0,26,21,22,38,23,24,25,41,44,45,46,47,48,49,50,51,52,53,57,13,14,54,15,16,17,55,18,19,56,42,43,39,58,40,1,37,2,28,29,3,30,31,4,5,32,33,34,35,6,7,8,20,27,36,9,10,12,11]}},star:{"/":{path:"/star/",indexes:[26,21,22,38,23,24,25,41,44,45,46,47,48,49,50,51,52,53,57,13,14,54,15,16,17,55,18,19,56,42,43,39,40,37,28,29,30,31,32,33,34,35,20,27,36,0]}},timeline:{"/":{path:"/timeline/",indexes:[26,21,22,38,23,24,25,41,44,45,46,47,48,49,50,51,52,53,57,13,14,54,15,16,17,55,18,19,56,42,43,39,58,40,1,37,2,28,29,3,30,31,4,5,32,33,34,35,6,7,8,20,27,36,9,10,12,11,0]}}}},7877:(i,s,a)=>{a.d(s,{B:()=>O});var e={};a.r(e);var n={};a.r(n);var t={};a.r(t),a.d(t,{default:()=>o});var l={};a.r(l);var E={};a.r(E),a.d(E,{default:()=>u});var h={};a.r(h),a.d(h,{default:()=>w});var A={};a.r(A),a.d(A,{default:()=>V});var d=a(2402),p=a(3073),B=a(9403),r=a(596),k=a(8831);const o={enhance:({app:i})=>{(0,d.L4)("FontIcon")||i.component("FontIcon",B.A),(0,d.L4)("Badge")||i.component("Badge",r.A),(0,d.L4)("VPCard")||i.component("VPCard",k.A)},setup:()=>{(0,p.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,p.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,p.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]};var c=a(6358),g=a(3827),m=a(355),y=a(1599),v=a(8913),F=a(457),C=a(3349),b=a(1781),D=a(9212);const u={enhance:({app:i})=>{i.component("CodeTabs",b.S),i.component("Tabs",D.t)}};var f=a(8031),x=a(3027);const w={enhance:({app:i})=>{i.component("CodeDemo",f.A),i.component("MdDemo",x.A)}};var I=a(5753),M=a(5054),J=a(783),L=a(8465),S=a(641),z=a(7107),R=a(9920);(0,L.M_)((i=>{const s=i.t,a=!1!==i.I,e=i.i;return a?{title:s,content:e?()=>[(0,S.h)(J.GB,{icon:e}),s]:null,order:i.O,index:i.I}:null}));const V={enhance:({app:i,router:s})=>{const{scrollBehavior:a}=s.options;s.options.scrollBehavior=async(...i)=>(await J.lE.wait(),a(...i)),(0,J.fk)(i),i.component("HopeIcon",J.GB),i.component("BloggerInfo",z.tI),i.component("SocialMedias",z.rS),i.component("GlobalEncrypt",R.J),i.component("LocalEncrypt",R.n)},setup:()=>{(0,J.PV)(),(0,J.i$)(),(0,z.su)()},layouts:{Layout:J.PE,NotFound:J.Mk,BlogCategory:z.Pn,BlogHome:z.qX,BlogType:z.z7,Timeline:z.Kf}},O=[e,n,t,c,g,m,y,v,F,C,l,E,h,I,M,A].map((i=>i.default)).filter(Boolean)},8164:(i,s,a)=>{a.d(s,{J:()=>n,c:()=>e});const e=JSON.parse("{}"),n=Object.fromEntries([["/",{loader:()=>a.e(4470).then(a.bind(a,8719)),meta:{t:"博客主页",i:"home"}}],["/intro.html",{loader:()=>a.e(3912).then(a.bind(a,136)),meta:{d:17311104e5,l:"2024年11月9日",v:"/assets/images/cover3.jpg",e:"\n<p>将你的个人介绍和档案放置在此处。</p>\n",r:{minutes:.09,words:28},t:"九、介绍页",y:"a"}}],["/demo/",{loader:()=>a.e(3320).then(a.bind(a,5351)),meta:{d:1731024e6,l:"2024年11月8日",c:["使用指南"],r:{minutes:.1,words:29},t:"八、主要功能与配置演示",y:"a"}}],["/demo/disable.html",{loader:()=>a.e(2756).then(a.bind(a,4139)),meta:{d:1730302178e3,c:["使用指南"],g:["禁用"],e:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",r:{minutes:.43,words:128},t:"布局与功能禁用",i:"gears",O:4,y:"a"}}],["/demo/encrypt.html",{loader:()=>a.e(2581).then(a.bind(a,1314)),meta:{d:1730302178e3,c:["使用指南"],g:["加密"],n:!0,r:{minutes:.51,words:154},t:"密码加密的文章",i:"lock",y:"a"}}],["/demo/layout.html",{loader:()=>a.e(6216).then(a.bind(a,4087)),meta:{d:1730302178e3,c:["指南"],g:["布局"],e:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',r:{minutes:.53,words:159},t:"布局",i:"object-group",O:2,y:"a"}}],["/demo/markdown.html",{loader:()=>a.e(8711).then(a.bind(a,7520)),meta:{d:1730302178e3,c:["使用指南"],g:["Markdown"],e:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",r:{minutes:3.47,words:1041},t:"Markdown 展示",i:"fab fa-markdown",O:2,y:"a"}}],["/demo/page.html",{loader:()=>a.e(645).then(a.bind(a,5397)),meta:{a:"Ms.Hope",d:15778368e5,l:"2020年1月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,v:"/assets/images/cover1.jpg",e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:1.76,words:529},t:"页面配置",i:"file",O:3,y:"a"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/",{loader:()=>a.e(7806).then(a.bind(a,7842)),meta:{d:17304192e5,l:"2024年11月1日",c:["使用指南"],r:{minutes:.07,words:21},t:"一、Java基础",y:"a"}}],["/%E4%B8%83%E3%80%81Kafka/",{loader:()=>a.e(339).then(a.bind(a,2669)),meta:{d:17309376e5,l:"2024年11月7日",c:["使用指南"],r:{minutes:.06,words:19},t:"七、Kafka",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.1%20%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(1267).then(a.bind(a,9361)),meta:{d:17304192e5,l:"2024年11月1日",c:["设计模式"],g:["代理模式","静态代理","JDK动态代理","cglib动态代理"],e:'\n<h2>一、介绍</h2>\n<p>代理模式提供了对目标对象额外的访问方式，即通过代理对象访问目标对象，这样可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。</p>\n<p>简言之，代理模式就是设置一个中间代理来控制访问原目标对象，以达到增强原对象的功能和简化访问方式。</p>\n<figure><figcaption>代理模式</figcaption></figure>\n<p><strong>UML理解</strong></p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>代理对象实现真实对象的同一个接口，然后代理对象引用真实对象，代理对象给真实对象的方法增强</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:7.13,words:2138},t:"3.1 代理模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.2%20%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(7861).then(a.bind(a,6440)),meta:{d:17312832e5,l:"2024年11月11日",c:["设计模式"],g:["单例模式"],e:"\n<p>单例（Singleton）模式的定义**：指一个类只有一个实例，且该类能自行创建这个实例的一种模式。**例如，Windows 中只能打开一个任务管理器，这样可以避免因打开多个任务管理器窗口而造成内存资源的浪费，或出现各个窗口显示内容的不一致等错误。</p>\n<p>单例模式的<strong>优点</strong>：</p>\n<ul>\n<li>单例模式可以保证内存里只有一个实例，减少了内存的开销。</li>\n<li>可以避免对资源的多重占用。</li>\n<li>单例模式设置全局访问点，可以优化和共享资源的访问。</li>\n</ul>\n<p>单例模式的<strong>缺点</strong>：</p>",r:{minutes:3.51,words:1053},t:"3.2 单例模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.3%20%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(80).then(a.bind(a,3328)),meta:{d:17312832e5,l:"2024年11月11日",c:["设计模式"],g:["观察者模式"],e:"\n<h2>一、介绍</h2>\n<p>观察者模式定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新，其主要解决一个对象状态改变给其他关联对象通知的问题，保证易用和低耦合。</p>\n<p>观察者模式又叫发布-订阅模式，UML图如下：</p>\n<figure><figcaption>观察者模式</figcaption></figure>\n<p>理解：将观察者对象添加到观察者集合里面，通知方法循环调用观察者集合里面的对象方法。</p>\n<p>观察者多用于类似消息队列的场景。</p>\n<ul>\n<li>具体观察者实现同一个接口</li>\n<li>抽象目标里引用观察者集合，具备新增和移除观察者方法以及通知观察着的通知方法</li>\n<li>具体目标继承抽象目标并实现通知方法</li>\n</ul>",r:{minutes:3.45,words:1036},t:"3.3 观察者模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.4%20%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(3045).then(a.bind(a,8932)),meta:{d:17313696e5,l:"2024年11月12日",c:["设计模式"],g:["策略模式"],e:'\n<h2>一、介绍</h2>\n<p>阿里开发规约-编程规约-控制语句-第六条 ：超过 3 层的 if-else 的逻辑判断代码可以使用卫语句、策略模式、状态模式等来实现。相信大家都见过这种代码：</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (conditionA) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    逻辑1</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (conditionB) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    逻辑2</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> (conditionC) {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    逻辑3</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">else</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">    逻辑4</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.19,words:1258},t:"3.4 策略模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.5%20%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(1085).then(a.bind(a,3897)),meta:{d:17313696e5,l:"2024年11月12日",c:["设计模式"],g:["工厂模式"],e:'\n<h2>一、简单工厂模式</h2>\n<p>含义：我们把被创建的对象称为“产品”，把创建产品的对象称为“工厂”。如果要创建的产品不多，只要一个工厂类就可以完成，这种模式叫“简单工厂模式”。</p>\n<p>简单工厂：一个工厂生产多个产品</p>\n<p>违反开闭原则：每新增一个产品就要去修改工厂代码</p>\n<figure><figcaption>简单工厂模式</figcaption></figure>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Client</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">String</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[] </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">args</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    //抽象产品</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> interface</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Product</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    //具体产品：ProductA</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ConcreteProduct1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Product</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"具体产品1显示..."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    //具体产品：ProductB</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> ConcreteProduct2</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> implements</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Product</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> show</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">            System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"具体产品2显示..."</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> PRODUCT_A </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> PRODUCT_B </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> PRODUCT_C </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> SimpleFactory</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> static</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B"> Product</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> makeProduct</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> kind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            switch</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (kind) {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                case</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">PRODUCT_A</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ConcreteProduct1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                case</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> Const</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">PRODUCT_B</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">:</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> ConcreteProduct2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.28,words:1285},t:"3.5 工厂模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.6%20%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(6115).then(a.bind(a,5512)),meta:{d:17313696e5,l:"2024年11月12日",c:["设计模式"],g:["模版方法模式"],e:"\n<h2>一、介绍</h2>\n<p>抽象模板角色声明并实现，负责对基本方法的调度，一般以final修饰，不允许具体模板角色重写。模板方法一般也是一个具体方法。</p>\n<p>钩子方法（Hook Method）是模板方法模式中的一种特殊方法，用于在抽象类中提供一个默认的实现，但允许具体子类选择性地进行重写或扩展。钩子方法允许子类在不改变算法骨架的情况下，对算法的某些步骤进行定制。</p>\n<figure><figcaption>模版方法模式</figcaption></figure>\n<p>抽象模板角色声明并实现，负责对基本方法的调度，一般以<strong>final修饰</strong>，不允许具体模板角色重写。模板方法一般也是一个具体方法。</p>",r:{minutes:4.44,words:1333},t:"3.6 模板方法模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.7%20%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(2474).then(a.bind(a,7203)),meta:{d:1731456e6,l:"2024年11月13日",c:["设计模式"],g:["责任链模式"],e:"\n<h2>一、介绍</h2>\n<p>责任链模式顾名思义是将不同职责的步骤串联起来执行，并且一个步骤执行完成之后才能够执行下一个步骤。从名字可以看出通常责任链模式使用链表来完成。因此当执行任务的请求发起时，从责任链上第一步开始往下传递，直到最后一个步骤完成。在责任链模式当中，客户端只用执行一次流程开始的请求便不再需要参与到流程执行当中，责任链上的流程便能够自己一直往下执行，客户端同样也并不关心执行流程细节，从而实现与流程之间的解耦。</p>\n<figure><figcaption></figcaption></figure>\n<p>责任链模式主要角色如下：</p>\n<figure><figcaption></figcaption></figure>",r:{minutes:6.25,words:1874},t:"3.7 责任链模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/3.8%20%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F.html",{loader:()=>a.e(3880).then(a.bind(a,2583)),meta:{d:1731456e6,l:"2024年11月13日",c:["设计模式"],g:["适配器模式"],e:"\n<p>在现实生活中，经常出现两个对象因接口不兼容而不能在一起工作的实例，这时需要第三者进行适配。例如，讲中文的人同讲英文的人对话时需要一个翻译，用直流电的笔记本电脑接交流电源时需要一个电源适配器，用计算机访问照相机的 SD 内存卡时需要一个读卡器等。</p>\n<p>将一个类的接口转换成客户希望的另外一个接口，使得原本由于接口不兼容而不能一起工作的那些类能一起工作。适配器模式分为<strong>类结构型模式</strong>和<strong>对象结构型模式</strong>两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p>\n<p>理解：<strong>适配者</strong>通过<strong>适配器</strong>转化成想要的<strong>目标</strong></p>",r:{minutes:5.47,words:1640},t:"3.8 适配器模式",i:"pen-to-square",y:"a"}}],["/%E4%B8%89%E3%80%81%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(2464).then(a.bind(a,5047)),meta:{d:1730592e6,l:"2024年11月3日",c:["使用指南"],r:{minutes:.07,words:22},t:"三、设计模式",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/",{loader:()=>a.e(7703).then(a.bind(a,1762)),meta:{d:17305056e5,l:"2024年11月2日",c:["使用指南"],r:{minutes:.06,words:19},t:"二、JVM",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/",{loader:()=>a.e(3938).then(a.bind(a,5535)),meta:{d:17307648e5,l:"2024年11月5日",c:["使用指南"],r:{minutes:.06,words:19},t:"五、MySQL",y:"a"}}],["/%E5%85%AD%E3%80%81Redis/6.1%20%E4%B8%80%E6%96%87%E4%BA%86%E8%A7%A3Redis.html",{loader:()=>a.e(5218).then(a.bind(a,2029)),meta:{d:1731888e6,l:"2024年11月18日",c:["Redis"],g:["redis使用场景","redis watch"],e:"\n<h2>一、Redis使用场景</h2>\n<ul>\n<li>缓存：将经常被访问的数据存储在Redis中，减少对数据库的访问压力</li>\n<li>计数器：使用Redis的原子操作，实现高并发场景下的计数功能</li>\n<li>分布式锁：使用Redis的原子操作和过期时间设置，实现分布式锁，确保在分布式系统中的数据一致性。</li>\n<li>简单的发布订阅消息系统：实现消息的异步处理</li>\n</ul>\n<h2>二、Redis是单线程的</h2>\n<p>Redis是很快的，官⽅表示，Redis是基于<strong>内存操作</strong>，CPU不是Redis性能瓶颈，Redis的瓶颈是根据机器的<strong>内存和⽹络带宽</strong>，既然可以使⽤单线程来实现，就使⽤单线程了！所有就使⽤了单线程了！</p>",r:{minutes:2.85,words:855},t:"6.1 一文了解Redis",i:"pen-to-square",y:"a"}}],["/%E5%85%AD%E3%80%81Redis/6.2%20Redis%E6%8C%81%E4%B9%85%E5%8C%96%E5%8E%9F%E7%90%86.html",{loader:()=>a.e(788).then(a.bind(a,4226)),meta:{d:1731888e6,l:"2024年11月18日",c:["Redis"],g:["redis持久化","RDB","AOF"],e:"\n<p>Redis持久化方式有RDB和AOF</p>\n<h2>一、RDB</h2>\n<p>RDB 是⼀种快照存储持久化⽅式，具体就是将 Redis 某⼀时刻的内存数据保存到硬盘的⽂件当中，默认保存的⽂件名为 dump.rdb ，⽽在 Redis 服务器启动时，会重新加载 dump.rdb ⽂件的数据到内存当中恢复数据。</p>\n<h3>1、开启RDB持久化方式</h3>\n<ul>\n<li>命令生成：客户端可以通过向 Redis 服务器发送 save 或 bgsave 命令让服务器⽣成 rdb ⽂件</li>\n<li>通过服务器配置⽂件指定触发 RDB 条件。</li>\n</ul>\n<h4>1.1 命令生成方式</h4>",r:{minutes:5.06,words:1517},t:"6.2 Redis持久化原理",i:"pen-to-square",y:"a"}}],["/%E5%85%AD%E3%80%81Redis/6.3%20%E4%BF%9D%E8%AF%81%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E4%B8%80%E8%87%B4%E6%80%A7.html",{loader:()=>a.e(5466).then(a.bind(a,4792)),meta:{d:1731888e6,l:"2024年11月18日",c:["Redis"],g:["缓存和数据库一致性","只读场景","并发读写场景"],e:"\n<h2>一、只读场景</h2>\n<p><strong>注意</strong>：单独的只读去数据场景是不会出现不一致。只有读和写在一起才会出现。</p>\n<p>逻辑如下：</p>\n<figure><figcaption></figcaption></figure>\n<p>1、当应用程序需要从数据库读取数据时，先检查缓存数据是否命中。\n2、如果缓存命中，则查下数据库获取数据，同时将数据写到缓存中并设置过期时间，以便后续读取相同数据会命中缓存，最后再把数据返回给调用者。\n3、如果缓存命中，直接返回。</p>\n<h2>二、并发读写数据场景</h2>\n<p><strong>先操作数据库再操作缓存</strong></p>",r:{minutes:2.17,words:650},t:"6.3 保证缓存和数据库的一致性",i:"pen-to-square",y:"a"}}],["/%E5%85%AD%E3%80%81Redis/6.4%20%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%E3%80%81%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%E3%80%81%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9.html",{loader:()=>a.e(1728).then(a.bind(a,4777)),meta:{d:17319744e5,l:"2024年11月19日",c:["Redis"],g:["缓存穿透","缓存击穿","缓存雪崩"],e:"\n<h2>一、缓存穿透</h2>\n<p><strong>缓存穿透：</strong>⽤户想要查询⼀个数据，发现redis内存数据库没有，也就是缓存没有命中，于是向持久层数据库查询，当⽤户很多的时候，缓存都没有命中，于是都去请求了持久层数据库。这会给持久层数据库造成很⼤的压⼒，这时候就相当于出现了缓存穿透。</p>\n<p>解决方法是：<strong>布隆过滤器</strong>和<strong>缓存空对象</strong></p>\n<h3>1、布隆过滤器</h3>\n<p>布隆过滤器是⼀种数据结构，对所有可能查询的参数以hash形式存储，可以用于检索一个元素是否在一个集合中，在控制层先进⾏校验，不符合则丢弃，从⽽避免了对底层存储系统的查询压⼒。</p>",r:{minutes:7.19,words:2156},t:"6.4 缓存穿透、缓存击穿、缓存雪崩",i:"pen-to-square",y:"a"}}],["/%E5%85%AD%E3%80%81Redis/6.5%20Redisson%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81.html",{loader:()=>a.e(3077).then(a.bind(a,4369)),meta:{d:17319744e5,l:"2024年11月19日",c:["Redis"],g:["分布式锁","分布式读写锁","分布式信号量"],e:"\n<h2>一、Redisson概念</h2>\n<p><strong>原理</strong></p>\n<ul>\n<li>基于NIO的Netty框架</li>\n<li>将Redis原生数据结构进行封装</li>\n<li>分布式锁基础上还提供了读写锁、公平锁、红锁、信号量、闭锁等</li>\n</ul>\n<p><strong>jedis和redisson分布式锁实现方式区别</strong></p>\n<ul>\n<li>Jedis锁不具有可重入性，redisson具有可重入性</li>\n<li>jedis是只支持单机的，redisson支持集群模式</li>\n<li>redisson<code>目前是官方唯一推荐的java版的分布式锁,他支持 </code>redlock</li>\n</ul>",r:{minutes:3.97,words:1190},t:"6.5 Redisson分布式锁",i:"pen-to-square",y:"a"}}],["/%E5%85%AD%E3%80%81Redis/",{loader:()=>a.e(8880).then(a.bind(a,5316)),meta:{d:17308512e5,l:"2024年11月6日",c:["使用指南"],r:{minutes:.06,words:19},t:"六、Redis",y:"a"}}],["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",{loader:()=>a.e(4097).then(a.bind(a,1227)),meta:{d:17306784e5,l:"2024年11月4日",c:["使用指南"],r:{minutes:.07,words:22},t:"四、并发编程",y:"a"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/1.1.1%20%E6%8E%A5%E5%8F%A3%E7%9A%84%E9%9D%99%E6%80%81%E6%96%B9%E6%B3%95%E5%92%8C%E9%BB%98%E8%AE%A4%E6%96%B9%E6%B3%95.html",{loader:()=>a.e(25).then(a.bind(a,2930)),meta:{d:17304192e5,l:"2024年11月1日",c:["JDK8新特性"],g:["default关键字","static关键字"],e:'\n<p>JDK8前interface</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>变量修饰符：public、static、final</span></span>\n<span class="line"><span>方法：public、abstract</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.01,words:604},t:"1.1.1 接口的静态方法和默认方法",i:"pen-to-square",y:"a"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/1.1.2%20Lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F.html",{loader:()=>a.e(3028).then(a.bind(a,2553)),meta:{d:17320608e5,l:"2024年11月20日",c:["JDK8新特性"],g:["Lambda表达式"],e:'\n<h2>一、匿名内部类</h2>\n<p>能够使用Lambda的依据是必须有相应的函数接口（函数接口，是指内部只有一个抽象方法的接口）接口名和函数名都一同省掉了。</p>\n<h3>1、无参函数的简写</h3>\n<p>JDK7代码</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">\t\t\tnew</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Thread</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Runnable</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">() {</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            @</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B">Override</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> run</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"Thread run()"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">        })</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">start</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.71,words:1113},t:"1.1.2 Lambda表达式",i:"pen-to-square",y:"a"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.1%20final%E5%85%B3%E9%94%AE%E5%AD%97%E5%AF%B9%E7%90%86%E8%A7%A3.html",{loader:()=>a.e(4472).then(a.bind(a,2258)),meta:{d:17303328e5,l:"2024年10月31日",c:["JVM"],g:["final关键字","final内存语义"],e:'\n<h2>一、修饰基本数据类型</h2>\n<p>当final修饰的是一个基本数据类型数据时, 这个数据的值在初始化后将不能被改变。final修饰基本数据类型时的内存示意图：</p>\n<figure><figcaption>image</figcaption></figure>\n<p>变量a在初始化后将永远指向003这块内存, 而这块内存在初始化后将永远保存数值100。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">final</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> int</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">30</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//编译器会报错提示无法将值赋给final变量a</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.8,words:1139},t:"1.2.1 final关键字的理解",i:"pen-to-square",y:"a"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html",{loader:()=>a.e(2719).then(a.bind(a,1659)),meta:{d:1731024e6,l:"2024年11月8日",c:["关键字","并发编程"],g:["synchronized关键字"],e:"\n<p>Java里synchronized关键字保障互斥同步，这是一种块结构的同步语法。</p>\n<p>synchronized具体表现为以下三种形式：</p>\n<ul>\n<li>对于普通同步方法，锁是当前实例对象</li>\n<li>对于静态同步方法，锁是当前类的Class对象</li>\n<li>对于同步方法块，锁是synchronized括号里配置的对象</li>\n</ul>\n<p><strong>synchronized原理</strong>：synchronized关键字经过Javac编译之后，会在同步块前后分别形成monitorenter和monitorexit两个字节码指令。在执行monitorenter指令时，首先要去尝试获取对象的锁。如果这个对象没有被锁定，或者当前线程已经持有了那个对象的锁，就把锁的计数器的值增加一，而在执行monitorexit指令时会将锁计数器的值减一。一旦计数器的值为零，锁随即就被释放了。如果获取对象锁失败，那当前线程就应当被阻塞等待，直到请求锁定的对象被持有它的线程释放为止。</p>",r:{minutes:1.84,words:553},t:"1.2.2 synchronized关键字的理解",i:"pen-to-square",y:"a"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.3%20Java%20IO%E6%A8%A1%E5%9E%8B/1.3.1%20BIO%E3%80%81NIO.html",{loader:()=>a.e(1153).then(a.bind(a,2264)),meta:{d:1731888e6,l:"2024年11月18日",c:["Java IO模型"],g:["BIO","NIO","多路复用","信号驱动","异步IO"],e:"\n<p>Java的IO分为两大类</p>\n<ul>\n<li>阻塞IO（Blocking IO），基于字节流和字符流，以阻塞式IO操作为主。如FileInputStream、InputStreamReader等</li>\n<li>非阻塞IO（NIO），基于通道（Channel）和缓冲区（Buffer）进行操作，允许线程在等待IO时执行其它任务。如ByteBuffer、FileChannel等</li>\n</ul>\n<p><strong>阻塞 I/O（Blocking I/O）</strong>：在这种模型中，I/O 操作是阻塞的，即执行 I/O 操作时，线程会被阻塞，直到操作完成。在阻塞 I/O 模型中，每个连接都需要一个线程来处理。因此，对于大量并发连接的场景，阻塞 I/O 模型的性能较差。</p>",r:{minutes:4.32,words:1295},t:"1.3.1 BIO、NIO",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.1%20%E8%AF%AD%E6%B3%95%E7%B3%96.html",{loader:()=>a.e(1030).then(a.bind(a,6700)),meta:{d:17306784e5,l:"2024年11月4日",c:["JVM","前端编译与优化"],g:["final关键字","泛型","装箱拆箱"],e:"\n<p>指的是在计算机语言中添加的某种语法，这种语法对语言的编译结果和功能并没有实际影响，但是却能更方便程序员使用该语言。</p>\n<p>常见的语法糖：泛型、自动装箱拆箱、条件编译等。</p>\n<p><strong>解语法糖</strong>：Java虚拟机运行时并不支持这些语法，它们在编译阶段会还原回原始的基础语法结构，这个过程叫解语法糖。</p>\n",r:{minutes:.53,words:159},t:"2.7.1 语法糖",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.2%20%E6%B3%9B%E5%9E%8B.html",{loader:()=>a.e(2073).then(a.bind(a,3565)),meta:{d:17306784e5,l:"2024年11月4日",c:["JVM","前端编译与优化"],g:["泛型","类型擦除"],e:'\n<p>泛型的本质是参数化类型或者参数化多态的应用。</p>\n<h2>概念</h2>\n<p>Java语言中的泛型只在程序源码中存在，在编译之后的字节码文件中，全部泛型都被替换为原来的裸类型，并在相应的地方插入了强制转型代码。因此对于Java来说，<code>ArrayList&lt;Integer&gt;</code>与<code>ArrayList&lt;String&gt;</code>其实是同一个类型。</p>\n<p><strong>优缺点</strong></p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">缺点：性能低，需要不断的拆箱和装箱</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">优点：擦除式泛型的实现只需要在Javac编译器上做出改进即可，不需要改动字节码、不需要改动虚拟机，保证了和之前版本的兼容性。</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.24,words:973},t:"2.7.2 泛型",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/2.7.3%20%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1.html",{loader:()=>a.e(3182).then(a.bind(a,7370)),meta:{d:17306784e5,l:"2024年11月4日",c:["JVM","前端编译与优化"],g:["装箱、拆箱","语法糖"],e:'\n<h2>一、什么是装箱</h2>\n<p>为什么要装箱？——让基本类型具备对象的特征，实现更多的功能。</p>\n<div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> Integer</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//JDK5前必须new</span></span>\n<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B">Integer</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75"> i</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">//JDK5后自动装箱</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:2.19,words:658},t:"2.7.3 自动装箱、拆箱",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.1%20%E8%A1%A1%E9%87%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%80%A7%E8%83%BD.html",{loader:()=>a.e(4252).then(a.bind(a,7869)),meta:{d:17306784e5,l:"2024年11月4日",c:["JVM","Java内存模型与线程"],g:["QPS","TPS","PV","UV","RT","最佳线程数"],e:"\n<blockquote>\n<p>QPS</p>\n</blockquote>\n<p>QPS表示系统/接口每秒能够处理的查询请求次数</p>\n<blockquote>\n<p>TPS</p>\n</blockquote>\n<p>TPS表示系统每秒能响应的请求次数（事务数），可以衡量一个服务器性能的高低好坏。</p>\n<p>TPS和QPS区别：一个事务指客户端向服务器发送请求然后服务器作出反应的过程。而在TPS中，为处理1次请求可能会引发后续多次对服务器端的访问才能完成这次工作。每次访问都算1次QPS，所以一次TPS可能包含多个QPS。</p>\n<p>如：访问一个页面会请求服务器3次，产生了1个T，3个Q。</p>",r:{minutes:1.26,words:379},t:"2.8.1 衡量服务器性能",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.2%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.html",{loader:()=>a.e(3766).then(a.bind(a,1651)),meta:{d:17308512e5,l:"2024年11月6日",c:["JVM","Java内存模型与线程"],g:["主内存与工作内存","volatile关键字","Java内存模型特征","happens-before"],e:"\n<h2>一、主内存与工作内存</h2>\n<p>Java内存模型规定了所有的变量都存储在主内存中，每条线程还有自己的工作内存，线程的工作内存保存了被该线程使用的变量的主内存副本，线程对变量的所有操作（读取、赋值等）都必须在工作内存中进行，而不能直接读写主内存中的数据。不同的线程之间也无法直接访问对方工作内存中的变量，线程间变量值的传递均需要通过主内存来完成。</p>\n<h2>二、volatile型变量特殊规则</h2>\n<p>一个变量被定义成volatile后，它将具备两项特性：</p>\n<h3>1、可见性</h3>\n<p>保证此变量对所有线程的可见性，这里的“可见性”是指一条线程修改了这个变量的值，新值对于其他线程来说是立即可知的</p>",r:{minutes:7.98,words:2394},t:"2.8.2 Java内存模型",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.3%20Java%E4%B8%8E%E7%BA%BF%E7%A8%8B.html",{loader:()=>a.e(6528).then(a.bind(a,8028)),meta:{d:17308512e5,l:"2024年11月6日",c:["JVM","Java内存模型与线程"],g:["内核线程实现","用户线程实现","混合实现","线程调度","状态转换"],e:"\n<p>进程是操作系统分配资源的最小单元，线程是操作系统调度的最小单元。Thread所有关键方法都被声明为Native。</p>\n<p>操作系统实现线程的三种方式：</p>\n<ul>\n<li>使用内核线程实现（线程和内核线程1:1实现）</li>\n<li>使用用户线程实现（进程和用户线程1:N实现）</li>\n<li>使用用户线程➕轻量级进程混合实现（N:M实现）</li>\n</ul>\n<h2>一、内核线程实现</h2>\n<p><strong>Java线程是采用内核线程来实现的。</strong></p>\n<p>内核线程是直接由操作系统内核支持的线程，这种线程由内核来完成线程切换，内核通过操纵调度器对线程进行调度，并负责将线程的任务映射到各个处理器上。</p>",r:{minutes:4.32,words:1295},t:"2.8.3 Java与线程",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/2.8.4%20Java%E4%B8%8E%E5%8D%8F%E7%A8%8B.html",{loader:()=>a.e(4962).then(a.bind(a,5322)),meta:{d:17309376e5,l:"2024年11月7日",c:["JVM","Java内存模型与线程"],g:["线程缺陷","协程"],e:"\n<h2>一、线程的缺陷</h2>\n<p>在理解虚拟线程前，我们先回顾一下线程的特点：</p>\n<ul>\n<li>线程是由操作系统创建并调度的资源；</li>\n<li>线程切换会耗费大量CPU时间；</li>\n<li>一个系统能同时调度的线程数量是有限的，通常在几百至几千级别。</li>\n</ul>\n<p>因此，我们说线程是一种重量级资源。在服务器端，对用户请求，通常都实现为一个线程处理一个请求。由于用户的请求数往往远超操作系统能同时调度的线程数量，所以通常使用线程池来尽量减少频繁创建和销毁线程的成本</p>\n<p>对于需要处理大量IO请求的任务来说，使用线程是低效的，因为一旦读写IO，线程就必须进入等待状态，直到IO数据返回。常见的IO操作包括：</p>",r:{minutes:3.18,words:954},t:"2.8.4 Java与协程",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.1%20Java%E8%AF%AD%E8%A8%80%E4%B8%AD%E7%9A%84%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8.html",{loader:()=>a.e(9720).then(a.bind(a,7776)),meta:{d:17309376e5,l:"2024年11月7日",c:["JVM","前端编译与优化"],g:["泛型","类型擦除"],e:"\n<p>什么是<strong>线程安全</strong>：当多个线程同时访问一个对象时，调用这个对象的行为都可以获得正确的结果，那就称这个对象是线程安全的。</p>\n<p>Java语言中操作共享的数据分为以下五类：</p>\n<ul>\n<li>不可变</li>\n<li>绝对线程安全</li>\n<li>相对线程安全</li>\n<li>线程兼容</li>\n<li>线程对立</li>\n</ul>\n<h2>1、不可变</h2>\n<p>不可变的对象一定是线程安全的，用final关键字修饰就可以保证它是不可变的。可以类比java.lang.String类的对象实例，它是一个典型的不可变对象，用户调用它的subString()、replace()、和concat()这些方法都不会影响它原来的值，只会返回一个新构建的字符串（关于String字符串的理解后续会发布一篇）。</p>",r:{minutes:4.02,words:1206},t:"2.9.1 Java语言中的线程安全",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.2%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html",{loader:()=>a.e(9703).then(a.bind(a,9505)),meta:{d:17311968e5,l:"2024年11月10日",c:["线程安全的实现方法"],g:["互斥同步","非阻塞同步","无同步方案"],e:'\n<h2>一、互斥同步（阻塞同步）</h2>\n<p>互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。</p>\n<p>synchronized和ReentrantLock是互斥同步的实现，可参考<a href="https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html" target="_blank" rel="noopener noreferrer">synchronized关键字的理解</a>文章和<a href="https://ranqingisfine.github.io/myBlog/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.3%20ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81.html" target="_blank" rel="noopener noreferrer">Reentrant重入锁</a>文章。</p>',r:{minutes:3.25,words:974},t:"2.9.2 线程安全的实现方法",i:"pen-to-square",y:"a"}}],["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.3%20%E9%94%81%E4%BC%98%E5%8C%96.html",{loader:()=>a.e(7212).then(a.bind(a,6031)),meta:{d:17311968e5,l:"2024年11月10日",c:["线程安全的实现方法"],g:["锁优化","锁消除","锁膨胀","轻量级锁","偏向锁"],e:"\n<p>有哪些锁优化技术？</p>\n<ul>\n<li>自适应自旋</li>\n<li>锁消除</li>\n<li>锁膨胀</li>\n<li>轻量级锁</li>\n<li>偏向锁</li>\n</ul>\n<h2>一、自旋锁与自适应锁</h2>\n<p>互斥同步对性能最大的影响是阻塞的实现，挂起和恢复线程操作都需要转入内核态中完成。</p>\n<p><strong>自旋锁</strong>：如果有多个处理器核心，能让两个或以上的线程同时并行执行，我们就可以让后面请求锁的那个线程“稍等一会儿”，但不放弃处理器的执行时间，看看持有锁的线程释放很快就会释放锁。为了让线程等待，我们只须让线程执行一个忙循环（自旋）。</p>",r:{minutes:9.42,words:2827},t:"2.9.3 锁优化",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.1%20%E4%BA%8B%E5%8A%A1%E5%8F%8A%E5%85%B6%E7%89%B9%E6%80%A7.html",{loader:()=>a.e(7636).then(a.bind(a,9720)),meta:{d:17312832e5,l:"2024年11月11日",c:["MySQL","事务"],g:["脏读","不可重复读","幻读"],e:"\n<p><strong>什么是事务</strong>：事务，由一个有限的数据库操作序列构成，这些操作要么全部执行,要么全部不执行，是一个不可分割的工作单位。</p>\n<p>假如A转账给B 100 元，先从A的账户里扣除 100 元，再在 B 的账户上加上 100 元。如果扣完A的100元后，还没来得及给B加上，银行系统异常了，最后导致A的余额减少了，B的余额却没有增加。所以就需要事务，将A的钱回滚回去，就是这么简单。</p>\n<h2>一、事务的四大特性</h2>\n<figure><figcaption>事务的四大特性</figcaption></figure>\n<ul>\n<li>\n<p><strong>原子性：</strong> 事务作为一个整体被执行，包含在其中的对数据库的操作要么全部都执行，要么都不执行。原子性由undo log日志来保证。</p>\n<p>理解：生单和减库存要保证原子性。</p>\n</li>\n<li>\n<p><strong>一致性：</strong> 使用事务的最终目的，由业务代码正确逻辑保证。</p>\n<p>理解：指在事务开始之前和事务结束以后，数据不会被破坏，假如A账户给B账户转10块钱，不管成功与否，A和B的总金额是不变的。</p>\n</li>\n<li>\n<p><strong>隔离性：</strong> 多个事务并发访问时，事务之间是相互隔离的，一个事务不应该被其他事务干扰，多个并发事务之间要相互隔离。。</p>\n<p>隔离性由加锁和MVCC实现的。</p>\n</li>\n<li>\n<p><strong>持久性：</strong> 表示事务完成提交后，该事务对数据库所作的操作更改，将持久地保存在数据库之中。持久性由redo log实现的，比如事务的两阶段提交。</p>\n</li>\n</ul>",r:{minutes:3.63,words:1090},t:"5.1.1 事务及其特性",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.2%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E5%9B%9B%E5%A4%A7%E9%9A%94%E7%A6%BB%E7%BA%A7%E5%88%AB.html",{loader:()=>a.e(2314).then(a.bind(a,3980)),meta:{d:17313696e5,l:"2024年11月12日",c:["MySQL","事务"],g:["读未提交","读已提交","可重复读","串行化"],e:"\n<p>导语：在看这文章的时候，脑海先想到平时代码里是如何用事务的，用的什么注解～</p>\n<p>既然并发事务存在<strong>脏读、不可重复、幻读</strong>等问题，InnoDB实现了哪几种事务的隔离级别应对呢？</p>\n<ul>\n<li>读未提交（Read Uncommitted）</li>\n<li>读已提交（Read Committed）</li>\n<li>可重复读（Repeatable Read）（mysql默认隔离级别）</li>\n<li>串行化（Serializable）</li>\n</ul>\n<h2>一、读未提交（Read Uncommitted）</h2>\n<p>我们去数据库给它设置<strong>读未提交</strong>隔离级别，实践一下吧~</p>",r:{minutes:4.33,words:1298},t:"5.1.2 事务的四大隔离级别",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.3%20MVCC%E5%A4%9A%E7%89%88%E6%9C%AC%E5%B9%B6%E5%8F%91%E6%8E%A7%E5%88%B6.html",{loader:()=>a.e(4845).then(a.bind(a,8699)),meta:{d:1731456e6,l:"2024年11月13日",c:["MySQL","事务"],g:["MVCC"],e:"\n<h2>一、什么是MVCC</h2>\n<p>MVCC解决的不是幻读，而是不可重复读。</p>\n<p><strong>多版本控制</strong>: 指的是一种提高并发的技术。最早的数据库系统，只有读读之间可以并发，读写，写读，写写都要阻塞。引入多版本之后，<strong>只有写写之间相互阻塞</strong>，其他三种操作都可以并行，这样大幅度提高了InnoDB的并发度。</p>\n<p>在内部实现中，InnoDB通过undo log保存每条数据的多个版本，并且能够找回数据历史版本提供给用户读，每个事务读到的数据版本可能是不一样的。在同一个事务中，用户只能看到该事务创建快照之前已经提交的修改和该事务本身做的修改。</p>",r:{minutes:8.59,words:2577},t:"5.1.3 MVCC多版本并发控制",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.4%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html",{loader:()=>a.e(3404).then(a.bind(a,2194)),meta:{d:17315424e5,l:"2024年11月14日",c:["MySQL","事务的两阶段提交"],g:["redo log","bin log"],e:'\n<p>事务四大特性之一的持久性由事务的两阶段提交来保证。事务是数据库中一组原子性的操作，要么全部成功，要么全部失败。</p>\n<p>在 MySQL 中，我们可以使用 <code>begin</code> 或 <code>start transaction</code> 命令开启一个事务，使用 <code>commit</code> 命令提交一个事务，或者使用 <code>rollback</code> 命令回滚一个事务。例如：</p>\n<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> balance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> balance - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> balance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> balance + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">100</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:4.76,words:1427},t:"5.1.4 事务的两阶段提交",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.1%20%E8%A1%8C%E9%94%81%E3%80%81%E8%A1%A8%E9%94%81.html",{loader:()=>a.e(2810).then(a.bind(a,4616)),meta:{d:17315424e5,l:"2024年11月14日",c:["MySQL","事务"],g:["行锁","表锁"],e:"\n<h2>一、介绍</h2>\n<p>首先锁的存在，目的是为了在并发场景下，保持数据的安全、一致。\n并发场景有：</p>\n<ul>\n<li>\n<p>读-读 ：此并发场景不需要进行并发控制，也就是不需要加锁。</p>\n</li>\n<li>\n<p>读-写 ：此并发场景需要并发控制，不然就会出现脏读，幻读，不可重复读的问题。</p>\n</li>\n<li>\n<p>写-写 ：此并发场景需要并发控制，不然就会出现更新丢失的问题。</p>\n<p>进行并发控制，常规手段就是加锁，不管是咋java业务代码中，还是mysql数据库本身，都有实现自己的锁，其中mysql的锁有以下几种：</p>\n</li>\n</ul>",r:{minutes:5.72,words:1717},t:"5.2.1 行锁、表锁",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.2%20%E9%97%B4%E9%9A%99%E9%94%81%E3%80%81%E4%B8%B4%E9%94%AE%E9%94%81.html",{loader:()=>a.e(9472).then(a.bind(a,5183)),meta:{d:17316288e5,l:"2024年11月15日",c:["MySQL","间隙锁","临键锁"],g:["锁升级","事务"],e:"\n<h2>一、介绍</h2>\n<p><strong>什么是间隙锁</strong></p>\n<p><strong>间隙锁</strong>会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 <strong>幻读</strong> 现象；当我们采用范围条件查询数据时，InnoDB 会对这个范围内的数据进行加锁。比如有 id 为：1、3、5、7 的 4 条数据，我们查找 1-7 范围的数据。那么 1-7 都会被加上锁。2、4、6 也在 1-7 的范围中，但是不存在这些数据记录，这些 2、4、6 就被称为间隙。</p>\n<p><strong>间隙锁的危害</strong></p>",r:{minutes:4.96,words:1488},t:"5.2.2 间隙锁、临键锁",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.3%20%E9%94%81%E5%8D%87%E7%BA%A7.html",{loader:()=>a.e(5892).then(a.bind(a,753)),meta:{d:17316288e5,l:"2024年11月15日",c:["MySQL","锁"],g:["间隙锁演示"],e:'\n<p>本文讨论InnoDB引擎在什么情况下，行锁会升级成表锁。</p>\n<h2>一、update行锁升级成表锁场景</h2>\n<p>有表如下，id是索引，name是非索引：</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>id\t\tname</span></span>\n<span class="line"><span>1\t\t\t张三</span></span>\n<span class="line"><span>2\t\t\t李四</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:6.01,words:1803},t:"5.2.3 锁升级",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.4%20%E6%AD%BB%E9%94%81.html",{loader:()=>a.e(9758).then(a.bind(a,9757)),meta:{d:17316288e5,l:"2024年11月15日",c:["MySQL","死锁"],g:["死锁检测","死锁演示"],e:'\n<h2>一、什么是MySQL死锁</h2>\n<p>死锁是指两个或两个以上的进程在执行过程中,因争夺资源而造成的一种互相等待的现象,若无外力作用,它们都将无法推进下去.此时称系统处于死锁状态或系统产生了死锁,这些永远在互相等的进程称为死锁进程。</p>\n<h2>二、MySQL死锁产生的原因</h2>\n<ol>\n<li>竞争同一资源</li>\n</ol>\n<p>当多个事务试图同时修改同一行数据时，就可能发生死锁。例如，事务A锁定了表中的某一行以进行修改，而事务B也试图修改这一行。如果事务B在事务A提交之前请求了锁，并且事务A也试图访问事务B已锁定的资源，就可能发生死锁。</p>\n<ol start="2">\n<li>锁的升级</li>\n</ol>',r:{minutes:5.63,words:1688},t:"5.2.4 死锁",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.1%20%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84.html",{loader:()=>a.e(947).then(a.bind(a,5716)),meta:{d:17315424e5,l:"2024年11月14日",c:["索引"],g:["索引数据结构","B+Tree"],e:"\n<p><strong>索引</strong>是帮助MySQL高效获取数据的排好序的数据结构</p>\n<p>索引数据结构</p>\n<ul>\n<li>二叉树</li>\n<li>红黑树</li>\n<li>Hash表</li>\n<li>B-Tree</li>\n<li>B+Tree</li>\n</ul>\n<p>上面的数据结构有什么缺点？为什么MySQL底层采用B+树呢？</p>\n<h2>一、二叉树</h2>\n<p>如果索引是二叉树数据结构，它有个严重问题，比如Col1自增的数据列存储到二叉树的数据结构中，自增的数据列存储到二叉树中会变成一个链表，那跟全表查找一样了</p>\n<figure><figcaption></figcaption></figure>",r:{minutes:3.75,words:1124},t:"5.3.1 索引数据结构",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.2%20Mylsam%E3%80%81InnoDB%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8E.html",{loader:()=>a.e(9443).then(a.bind(a,6677)),meta:{d:17316288e5,l:"2024年11月15日",c:["MySQL","索引"],g:["Mylsam","InnoDB","回表","聚集索引","非聚集索引"],e:"\n<p><strong>MyISAM不支持事务，MyISAM中的锁是表级锁；而InnoDB支持事务，并且支持行级锁。</strong></p>\n<figure><figcaption></figcaption></figure>\n<h2>一、Mylsam存储引擎</h2>\n<figure><figcaption></figcaption></figure>\n<p><strong>存储引擎是形容数据库的还是表的？</strong>——是形容数据库表的。</p>\n<p>Mylsam存储引擎的表有三个文件</p>\n<ul>\n<li>.frm，frame“框架”简写，存储表结构</li>\n<li>.MYD，Mylsam Data，存储表数据</li>\n<li>.MYI，index，存储索引</li>\n</ul>",r:{minutes:3.39,words:1016},t:"5.3.2 Mylsam、InnoDB存储引擎",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.3%20%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95%E3%80%81%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95.html",{loader:()=>a.e(5340).then(a.bind(a,5093)),meta:{d:17317152e5,l:"2024年11月16日",c:["MySQL","索引"],g:["联合索引","覆盖索引","回表"],e:"\n<h2>前言：回表</h2>\n<h3>1、什么是回表</h3>\n<p>回表（<code>Look Up</code>）指的是在进行索引查询时，首先通过索引定位到对应页，然后再根据行的物理地址找到所需的数据行。换句话说，回表是指根据索引查询到的主键值再去访问<strong>主键索引</strong>，从而获取完整的数据记录。</p>\n<h3>2、什么情况下会回表</h3>\n<ul>\n<li>\n<p><strong>索引不覆盖所有需要查询的字段</strong>：当查询语句中需要返回的列不在索引列上时，即使通过索引定位了相关行，仍然需要回表获取其他列的值。</p>\n</li>\n<li>\n<p><strong>使用了非聚簇索引</strong>：非聚簇索引（Secondary Index）只包含了索引列的副本以及指向对应主键的引用，查询需要通过回表才能获取完整的行数据</p>\n</li>\n<li>\n<p><strong>使用了覆盖索引但超过了最大索引长度</strong>：在MySQL的InnoDB存储引擎中，每个索引项的最大长度是767字节，如果查询需要返回的字段长度超过了该限制，同样会触发回表操作。</p>\n</li>\n</ul>",r:{minutes:2.76,words:829},t:"5.3.3 联合索引、覆盖索引",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.4%20MySQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html",{loader:()=>a.e(2660).then(a.bind(a,5345)),meta:{d:17317152e5,l:"2024年11月16日",c:["MySQL","索引"],g:["explain执行计划","索引优化"],e:"\n<p>MySQL常见瓶颈</p>\n<ul>\n<li>\n<p>CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</p>\n</li>\n<li>\n<p>IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p>\n</li>\n<li>\n<p>服务器硬件的性能瓶颈：top，free，iostat和vmstat来查看系统的性能状态</p>\n</li>\n</ul>\n<h2>一、Explain执行计划</h2>\n<p>使用方式：Explain+SQL语句</p>\n<p><strong>执行计划包含的信息</strong></p>\n<figure><figcaption></figcaption></figure>",r:{minutes:8.41,words:2524},t:"5.3.4 MySQL性能分析",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.5%20%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88.html",{loader:()=>a.e(7935).then(a.bind(a,771)),meta:{d:17318016e5,l:"2024年11月17日",c:["MySQL","索引"],g:["索引失效"],e:'\n<div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">staffs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">`(</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`name`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">24</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> DEFAULT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'姓名\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`age`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> DEFAULT</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'年龄\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`pos`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> VARCHAR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> DEFAULT</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'职位\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`add_time`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> TIMESTAMP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> CURRENT_TIMESTAMP COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'入职时间\'</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'员工记录表\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">INSERT INTO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `staffs`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`name`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`age`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`pos`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'Ringo\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">18</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'manager\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">INSERT INTO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `staffs`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`name`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`age`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`pos`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'张三\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">20</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'dev\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">INSERT INTO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `staffs`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`name`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`age`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`pos`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">VALUES</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'李四\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">21</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'dev\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* 创建索引 */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> idx_staffs_name_age_pos</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> ON</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> `staffs`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`name`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`age`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">`pos`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.79,words:1136},t:"5.3.5 索引失效",i:"pen-to-square",y:"a"}}],["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.6%20count()%E7%9A%84%E7%94%A8%E6%B3%95.html",{loader:()=>a.e(4431).then(a.bind(a,2824)),meta:{d:17318016e5,l:"2024年11月17日",c:["MySQL","索引"],g:["count()用法"],e:"\n<p>先说结论</p>\n<figure><figcaption></figcaption></figure>\n<p>在InnoDB中<code>COUNT(*)</code>和<code>COUNT(1)</code>实现上没有区别，而且效率一样，但是<code>COUNT(字段)</code>需要进行字段的非NULL判断，所以效率会低一些。</p>\n<h2>一、count(*)</h2>\n<p><strong>MyISAM</strong>做了一个简单的优化，把表的总行数单独记录下来，如果执行<code>count(*)</code>时可以直接返回，前提是不能有where条件。MyISAM是表级锁，不会有并发的行操作，所以查到的结果是准确的。</p>",r:{minutes:1.21,words:362},t:"5.3.6 count()的用法",i:"pen-to-square",y:"a"}}],["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.2%20Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/4.2.3%20Java%E5%AE%9E%E7%8E%B0%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9C-%E5%BE%AA%E7%8E%AFCAS.html",{loader:()=>a.e(6097).then(a.bind(a,925)),meta:{d:17311968e5,l:"2024年11月10日",c:["并发编程","CAS"],g:["CAS","Atomic类"],e:'\n<p>Java实现原子操作的方式：</p>\n<ul>\n<li>使用锁机制实现原子操作</li>\n<li>循环CAS实现原子操作</li>\n</ul>\n<p>本文主要记录使用循环CAS的实现方式。</p>\n<h2>一、什么是CAS</h2>\n<p>顾名思义，CAS指的是比较并交换，需要有三个操作数</p>\n<div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>        V\t\t\t\t\t\t\t           A\t\t\t\t\t\t\tB</span></span>\n<span class="line"><span> 变量的内存位置                 旧的预期值      准备设置的新值</span></span>\n<span class="line"><span>（可通过它获取内存中的的值）</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.6,words:1080},t:"4.2.3 Java实现原子操作-循环CAS",i:"pen-to-square",y:"a"}}],["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.3%20ReentrantLock%E9%87%8D%E5%85%A5%E9%94%81.html",{loader:()=>a.e(5250).then(a.bind(a,1458)),meta:{d:17311104e5,l:"2024年11月9日",c:["并发编程","Java中的锁"],g:["ReentrantLock"],e:'\n<p>从这篇文章<a href="https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html" target="_blank" rel="noopener noreferrer">synchronized关键字的理解</a>可以看到synchronized的局限性，除了synchronized关键字外，java.util.concurrent.locks.Lock接口成为Java的另一种全新的互斥同步手段。基于Lock接口，用户能够以非块结构来实现互斥同步。</p>',r:{minutes:7.32,words:2197},t:"4.5.3 ReentrantLock重入锁",i:"pen-to-square",y:"a"}}],["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/4.5.4%20%E8%AF%BB%E5%86%99%E9%94%81.html",{loader:()=>a.e(775).then(a.bind(a,1229)),meta:{d:17319744e5,l:"2024年11月19日",c:["并发编程","Java中的锁"],g:["读写锁"],e:"\n<h2>一、概念</h2>\n<p>先代入两个问题：1、只在写操作加互斥锁不行吗，为什么非要读写锁。2、什么场景会用到读写锁。</p>\n<p>读写锁在同一时刻可以允许多个读线程访问，但是在写线程访问时，所有的读线程和其它写线程均被阻塞。特点是<strong>读读不互斥、读写互斥、写写互斥</strong>。</p>\n<p>读写锁维护了一对锁，一个读锁和一个写锁，通过分离读锁和写锁，使得并发性相比一般的排他锁有了很大提升，它的优点有：</p>\n<ul>\n<li>提高了程序执行性能：多个读锁可以同时执行，相比于普通锁在任何情况下都要排队执行来说，读写锁提高了程序的执行性能</li>\n<li>避免读到临时数据：读锁和写锁是互斥排队执行的，这样可以保证了读取操作不会读到写了一半的临时数据。</li>\n</ul>",r:{minutes:2.64,words:793},t:"4.5.4 读写锁",i:"pen-to-square",y:"a"}}],["/404.html",{loader:()=>a.e(7490).then(a.bind(a,1489)),meta:{t:""}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.1%20JDK8%E6%96%B0%E7%89%B9%E6%80%A7/",{loader:()=>a.e(4712).then(a.bind(a,2646)),meta:{t:"1.1 JDK8新特性"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a.e(380).then(a.bind(a,5039)),meta:{t:"1.2 关键字"}}],["/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.3%20Java%20IO%E6%A8%A1%E5%9E%8B/",{loader:()=>a.e(8861).then(a.bind(a,5202)),meta:{t:"1.3 Java IO模型"}}],["/%E4%BA%8C%E3%80%81JVM/2.7%20%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/",{loader:()=>a.e(326).then(a.bind(a,3005)),meta:{t:"2.7 前端编译与优化"}}],["/%E4%BA%8C%E3%80%81JVM/2.8%20Java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/",{loader:()=>a.e(7599).then(a.bind(a,6731)),meta:{t:"2.8 Java内存模型与线程"}}],["/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/",{loader:()=>a.e(7261).then(a.bind(a,9497)),meta:{t:"2.9 线程安全与锁优化"}}],["/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/",{loader:()=>a.e(4169).then(a.bind(a,1934)),meta:{t:"5.1 事务"}}],["/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/",{loader:()=>a.e(4369).then(a.bind(a,902)),meta:{t:"5.2 锁"}}],["/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/",{loader:()=>a.e(3606).then(a.bind(a,8497)),meta:{t:"5.3 索引"}}],["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.2%20Java%E5%B9%B6%E5%8F%91%E6%9C%BA%E5%88%B6%E7%9A%84%E5%BA%95%E5%B1%82%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/",{loader:()=>a.e(2965).then(a.bind(a,4184)),meta:{t:"4.2 Java并发机制的底层实现原理"}}],["/%E5%9B%9B%E3%80%81%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/4.5%20Java%E4%B8%AD%E7%9A%84%E9%94%81/",{loader:()=>a.e(9052).then(a.bind(a,7398)),meta:{t:"4.5 Java中的锁"}}],["/category/",{loader:()=>a.e(3583).then(a.bind(a,3233)),meta:{t:"分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>a.e(4021).then(a.bind(a,7062)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E6%8C%87%E5%8D%97/",{loader:()=>a.e(8622).then(a.bind(a,4040)),meta:{t:"指南 分类",I:!1}}],["/category/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(1385).then(a.bind(a,2684)),meta:{t:"设计模式 分类",I:!1}}],["/category/redis/",{loader:()=>a.e(7).then(a.bind(a,1902)),meta:{t:"Redis 分类",I:!1}}],["/category/jdk8%E6%96%B0%E7%89%B9%E6%80%A7/",{loader:()=>a.e(7847).then(a.bind(a,5388)),meta:{t:"JDK8新特性 分类",I:!1}}],["/category/jvm/",{loader:()=>a.e(3035).then(a.bind(a,7969)),meta:{t:"JVM 分类",I:!1}}],["/category/%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a.e(1382).then(a.bind(a,8214)),meta:{t:"关键字 分类",I:!1}}],["/category/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/",{loader:()=>a.e(7758).then(a.bind(a,2760)),meta:{t:"并发编程 分类",I:!1}}],["/category/java-io%E6%A8%A1%E5%9E%8B/",{loader:()=>a.e(9359).then(a.bind(a,1564)),meta:{t:"Java IO模型 分类",I:!1}}],["/category/%E5%89%8D%E7%AB%AF%E7%BC%96%E8%AF%91%E4%B8%8E%E4%BC%98%E5%8C%96/",{loader:()=>a.e(8487).then(a.bind(a,265)),meta:{t:"前端编译与优化 分类",I:!1}}],["/category/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E4%B8%8E%E7%BA%BF%E7%A8%8B/",{loader:()=>a.e(3831).then(a.bind(a,7078)),meta:{t:"Java内存模型与线程 分类",I:!1}}],["/category/%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/",{loader:()=>a.e(3429).then(a.bind(a,2192)),meta:{t:"线程安全的实现方法 分类",I:!1}}],["/category/mysql/",{loader:()=>a.e(1006).then(a.bind(a,7667)),meta:{t:"MySQL 分类",I:!1}}],["/category/%E4%BA%8B%E5%8A%A1/",{loader:()=>a.e(5704).then(a.bind(a,4487)),meta:{t:"事务 分类",I:!1}}],["/category/%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4/",{loader:()=>a.e(8205).then(a.bind(a,4199)),meta:{t:"事务的两阶段提交 分类",I:!1}}],["/category/%E9%97%B4%E9%9A%99%E9%94%81/",{loader:()=>a.e(6886).then(a.bind(a,7873)),meta:{t:"间隙锁 分类",I:!1}}],["/category/%E4%B8%B4%E9%94%AE%E9%94%81/",{loader:()=>a.e(5289).then(a.bind(a,173)),meta:{t:"临键锁 分类",I:!1}}],["/category/%E9%94%81/",{loader:()=>a.e(8159).then(a.bind(a,6311)),meta:{t:"锁 分类",I:!1}}],["/category/%E6%AD%BB%E9%94%81/",{loader:()=>a.e(4568).then(a.bind(a,7304)),meta:{t:"死锁 分类",I:!1}}],["/category/%E7%B4%A2%E5%BC%95/",{loader:()=>a.e(2921).then(a.bind(a,8489)),meta:{t:"索引 分类",I:!1}}],["/category/cas/",{loader:()=>a.e(9481).then(a.bind(a,6754)),meta:{t:"CAS 分类",I:!1}}],["/category/java%E4%B8%AD%E7%9A%84%E9%94%81/",{loader:()=>a.e(9624).then(a.bind(a,6359)),meta:{t:"Java中的锁 分类",I:!1}}],["/tag/",{loader:()=>a.e(1797).then(a.bind(a,951)),meta:{t:"标签",I:!1}}],["/tag/%E7%A6%81%E7%94%A8/",{loader:()=>a.e(1331).then(a.bind(a,9753)),meta:{t:"标签: 禁用",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>a.e(8496).then(a.bind(a,5835)),meta:{t:"标签: 加密",I:!1}}],["/tag/%E5%B8%83%E5%B1%80/",{loader:()=>a.e(609).then(a.bind(a,7812)),meta:{t:"标签: 布局",I:!1}}],["/tag/markdown/",{loader:()=>a.e(7931).then(a.bind(a,8216)),meta:{t:"标签: Markdown",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>a.e(602).then(a.bind(a,9462)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>a.e(1431).then(a.bind(a,8210)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(3971).then(a.bind(a,4810)),meta:{t:"标签: 代理模式",I:!1}}],["/tag/%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86/",{loader:()=>a.e(5057).then(a.bind(a,792)),meta:{t:"标签: 静态代理",I:!1}}],["/tag/jdk%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",{loader:()=>a.e(9035).then(a.bind(a,4693)),meta:{t:"标签: JDK动态代理",I:!1}}],["/tag/cglib%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86/",{loader:()=>a.e(8129).then(a.bind(a,384)),meta:{t:"标签: cglib动态代理",I:!1}}],["/tag/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(9434).then(a.bind(a,1211)),meta:{t:"标签: 单例模式",I:!1}}],["/tag/%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(5296).then(a.bind(a,7602)),meta:{t:"标签: 观察者模式",I:!1}}],["/tag/%E7%AD%96%E7%95%A5%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(9923).then(a.bind(a,4846)),meta:{t:"标签: 策略模式",I:!1}}],["/tag/%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(6749).then(a.bind(a,4482)),meta:{t:"标签: 工厂模式",I:!1}}],["/tag/%E6%A8%A1%E7%89%88%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(333).then(a.bind(a,9093)),meta:{t:"标签: 模版方法模式",I:!1}}],["/tag/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(9158).then(a.bind(a,2611)),meta:{t:"标签: 责任链模式",I:!1}}],["/tag/%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/",{loader:()=>a.e(7761).then(a.bind(a,9727)),meta:{t:"标签: 适配器模式",I:!1}}],["/tag/redis%E4%BD%BF%E7%94%A8%E5%9C%BA%E6%99%AF/",{loader:()=>a.e(4837).then(a.bind(a,6292)),meta:{t:"标签: redis使用场景",I:!1}}],["/tag/redis-watch/",{loader:()=>a.e(2315).then(a.bind(a,6508)),meta:{t:"标签: redis watch",I:!1}}],["/tag/redis%E6%8C%81%E4%B9%85%E5%8C%96/",{loader:()=>a.e(7415).then(a.bind(a,571)),meta:{t:"标签: redis持久化",I:!1}}],["/tag/rdb/",{loader:()=>a.e(9678).then(a.bind(a,1385)),meta:{t:"标签: RDB",I:!1}}],["/tag/aof/",{loader:()=>a.e(2068).then(a.bind(a,7499)),meta:{t:"标签: AOF",I:!1}}],["/tag/%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%80%E8%87%B4%E6%80%A7/",{loader:()=>a.e(4787).then(a.bind(a,7032)),meta:{t:"标签: 缓存和数据库一致性",I:!1}}],["/tag/%E5%8F%AA%E8%AF%BB%E5%9C%BA%E6%99%AF/",{loader:()=>a.e(6602).then(a.bind(a,8207)),meta:{t:"标签: 只读场景",I:!1}}],["/tag/%E5%B9%B6%E5%8F%91%E8%AF%BB%E5%86%99%E5%9C%BA%E6%99%AF/",{loader:()=>a.e(4788).then(a.bind(a,5606)),meta:{t:"标签: 并发读写场景",I:!1}}],["/tag/%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F/",{loader:()=>a.e(8931).then(a.bind(a,933)),meta:{t:"标签: 缓存穿透",I:!1}}],["/tag/%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF/",{loader:()=>a.e(8239).then(a.bind(a,2355)),meta:{t:"标签: 缓存击穿",I:!1}}],["/tag/%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9/",{loader:()=>a.e(9692).then(a.bind(a,7368)),meta:{t:"标签: 缓存雪崩",I:!1}}],["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/",{loader:()=>a.e(1253).then(a.bind(a,6988)),meta:{t:"标签: 分布式锁",I:!1}}],["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AF%BB%E5%86%99%E9%94%81/",{loader:()=>a.e(5613).then(a.bind(a,3376)),meta:{t:"标签: 分布式读写锁",I:!1}}],["/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BF%A1%E5%8F%B7%E9%87%8F/",{loader:()=>a.e(9639).then(a.bind(a,9913)),meta:{t:"标签: 分布式信号量",I:!1}}],["/tag/default%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a.e(2243).then(a.bind(a,9248)),meta:{t:"标签: default关键字",I:!1}}],["/tag/static%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a.e(8758).then(a.bind(a,1603)),meta:{t:"标签: static关键字",I:!1}}],["/tag/lambda%E8%A1%A8%E8%BE%BE%E5%BC%8F/",{loader:()=>a.e(9684).then(a.bind(a,4285)),meta:{t:"标签: Lambda表达式",I:!1}}],["/tag/final%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a.e(332).then(a.bind(a,6147)),meta:{t:"标签: final关键字",I:!1}}],["/tag/final%E5%86%85%E5%AD%98%E8%AF%AD%E4%B9%89/",{loader:()=>a.e(5185).then(a.bind(a,9395)),meta:{t:"标签: final内存语义",I:!1}}],["/tag/synchronized%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a.e(6982).then(a.bind(a,5415)),meta:{t:"标签: synchronized关键字",I:!1}}],["/tag/bio/",{loader:()=>a.e(8604).then(a.bind(a,2403)),meta:{t:"标签: BIO",I:!1}}],["/tag/nio/",{loader:()=>a.e(7936).then(a.bind(a,7565)),meta:{t:"标签: NIO",I:!1}}],["/tag/%E5%A4%9A%E8%B7%AF%E5%A4%8D%E7%94%A8/",{loader:()=>a.e(5100).then(a.bind(a,3136)),meta:{t:"标签: 多路复用",I:!1}}],["/tag/%E4%BF%A1%E5%8F%B7%E9%A9%B1%E5%8A%A8/",{loader:()=>a.e(8743).then(a.bind(a,3334)),meta:{t:"标签: 信号驱动",I:!1}}],["/tag/%E5%BC%82%E6%AD%A5io/",{loader:()=>a.e(9935).then(a.bind(a,2667)),meta:{t:"标签: 异步IO",I:!1}}],["/tag/%E6%B3%9B%E5%9E%8B/",{loader:()=>a.e(9124).then(a.bind(a,7600)),meta:{t:"标签: 泛型",I:!1}}],["/tag/%E8%A3%85%E7%AE%B1%E6%8B%86%E7%AE%B1/",{loader:()=>a.e(8229).then(a.bind(a,4875)),meta:{t:"标签: 装箱拆箱",I:!1}}],["/tag/%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4/",{loader:()=>a.e(822).then(a.bind(a,7966)),meta:{t:"标签: 类型擦除",I:!1}}],["/tag/%E8%A3%85%E7%AE%B1%E3%80%81%E6%8B%86%E7%AE%B1/",{loader:()=>a.e(8454).then(a.bind(a,1361)),meta:{t:"标签: 装箱、拆箱",I:!1}}],["/tag/%E8%AF%AD%E6%B3%95%E7%B3%96/",{loader:()=>a.e(2082).then(a.bind(a,1390)),meta:{t:"标签: 语法糖",I:!1}}],["/tag/qps/",{loader:()=>a.e(9708).then(a.bind(a,8900)),meta:{t:"标签: QPS",I:!1}}],["/tag/tps/",{loader:()=>a.e(2983).then(a.bind(a,843)),meta:{t:"标签: TPS",I:!1}}],["/tag/pv/",{loader:()=>a.e(656).then(a.bind(a,3464)),meta:{t:"标签: PV",I:!1}}],["/tag/uv/",{loader:()=>a.e(8817).then(a.bind(a,9232)),meta:{t:"标签: UV",I:!1}}],["/tag/rt/",{loader:()=>a.e(4356).then(a.bind(a,7339)),meta:{t:"标签: RT",I:!1}}],["/tag/%E6%9C%80%E4%BD%B3%E7%BA%BF%E7%A8%8B%E6%95%B0/",{loader:()=>a.e(8515).then(a.bind(a,7178)),meta:{t:"标签: 最佳线程数",I:!1}}],["/tag/%E4%B8%BB%E5%86%85%E5%AD%98%E4%B8%8E%E5%B7%A5%E4%BD%9C%E5%86%85%E5%AD%98/",{loader:()=>a.e(4976).then(a.bind(a,8729)),meta:{t:"标签: 主内存与工作内存",I:!1}}],["/tag/volatile%E5%85%B3%E9%94%AE%E5%AD%97/",{loader:()=>a.e(9856).then(a.bind(a,9472)),meta:{t:"标签: volatile关键字",I:!1}}],["/tag/java%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B%E7%89%B9%E5%BE%81/",{loader:()=>a.e(2725).then(a.bind(a,9258)),meta:{t:"标签: Java内存模型特征",I:!1}}],["/tag/happens-before/",{loader:()=>a.e(4897).then(a.bind(a,8093)),meta:{t:"标签: happens-before",I:!1}}],["/tag/%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/",{loader:()=>a.e(3827).then(a.bind(a,1209)),meta:{t:"标签: 内核线程实现",I:!1}}],["/tag/%E7%94%A8%E6%88%B7%E7%BA%BF%E7%A8%8B%E5%AE%9E%E7%8E%B0/",{loader:()=>a.e(5307).then(a.bind(a,821)),meta:{t:"标签: 用户线程实现",I:!1}}],["/tag/%E6%B7%B7%E5%90%88%E5%AE%9E%E7%8E%B0/",{loader:()=>a.e(4355).then(a.bind(a,7117)),meta:{t:"标签: 混合实现",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B%E8%B0%83%E5%BA%A6/",{loader:()=>a.e(8293).then(a.bind(a,3092)),meta:{t:"标签: 线程调度",I:!1}}],["/tag/%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2/",{loader:()=>a.e(5565).then(a.bind(a,9219)),meta:{t:"标签: 状态转换",I:!1}}],["/tag/%E7%BA%BF%E7%A8%8B%E7%BC%BA%E9%99%B7/",{loader:()=>a.e(1743).then(a.bind(a,2960)),meta:{t:"标签: 线程缺陷",I:!1}}],["/tag/%E5%8D%8F%E7%A8%8B/",{loader:()=>a.e(4704).then(a.bind(a,5594)),meta:{t:"标签: 协程",I:!1}}],["/tag/%E4%BA%92%E6%96%A5%E5%90%8C%E6%AD%A5/",{loader:()=>a.e(1276).then(a.bind(a,2942)),meta:{t:"标签: 互斥同步",I:!1}}],["/tag/%E9%9D%9E%E9%98%BB%E5%A1%9E%E5%90%8C%E6%AD%A5/",{loader:()=>a.e(582).then(a.bind(a,654)),meta:{t:"标签: 非阻塞同步",I:!1}}],["/tag/%E6%97%A0%E5%90%8C%E6%AD%A5%E6%96%B9%E6%A1%88/",{loader:()=>a.e(2080).then(a.bind(a,1091)),meta:{t:"标签: 无同步方案",I:!1}}],["/tag/%E9%94%81%E4%BC%98%E5%8C%96/",{loader:()=>a.e(2951).then(a.bind(a,6591)),meta:{t:"标签: 锁优化",I:!1}}],["/tag/%E9%94%81%E6%B6%88%E9%99%A4/",{loader:()=>a.e(5237).then(a.bind(a,180)),meta:{t:"标签: 锁消除",I:!1}}],["/tag/%E9%94%81%E8%86%A8%E8%83%80/",{loader:()=>a.e(3249).then(a.bind(a,6586)),meta:{t:"标签: 锁膨胀",I:!1}}],["/tag/%E8%BD%BB%E9%87%8F%E7%BA%A7%E9%94%81/",{loader:()=>a.e(7400).then(a.bind(a,5204)),meta:{t:"标签: 轻量级锁",I:!1}}],["/tag/%E5%81%8F%E5%90%91%E9%94%81/",{loader:()=>a.e(5445).then(a.bind(a,1913)),meta:{t:"标签: 偏向锁",I:!1}}],["/tag/%E8%84%8F%E8%AF%BB/",{loader:()=>a.e(2592).then(a.bind(a,5768)),meta:{t:"标签: 脏读",I:!1}}],["/tag/%E4%B8%8D%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/",{loader:()=>a.e(8309).then(a.bind(a,8315)),meta:{t:"标签: 不可重复读",I:!1}}],["/tag/%E5%B9%BB%E8%AF%BB/",{loader:()=>a.e(3636).then(a.bind(a,5958)),meta:{t:"标签: 幻读",I:!1}}],["/tag/%E8%AF%BB%E6%9C%AA%E6%8F%90%E4%BA%A4/",{loader:()=>a.e(3423).then(a.bind(a,7261)),meta:{t:"标签: 读未提交",I:!1}}],["/tag/%E8%AF%BB%E5%B7%B2%E6%8F%90%E4%BA%A4/",{loader:()=>a.e(439).then(a.bind(a,2962)),meta:{t:"标签: 读已提交",I:!1}}],["/tag/%E5%8F%AF%E9%87%8D%E5%A4%8D%E8%AF%BB/",{loader:()=>a.e(5406).then(a.bind(a,6935)),meta:{t:"标签: 可重复读",I:!1}}],["/tag/%E4%B8%B2%E8%A1%8C%E5%8C%96/",{loader:()=>a.e(7794).then(a.bind(a,3868)),meta:{t:"标签: 串行化",I:!1}}],["/tag/mvcc/",{loader:()=>a.e(2331).then(a.bind(a,7646)),meta:{t:"标签: MVCC",I:!1}}],["/tag/redo-log/",{loader:()=>a.e(4477).then(a.bind(a,5124)),meta:{t:"标签: redo log",I:!1}}],["/tag/bin-log/",{loader:()=>a.e(8660).then(a.bind(a,7088)),meta:{t:"标签: bin log",I:!1}}],["/tag/%E8%A1%8C%E9%94%81/",{loader:()=>a.e(5757).then(a.bind(a,3167)),meta:{t:"标签: 行锁",I:!1}}],["/tag/%E8%A1%A8%E9%94%81/",{loader:()=>a.e(4465).then(a.bind(a,4568)),meta:{t:"标签: 表锁",I:!1}}],["/tag/%E9%94%81%E5%8D%87%E7%BA%A7/",{loader:()=>a.e(4859).then(a.bind(a,5305)),meta:{t:"标签: 锁升级",I:!1}}],["/tag/%E4%BA%8B%E5%8A%A1/",{loader:()=>a.e(5426).then(a.bind(a,3347)),meta:{t:"标签: 事务",I:!1}}],["/tag/%E9%97%B4%E9%9A%99%E9%94%81%E6%BC%94%E7%A4%BA/",{loader:()=>a.e(4042).then(a.bind(a,7202)),meta:{t:"标签: 间隙锁演示",I:!1}}],["/tag/%E6%AD%BB%E9%94%81%E6%A3%80%E6%B5%8B/",{loader:()=>a.e(2531).then(a.bind(a,9697)),meta:{t:"标签: 死锁检测",I:!1}}],["/tag/%E6%AD%BB%E9%94%81%E6%BC%94%E7%A4%BA/",{loader:()=>a.e(8672).then(a.bind(a,5844)),meta:{t:"标签: 死锁演示",I:!1}}],["/tag/%E7%B4%A2%E5%BC%95%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{loader:()=>a.e(5290).then(a.bind(a,7653)),meta:{t:"标签: 索引数据结构",I:!1}}],["/tag/b_tree/",{loader:()=>a.e(5373).then(a.bind(a,2924)),meta:{t:"标签: B+Tree",I:!1}}],["/tag/mylsam/",{loader:()=>a.e(443).then(a.bind(a,2885)),meta:{t:"标签: Mylsam",I:!1}}],["/tag/innodb/",{loader:()=>a.e(9772).then(a.bind(a,3988)),meta:{t:"标签: InnoDB",I:!1}}],["/tag/%E5%9B%9E%E8%A1%A8/",{loader:()=>a.e(6052).then(a.bind(a,1812)),meta:{t:"标签: 回表",I:!1}}],["/tag/%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/",{loader:()=>a.e(9619).then(a.bind(a,1984)),meta:{t:"标签: 聚集索引",I:!1}}],["/tag/%E9%9D%9E%E8%81%9A%E9%9B%86%E7%B4%A2%E5%BC%95/",{loader:()=>a.e(6357).then(a.bind(a,9916)),meta:{t:"标签: 非聚集索引",I:!1}}],["/tag/%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95/",{loader:()=>a.e(6671).then(a.bind(a,2850)),meta:{t:"标签: 联合索引",I:!1}}],["/tag/%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/",{loader:()=>a.e(4535).then(a.bind(a,1016)),meta:{t:"标签: 覆盖索引",I:!1}}],["/tag/explain%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92/",{loader:()=>a.e(5821).then(a.bind(a,7041)),meta:{t:"标签: explain执行计划",I:!1}}],["/tag/%E7%B4%A2%E5%BC%95%E4%BC%98%E5%8C%96/",{loader:()=>a.e(1989).then(a.bind(a,9183)),meta:{t:"标签: 索引优化",I:!1}}],["/tag/%E7%B4%A2%E5%BC%95%E5%A4%B1%E6%95%88/",{loader:()=>a.e(3946).then(a.bind(a,6503)),meta:{t:"标签: 索引失效",I:!1}}],["/tag/count()%E7%94%A8%E6%B3%95/",{loader:()=>a.e(9849).then(a.bind(a,2654)),meta:{t:"标签: count()用法",I:!1}}],["/tag/cas/",{loader:()=>a.e(6171).then(a.bind(a,183)),meta:{t:"标签: CAS",I:!1}}],["/tag/atomic%E7%B1%BB/",{loader:()=>a.e(5820).then(a.bind(a,9345)),meta:{t:"标签: Atomic类",I:!1}}],["/tag/reentrantlock/",{loader:()=>a.e(1552).then(a.bind(a,4781)),meta:{t:"标签: ReentrantLock",I:!1}}],["/tag/%E8%AF%BB%E5%86%99%E9%94%81/",{loader:()=>a.e(5625).then(a.bind(a,2998)),meta:{t:"标签: 读写锁",I:!1}}],["/article/",{loader:()=>a.e(7511).then(a.bind(a,2772)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>a.e(7199).then(a.bind(a,353)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>a.e(5464).then(a.bind(a,4695)),meta:{t:"时间轴",I:!1}}]])},8761:(i,s,a)=>{a.d(s,{U:()=>e});const e=JSON.parse('{"base":"/myBlog/","lang":"zh-CN","title":"Java笔记","description":"vuepress-theme-hope 的博客演示","head":[],"locales":{}}')},6653:(i,s,a)=>{a.d(s,{K:()=>e});const e=JSON.parse('{"encrypt":{"config":{"/demo/encrypt.html":["$2a$10$9m5zQnLOn8YsWnI2NrriyuG0I2iUI4HplcGMybg/BZBm/Aq/ox92u"]}},"author":{"name":"冉庆","url":"https://mister-hope.com"},"logo":"/mylogo.jpg","repo":"vuepress-theme-hope/vuepress-theme-hope","docsDir":"src","footer":"默认页脚","displayFooter":true,"blog":{"description":"一个后端开发者","intro":"/intro.html","medias":{"Baidu":"https://example.com","BiliBili":"https://example.com","Bitbucket":"https://example.com","Dingding":"https://example.com","Discord":"https://example.com","Dribbble":"https://example.com","Email":"mailto:info@example.com","Evernote":"https://example.com","Facebook":"https://example.com","Flipboard":"https://example.com","Gitee":"https://example.com","GitHub":"https://example.com","Gitlab":"https://example.com","Gmail":"mailto:info@example.com","Instagram":"https://example.com","Lark":"https://example.com","Lines":"https://example.com","Linkedin":"https://example.com","Pinterest":"https://example.com","Pocket":"https://example.com","QQ":"https://example.com","Qzone":"https://example.com","Reddit":"https://example.com","Rss":"https://example.com","Steam":"https://example.com","Twitter":"https://example.com","Wechat":"https://example.com","Weibo":"https://example.com","Whatsapp":"https://example.com","Youtube":"https://example.com","Zhihu":"https://example.com","VuePressThemeHope":{"icon":"https://theme-hope-assets.vuejs.press/logo.svg","link":"https://theme-hope.vuejs.press"}}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":["/",{"text":"V2 文档","icon":"book","link":"https://theme-hope.vuejs.press/zh/"}],"sidebar":"structure"}}}')},4923:(i,s,a)=>{},8123:(i,s,a)=>{a.d(s,{v:()=>e});const e={"/":[{text:"一、Java基础",prefix:"一、Java基础/",collapsible:!0,children:[{text:"1.1 JDK8新特性",prefix:"1.1 JDK8新特性/",collapsible:!0,children:["1.1.1 接口的静态方法和默认方法","1.1.2 Lambda表达式"]},{text:"1.2 关键字",prefix:"1.2 关键字/",collapsible:!0,children:["1.2.1 final关键字对理解","1.2.2 synchronized关键字"]},{text:"1.3 Java IO模型",prefix:"1.3 Java IO模型/",collapsible:!0,children:["1.3.1 BIO、NIO"]}]},{text:"二、JVM",prefix:"二、JVM/",collapsible:!0,children:[{text:"2.7 前端编译与优化",prefix:"2.7 前端编译与优化/",collapsible:!0,children:["2.7.1 语法糖","2.7.2 泛型","2.7.3 自动装箱、拆箱"]},{text:"2.8 Java内存模型与线程",prefix:"2.8 Java内存模型与线程/",collapsible:!0,children:["2.8.1 衡量服务器性能","2.8.2 Java内存模型","2.8.3 Java与线程","2.8.4 Java与协程"]},{text:"2.9 线程安全与锁优化",prefix:"2.9 线程安全与锁优化/",collapsible:!0,children:["2.9.1 Java语言中的线程安全","2.9.2 线程安全的实现方法","2.9.3 锁优化"]}]},{text:"三、设计模式",prefix:"三、设计模式/",collapsible:!0,children:["3.1 代理模式","3.2 单例模式","3.3 观察者模式","3.4 策略模式","3.5 工厂模式","3.6 模板方法模式","3.7 责任链模式","3.8 适配器模式"]},{text:"四、并发编程",prefix:"四、并发编程/",collapsible:!0,children:[{text:"4.2 Java并发机制的底层实现原理",prefix:"4.2 Java并发机制的底层实现原理/",collapsible:!0,children:["4.2.3 Java实现原子操作-循环CAS"]},{text:"4.5 Java中的锁",prefix:"4.5 Java中的锁/",collapsible:!0,children:["4.5.3 ReentrantLock重入锁","4.5.4 读写锁"]}]},{text:"五、MySQL",prefix:"五、MySQL/",collapsible:!0,children:[{text:"5.1 事务",prefix:"5.1 事务/",collapsible:!0,children:["5.1.1 事务及其特性","5.1.2 事务的四大隔离级别","5.1.3 MVCC多版本并发控制","5.1.4 事务的两阶段提交"]},{text:"5.2 锁",prefix:"5.2 锁/",collapsible:!0,children:["5.2.1 行锁、表锁","5.2.2 间隙锁、临键锁","5.2.3 锁升级","5.2.4 死锁"]},{text:"5.3 索引",prefix:"5.3 索引/",collapsible:!0,children:["5.3.1 索引数据结构","5.3.2 Mylsam、InnoDB存储引擎","5.3.3 联合索引、覆盖索引","5.3.4 MySQL性能分析","5.3.5 索引失效","5.3.6 count()的用法"]}]},{text:"六、Redis",prefix:"六、Redis/",collapsible:!0,children:["6.1 一文了解Redis","6.2 Redis持久化原理","6.3 保证缓存和数据库的一致性","6.4 缓存穿透、缓存击穿、缓存雪崩","6.5 Redisson分布式锁"]},{text:"七、Kafka",prefix:"七、Kafka/",collapsible:!0,children:[]},{text:"八、主要功能与配置演示",prefix:"demo/",collapsible:!0,children:["page","disable","encrypt","layout","markdown"]},"intro",""]}},2878:(i,s,a)=>{a.d(s,{P:()=>e});const e={Baidu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon baidu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2319DC"/><path fill="#FFF" d="M320 528c65-14 56-92 54-109-3-26-34-72-76-68-52 4-60 81-60 81-7 35 17 110 82 96m121-131c36 0 65-41 65-92 0-52-29-93-65-93s-65 41-65 93c0 51 29 92 65 92m155 7c48 6 79-46 86-85 6-38-25-84-59-91-35-8-77 46-81 82-5 44 6 87 54 94m191 65c0-19-15-75-73-75-57 0-65 53-65 91 0 35 3 85 75 84 71-2 63-81 63-100m-73 163s-74-57-118-119c-59-92-142-55-170-8s-72 76-78 84-90 53-71 135c18 83 83 81 83 81s49 5 104-7c56-13 104 3 104 3s131 43 166-41c36-84-20-128-20-128"/><path fill="#2319DC" d="M453 552v56h-45s-46 3-61 54c-6 35 4 55 6 59s17 29 53 37h85V553zm-1 172h-34s-24-1-31-29c-4-12 0-26 2-31 2-6 10-19 26-23h37zm60-111v107s2 27 39 37h98V613h-42v108h-40s-13-2-16-12v-97z"/></svg>',BiliBili:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bilibili-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1296db"/><path fill="#fff" d="M745.363 177.725a47 47 0 0 1 0 66.3L702.5 286.85h44A141 141 0 0 1 887 427.512v281.25a141 141 0 0 1-141 140.626H277.25A141 141 0 0 1 137 708.763v-281.25a141 141 0 0 1 141-141h43.725l-42.788-42.825a47 47 0 1 1 66.263-66.3l99.45 99.45c2.963 2.962 5.438 6.187 7.425 9.637h120.487c1.988-3.45 4.5-6.75 7.463-9.675l99.413-99.45a47 47 0 0 1 66.3 0zm1.012 203.25h-468.75a47 47 0 0 0-46.763 43.388l-.112 3.525v281.25c0 24.712 19.125 44.962 43.387 46.724l3.488.15h468.75a47 47 0 0 0 46.763-43.387l.112-3.487v-281.25c0-26-21-47-47-46.876zm-375 93.75c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47zm281.25 0c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47z"/></svg>',Bitbucket:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bitbucket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#205081"/><path fill="#fff" d="M512 191.32v.01-.01c-152.76 0-277.805 41.114-277.805 92.166 0 13.443 33.353 206.247 46.577 282.708 5.932 34.285 94.508 84.563 231.126 84.563l.102-.407v.407c137.484 0 225.26-50.278 231.192-84.578 13.23-76.457 46.592-269 46.592-282.698.005-51.047-125-92.165-277.784-92.165zm0 397.493c-48.771 0-88.31-39.545-88.31-88.31 0-48.772 39.539-88.306 88.31-88.306s88.31 39.534 88.31 88.31c0 48.766-39.539 88.306-88.31 88.306zm-.05-276.842c-98.256-.153-177.885-17.232-177.855-38.14.036-20.912 79.72-37.731 177.976-37.568 98.256.153 177.884 17.22 177.849 38.139 0 20.908-79.705 37.716-177.966 37.564z"/><path fill="#fff" d="M711.668 642.814c-4.227 0-7.608 2.994-7.608 2.994S635.65 699.987 512 699.987s-192.06-54.18-192.06-54.18-3.386-2.988-7.608-2.988c-5.04 0-9.827 3.391-9.827 10.871 0 .79.076 1.579.224 2.353 10.617 56.826 18.382 97.206 19.736 103.347 9.268 41.805 91.045 73.411 189.525 73.411 98.49 0 180.267-31.606 189.535-73.411 1.364-6.136 9.114-46.49 19.736-103.317.143-.779.224-1.578.224-2.368 0-7.485-4.786-10.881-9.827-10.881zM467.659 500.477a44 44 0 1 0 88.51 0 44 44 0 1 0-88.51 0z"/></svg>',Dingding:'<svg xmlns="http://www.w3.org/2000/svg" class="icon dingding-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1C9DF7"/><path fill="#fff" d="M760.551 442c0 5-5 13-7.767 20.713-23.302 49.192-82.85 145-82.85 145l-18.124 31.069h85.44L576.727 853.758l36.247-145h-67.316l23.302-95.796c-18.124 5-41.426 10-67.316 18.124 0 0-36.247 20.712-101-38.837 0 0-44.015-38.836-18.124-49.192 10-5 54.37-10 88.029-13 44.014-5.179 72.494-10 72.494-10s-139.81 2.59-173.468-2.589c-33.658-5-75.083-59.549-82.85-108.741 0 0-12.946-25.89 28.48-13 44.013 13 222.66 49.192 222.66 49.192s-235.606-72.494-251.14-90.618c-15.535-18.123-46.604-95.796-41.426-145 0 0 2.59-13 13-7.767 0 0 173.469 80.261 292.566 121.686 119 41.426 222.66 64.727 209.715 119z"/></svg>',Discord:'<svg xmlns="http://www.w3.org/2000/svg" class="icon discord-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2DAAE1"/><path fill="#fff" d="m422.935 240.147 5.851 8.052c-113.039 34.253-165.649 84.585-165.649 84.585s13.645-8.052 37.024-18.123c66.28-30.215 118.865-38.267 142.244-40.286 3.91 0 7.819-1.994 9.76-1.994 38.966-6.058 81.816-6.058 126.658-2.02 58.462 8.053 122.749 24.157 187.061 62.423 0 0-48.7-48.338-155.862-82.566l7.767-10.071h1.968c13.308.233 91.757 4.246 173.416 68.481 0 0 89.634 169.144 89.634 376.555 1.942-2.02-50.668 92.637-189.003 96.65 0 0-23.405-28.194-40.933-52.35 81.84-24.157 113.013-76.534 113.013-76.534a313.796 313.796 0 0 1-72.106 38.267c-31.172 14.11-60.403 22.162-89.633 28.22-60.404 12.066-114.955 8.027-161.74 0a636.81 636.81 0 0 1-91.576-28.22c-13.644-6.033-29.23-12.065-44.817-22.137-1.941-2.02-3.883-2.02-5.85-4.039-1.943 0-1.943-2.02-1.943-2.02-11.702-6.032-17.528-10.07-17.528-10.07s29.23 52.376 109.104 76.532c-19.47 24.157-40.907 54.371-40.907 54.371-138.36-4.039-190.97-98.67-190.97-98.67 0-207.41 89.633-376.555 89.633-376.555 89.634-70.5 175.384-68.481 175.384-68.481zm213.961 233.017c-35.315 0-65 34.512-65 78s29.412 78 65 78 65-34.512 65-78-29.412-78-65-78zm-233.016 0c-35.315 0-65 34.512-65 78s29.412 78 65 78 64.726-34.512 64.726-78-29.411-78-64.726-78z"/></svg>',Dribbble:'<svg xmlns="http://www.w3.org/2000/svg" class="icon dribbble-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DC4373"/><path fill="#C13366" d="M716.668 302.752c-13.332 5.154-28.61 3.676-35.726-1.068-86.196-48.27-179.286-62.06-265.482-37.926C292.074 300.212 241.674 437.028 242 564.746c22.622 42.136 52.558 105.234 61.854 153.104l298.24 298.246c210.532-37.376 376.584-203.408 413.986-413.928L716.668 302.752z"/><path fill="#F0F1F1" d="M511.994 219.308c-161.592 0-293.058 131.31-293.058 292.696s131.466 292.684 293.058 292.684c161.598 0 293.07-131.292 293.07-292.684 0-161.386-131.472-292.696-293.07-292.696zm192.842 138.148c33.43 41.432 53.744 93.756 54.682 150.772-11.122-2.282-58.23-11.068-114.526-11.068-18.164 0-37.282.91-56.448 3.278a822.854 822.854 0 0 0-4.938-11.812c-4.972-11.692-10.326-23.29-15.874-34.72 86.642-35.696 128.436-85.238 137.104-96.45zm-192.842-92.33c62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-38.67-70.688-80.996-129.22-91.07-142.812a247.13 247.13 0 0 1 55.82-6.368zm-106.352 23.99c8.536 11.758 50.928 70.918 90.592 141.036-106.448 27.982-200.976 29.806-223.79 29.806h-2.424c16.39-75.534 67.424-138.298 135.622-170.842zM264.402 512.39c0-2.038.034-4.076.1-6.102 1.48.018 3.666.018 6.5.018 30.726 0 137.382-2.538 247.288-35.154a828.402 828.402 0 0 1 18.928 39.526 232.24 232.24 0 0 0-8.234 2.482C405.236 553.126 337.216 658.936 326.75 676.232c-38.778-43.696-62.348-101.058-62.348-163.842zm247.592 247.246c-56.786 0-109.192-19.232-151.01-51.48 7.074-13.868 58.412-106.3 194.026-153.5a1.806 1.806 0 0 1 .272-.09c34.006 88.53 48.408 162.834 52.358 185.862-29.432 12.374-61.752 19.208-95.646 19.208zm140.236-43.584c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/><path fill="#D1D1D1" d="M511.994 219.308c-.382 0-.758.028-1.142.028v45.804c.38 0 .758-.018 1.142-.018 62.446 0 119.528 23.2 163.126 61.412-6.902 9.416-44.332 56.202-127.876 87.768-12.14-22.194-24.642-43.188-36.392-61.968V473.29c2.476-.706 4.954-1.41 7.434-2.144a828.402 828.402 0 0 1 18.928 39.526c-2.776.796-5.514 1.592-8.234 2.478a323.314 323.314 0 0 0-18.128 6.52v53.228a418.976 418.976 0 0 1 44.428-18.332c34.006 88.53 48.408 162.834 52.358 185.862-29.428 12.374-61.746 19.208-95.646 19.208-.382 0-.758-.024-1.142-.024v45.05c.382 0 .758.028 1.142.028 161.598 0 293.07-131.292 293.07-292.684.002-161.388-131.47-292.698-293.068-292.698zm71.614 269.316c-4.972-11.692-10.326-23.29-15.874-34.72 86.64-35.696 128.434-85.236 137.102-96.45 33.43 41.432 53.748 93.756 54.682 150.77-11.122-2.282-58.23-11.068-114.522-11.068-18.164 0-37.282.914-56.448 3.278-1.624-3.932-3.24-7.852-4.94-11.81zm68.622 227.428c-3.32-19.052-16.66-88.688-47.452-173.618 17.27-2.686 34.072-3.748 49.828-3.748 51.748 0 92.23 11.33 101.634 14.204-11.182 67.444-49.794 125.808-104.01 163.162z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',Evernote:'<svg xmlns="http://www.w3.org/2000/svg" class="icon evernote-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#14cc45"/><path fill="#595757" d="M347.671 193.259v87.51h-87.51z"/><path fill="#595757" d="M788.047 323.645s3.65-77.491-73.84-103.02c0 0-89.479-12.867-151.41-11.91 0 0-8.595-53.23-103.33-53.23 0 0-89.556-1.244-89.892 70.526v61.671s2.848 14.991-27.833 14.991h-81.581s-34.28 5.282-34.28 72.934c0 0 3.133 120.082 41.322 200.24 0 0 9.398 34.667 58.228 46.577 0 0 95.822 25.477 123.991 21.722 0 0 58.228 22.137 62.008-111.874 0 0 3.755-19.935 6.266 11.392 0 0-1.89 68.948 57.607 72.702 0 0 45.723 12.557 73.892 10.045 0 0 37.568 2.15 37.568 64.158 0 0 13.152 71.665-34.435 71.665h-65.763s-18.149 4.428-18.149-21.877c0 0-4.997-21.878 26.305-21.878h15.534v-43.756h-43.082s-66.332-6.317-66.332 50.047v75.135s9.347 49.866 66.332 49.866h121.273s48.441.44 76.61-90.359c0-.078 48.52-182.323 22.991-435.767zM625.272 486.523c0-21.877 18.02-51.16 39.432-51.16s36.48 36.118 36.48 58.022c-28.79-7.897-45.827-9.606-75.912-6.862z"/></svg>',Facebook:'<svg xmlns="http://www.w3.org/2000/svg" class="icon facebook-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#3c599b"/><path fill="#fff" d="M353.357 400.378h68.151v-66.235c0-29.206.737-74.247 21.952-102.142 22.348-29.542 53.026-49.622 105.794-49.622 85.976 0 122.18 12.263 122.18 12.263L654.4 295.61s-28.407-8.213-54.903-8.213c-26.512 0-50.243 9.5-50.243 35.995v76.988h108.687L650.352 499H549.254v342.602H421.508V499h-68.15v-98.622z"/></svg>',Flipboard:'<svg xmlns="http://www.w3.org/2000/svg" class="icon flipboard-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#e12828"/><path fill="#fff" d="M263.487 261.893H445.92V809.17H263.487V261.893z"/><path fill="#fce9e9" d="M445.92 261.893h364.842v182.435H445.92V261.893z"/><path fill="#f6bebe" d="M445.92 444.328h182.435v182.435H445.92V444.328z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>',Gitlab:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitlab-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#E8F0FF"/><path fill="#E24329" d="m512 808 110-340H402z"/><path fill="#FC6D26" d="M512 808 402 468H247z"/><path fill="#E24329" d="M247 468h155l-67-204c-4-11-19-11-22 0z"/><path fill="#FC6D26" d="m512 808 110-340h156z"/><path fill="#FCA326" d="m778 468 33 104c3 10-1 19-9 25L512 808z"/><path fill="#E24329" d="M778 468H622l68-204c3-11 18-11 21 0z"/><path fill="#FCA326" d="M512 808 222 597c-8-5-12-16-9-25l34-104z"/></svg>',Gmail:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gmail-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DB4437"/><path fill="#E67C73" d="M277.48 285.567h465.767v441.362H277.48V285.567z"/><path fill="#FFF" d="M282.543 285.567h-10.645c-25.962 0-47.122 21.808-47.122 48.705v343.952c0 26.897 21.08 48.705 47.122 48.705h24.976V407.954l213.49 169.95 213.489-169.95V726.93h24.975c26.04 0 47.123-21.809 47.123-48.705V334.272c0-26.897-21.134-48.705-47.123-48.705h-10.644L510.364 480.44 282.542 285.567z"/></svg>',Instagram:'<svg xmlns="http://www.w3.org/2000/svg" class="icon instagram-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#181818"/><path fill="#fff" d="M512 348.16c-88.222 0-163.84 71.417-163.84 163.84 0 88.222 71.417 163.84 163.84 163.84 88.222 0 163.84-71.417 163.84-163.84 0-88.222-75.618-163.84-163.84-163.84zm0 268.866c-58.814 0-105.026-46.212-105.026-105.026S453.186 406.974 512 406.974 617 453.186 617 512s-46.186 105-105 105zM680.041 306.15c-21 0-37.81 16.804-37.81 37.809s16.805 37.81 37.81 37.81 37.81-16.805 37.81-37.81-16.805-37.81-37.81-37.81z"/><path fill="#FFF" d="M659.036 196.923h-16.804c-50.413-4.2-210.051-4.2-260.464 0-96.623-4.2-180.644 71.418-184.845 168.041v16.804c-4.2 50.413-4.2 210.051 0 260.464-4.2 96.623 71.418 180.644 168.041 184.845h16.804c50.413 4.2 210.051 4.2 260.464 0 96.623 4.2 180.644-71.418 184.845-168.041V381.768c4.2-96.623-71.418-180.644-168.041-184.845zM759.86 696.845c-12.604 29.407-33.609 50.412-58.815 58.814-121.83 16.805-247.86 16.805-373.891 0-29.407-12.603-50.412-33.608-58.814-58.814-12.604-63.015-16.805-126-12.604-184.845-4.2-63.015 0-126 12.604-184.845 12.603-29.407 33.608-50.412 58.814-58.814 121.83-16.805 247.86-16.805 373.891 0 29.407 12.603 50.412 33.608 58.815 58.814 12.603 63.015 16.804 126 12.603 184.845 4.2 63.015 0 126-12.603 184.845z"/></svg>',Lark:'<svg xmlns="http://www.w3.org/2000/svg" class="icon lark-icon" viewBox="0 0 700 700"><path fill="#fdfdfd" d="M0 350C0 156.7 156.7 0 350 0s350 156.7 350 350-156.7 350-350 350S0 543.3 0 350Z"/><path fill="#326ffd" d="M94.683 255.472c-1.188.99-3.547 1.424-3.565 2.971-.892 77.877-1.647 155.803.853 233.645.135 4.185 3.811 7.709 6.987 10.437 8.041 6.906 16.845 13.026 26.179 18.048 15.915 8.564 32.118 16.959 49.299 22.567 22.582 7.37 45.902 12.712 69.402 16.176 16.45 2.425 33.243 1.892 49.863 1.404 85.699-2.518 170.495-42.242 226.974-107.047 13.128-15.062 24.349-31.701 35.801-48.072.482-.689-.29-1.655-.435-2.483-11.645 12.501-23.322 25.66-38.015 34.376-38.027 22.561-80.103 18.178-120.414 4.963-24.658-8.083-49.594-15.711-73.208-26.468-32.043-14.597-63.264-31.14-93.363-49.411-50.119-30.424-92.859-71.794-136.358-111.106Z"/><path fill="#00d5b8" d="M373.34 355.289c22.389-21.264 43.857-43.542 67.167-63.793 15.84-13.761 40.614-23.584 58.792-32.162-13.932-44.24-30.142-84.389-60.513-120.46-3.54-4.204-7.91-9.366-13.399-9.603-81.245-3.519-162.641-2.296-243.958-1.541-1.72.016-3.262 2.127-3.451 3.836-.209 1.893 1.026 3.902 2.457 5.159 21.134 18.566 43.735 35.416 64.865 53.985 52.859 46.45 91.839 105.023 128.04 164.579Z"/><path fill="#133c99" d="M302.636 406.089c63.531 28.909 161.471 77.441 225.923 24.345 10.473-8.628 22.415-16.393 29.694-27.844 19.077-30.011 31.761-63.645 48.432-95.056 8.019-15.112 17.249-23.738 28.765-36.905-17.982-10.513-43.141-16.899-63.455-18.431-44.467-3.354-94.982 6.952-129.899 36.91-29.717 25.495-55.957 54.804-84.849 81.23-16.051 14.681-36.135 24.874-54.611 35.751Z"/></svg>',Lines:'<svg xmlns="http://www.w3.org/2000/svg" class="icon lines-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#00C300"/><path fill="#fff" d="M861.44 469.76C861.44 313.28 704 186.08 512 186.08s-349.44 127.2-349.44 283.68C162.56 608 287 727.52 455 752c11.52 2.4 27 7.68 30.72 17.28a71.04 71.04 0 0 1 0 31.68l-5.28 29.76c0 8.64-7.2 34.56 30.24 19a1104 1104 0 0 0 274.56-202.56 251.52 251.52 0 0 0 75-175zM375.2 562.88h-69.12a17.76 17.76 0 0 1-18-18v-139.2a17.76 17.76 0 0 1 18-18 18 18 0 0 1 18 18v120.48h51a19 19 0 0 1 18 19 18 18 0 0 1-18 18zm72-18a18 18 0 1 1-36.48 0v-139.2a18 18 0 0 1 36.48 0zm167.04 0a18 18 0 0 1-12.48 17.28H596a18 18 0 0 1-14.4-7.2l-69.6-96v85.92a18 18 0 1 1-36.48 0v-139.2A18 18 0 0 1 488 388.16h5.76a18 18 0 0 1 14.4 7.2l71.52 96v-85.92a18 18 0 1 1 36.48 0zm112.32-87.84a18 18 0 0 1 18 18 17.76 17.76 0 0 1-18 18h-51v32.64h51a19 19 0 0 1 18 19 18 18 0 0 1-18 18H656a18 18 0 0 1-18-18v-139.2a18 18 0 0 1 18-18.28h69.12a18 18 0 0 1 18 18 18 18 0 0 1-18 19h-49.44v32.64zm0 0"/></svg>',Linkedin:'<svg xmlns="http://www.w3.org/2000/svg" class="icon linkedin-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#4376B1"/><path fill="#F1F2F2" d="M838.301 555.94v225.157h-130.54V571.03c0-52.746-18.847-88.766-66.112-88.766-36.069 0-57.496 24.25-66.959 47.732-3.436 8.391-4.322 20.045-4.322 31.814v219.277h-130.55s1.752-355.784 0-392.613h130.56v55.637c-.263.438-.633.867-.867 1.285h.866v-1.285c17.349-26.694 48.287-64.856 117.651-64.856 85.884 0 150.273 56.114 150.273 176.685zm-535.05-356.72c-44.655 0-73.87 29.314-73.87 67.826 0 37.695 28.368 67.855 72.157 67.855h.847c45.532 0 73.842-30.16 73.842-67.855-.866-38.512-28.31-67.825-72.975-67.825zM237.14 781.098h130.5V388.474h-130.5v392.623z"/></svg>',Pinterest:'<svg xmlns="http://www.w3.org/2000/svg" class="icon pinterest-icon" viewBox="0 0 1024 1024"><path fill="#fff" d="M512 1023.147c282.773 0 512-228.288 512-509.888 0-281.622-229.227-509.91-512-509.91S0 231.637 0 513.26c0 281.6 229.227 509.888 512 509.888z"/><path fill="#CA242D" d="M512 3.35C229.248 3.35 0 231.658 0 513.258c0 216.128 134.848 400.789 325.312 475.05-4.63-40.277-8.427-102.378 1.685-146.453 9.28-39.872 59.84-253.483 59.84-253.483s-15.168-30.634-15.168-75.541c0-70.933 41.302-123.797 92.715-123.797 43.819 0 64.896 32.725 64.896 71.765 0 43.627-27.819 109.099-42.56 169.963-12.224 50.773 25.707 92.33 75.84 92.33 91.03 0 160.981-95.68 160.981-233.344 0-122.133-88.064-207.317-214.058-207.317-145.814 0-231.36 108.693-231.36 221.163 0 43.648 16.853 90.645 37.93 116.245a15.19 15.19 0 0 1 3.371 14.699c-3.797 15.936-12.65 50.773-14.336 57.92-2.09 9.216-7.573 11.328-17.28 6.698-64.043-29.781-104.085-122.538-104.085-197.653 0-160.747 117.162-308.459 338.389-308.459 177.408 0 315.627 125.888 315.627 294.614 0 175.829-111.254 317.269-265.472 317.269-51.84 0-100.715-26.859-117.163-58.752l-32.021 121.28c-11.371 44.48-42.56 99.883-63.638 133.867A516.01 516.01 0 0 0 511.168 1024c282.752 0 512-228.31 512-509.91C1024 231.66 794.752 3.35 512 3.35z"/></svg>',Pocket:'<svg xmlns="http://www.w3.org/2000/svg" class="icon pocket-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#EE4056"/><path fill="#fff" d="M716.52 309.066c12.549 0 23.172 4.394 31.87 13.182 8.697 8.788 13.023 19.48 13.023 32.006v150.4c0 33.975-6.568 66.41-19.705 97.307-13.138 30.918-30.76 57.487-52.89 79.685-22.106 22.197-48.562 39.864-79.367 52.888-30.804 13.024-63.081 19.547-96.876 19.547a246.897 246.897 0 0 1-97.215-19.547c-30.805-13.046-57.306-30.668-79.504-52.888-22.198-22.198-39.865-48.767-53.003-79.663a246.311 246.311 0 0 1-19.728-97.33V354.255c0-12.321 4.44-22.945 13.319-31.847a43.489 43.489 0 0 1 31.87-13.341H716.52zM512.574 617.339c9.06 0 16.989-3.216 23.738-9.581l117.103-112.415a32.622 32.622 0 0 0 10.691-24.62c0-9.469-3.33-17.533-9.966-24.191a32.958 32.958 0 0 0-24.237-10.012c-9.06 0-16.988 3.171-23.737 9.56l-93.547 89.808-93.614-89.809a33.185 33.185 0 0 0-23.443-9.559c-9.468 0-17.532 3.33-24.19 9.967-6.66 6.682-9.967 14.722-9.967 24.236 0 9.83 3.443 18.03 10.419 24.599l117.33 112.413c6.342 6.342 14.179 9.56 23.466 9.56l-.046.044z"/></svg>',QQ:'<svg xmlns="http://www.w3.org/2000/svg" class="icon qq-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#5eaade"/><path fill="#fff" d="M805.25 585.542c-15-48.188-32.25-88.688-58.781-154.97 4.125-174.093-68.25-314.905-234.938-314.905-168.562 0-239.344 143.625-234.844 314.906-26.625 66.375-43.78 106.594-58.78 154.969-31.876 102.656-21.563 145.125-13.688 146.062 16.875 2.063 65.718-77.25 65.718-77.25 0 45.938 23.625 105.844 74.813 149.063-24.75 7.593-80.344 28.03-67.125 50.437 10.688 18.094 183.938 11.531 233.906 5.906 49.969 5.625 223.219 12.188 233.906-5.906 13.22-22.312-42.468-42.844-67.125-50.437 51.188-43.313 74.813-103.22 74.813-149.063 0 0 48.844 79.313 65.719 77.25 7.969-1.031 18.281-43.5-13.594-146.062z"/></svg>',Qzone:'<svg xmlns="http://www.w3.org/2000/svg" class="icon qzone-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#0985DD"/><path fill="#fff" d="M722.38 595.24c22.486-4.056 11.345-12.424 2.156-11.346-16.685 1.72-40.43 1.925-66.562 1.284l3.029 17.79a656.641 656.641 0 0 0 61.402-7.702l-.025-.026zm68.95-174.915a5.287 5.287 0 0 0-4.493-3.645L598.42 389.29l-84.326-170.628c-1.925-3.594-7.958-3.594-9.857 0L419.885 389.29l-188.417 27.39a5.338 5.338 0 0 0-4.466 3.645 5.493 5.493 0 0 0 1.488 5.57l136.36 132.92-32.088 187.519a5.263 5.263 0 0 0 2.13 5.39c1.695 1.284 3.851 1.463 5.776.385l168.651-88.407 168.524 88.638 2.567.642 3.209-1.079c1.72-1.283 2.566-3.208 2.13-5.34l-24.591-143.648c-27.21 2.156-54.37 3.183-76.42 3.183-77.267 0-135.075-3.645-135.948-3.645a16.48 16.48 0 0 1-14.785-11.757 16.247 16.247 0 0 1 5.981-17.764l155.431-113.05c-99.959-7.906-183.873-6.418-184.721-6.418-13.502.642-25.67-3.645.642-14.375 4.518-1.694 109.2-23.72 230.362-7.445 6.673.847 12.013 5.75 13.733 12.194a16.61 16.61 0 0 1-6.263 17.302L497.204 571.598c27.826 5.802 100.37 12.014 160.745 13.502l-4.519-26.312 136.308-132.97a5.338 5.338 0 0 0 1.54-5.544l.051.051z"/></svg>',Reddit:'<svg xmlns="http://www.w3.org/2000/svg" class="icon reddit-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#ff4501"/><path fill="#fff" d="M617.199 680.55c5.666 5.974 5.666 11.742 0 17.34-21.845 23.143-56.9 34.714-105.199 34.714s-83.354-11.571-105.199-34.714c-5.666-5.598-5.666-11.366 0-17.34a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38 16.93 18.295 46.728 27.408 89.361 27.408 42.325 0 72.09-9.113 89.361-27.409a10.445 10.445 0 0 1 7.919-3.379c3.174 0 5.803 1.127 7.919 3.38zm-176.06-136.635c9.182 9.694 13.756 21.47 13.756 35.294 0 13.79-4.574 25.565-13.756 35.26a44.134 44.134 0 0 1-33.28 14.54c-13.073 0-24.234-4.847-33.587-14.54a49.015 49.015 0 0 1-13.995-35.26c0-14.2 4.642-26.147 13.995-35.84 9.353-9.728 20.514-14.575 33.587-14.575 13.04 0 24.132 5.051 33.28 15.12zm222.584 35.294c0 13.79-4.642 25.565-13.995 35.26a44.954 44.954 0 0 1-33.587 14.54c-13.04 0-24.132-4.847-33.28-14.54a49.493 49.493 0 0 1-13.756-35.26c0-13.824 4.574-25.669 13.756-35.567 9.148-9.9 20.24-14.848 33.28-14.848 13.073 0 24.234 4.847 33.587 14.575 9.353 9.693 13.995 21.64 13.995 35.84zM796.433 512c0-18.295-6.144-33.963-18.5-47.036a59.494 59.494 0 0 0-44.92-19.592c-17.647 0-32.768 6.724-45.465 20.138-45.841-33.587-100.66-51.507-164.455-53.725l33.314-158.482 105.746 25.19c0 13.825 4.573 25.6 13.755 35.295 9.148 9.694 20.241 14.54 33.314 14.54 13.04 0 24.235-4.915 33.553-14.813 9.353-9.899 13.995-21.743 13.995-35.567s-4.642-25.669-13.995-35.567a44.578 44.578 0 0 0-33.553-14.814c-19.046 0-33.143 9.318-42.325 27.99L550.06 228.112c-6.69-1.877-11.094 1.126-13.21 8.977l-36.488 174.695c-63.454 2.594-117.897 20.718-163.363 54.272a59.187 59.187 0 0 0-46.011-20.685c-17.613 0-32.598 6.52-44.92 19.592a66.082 66.082 0 0 0-18.5 47.036c0 13.073 3.243 25.02 9.762 35.84 6.52 10.82 15.258 19.046 26.18 24.644a152.303 152.303 0 0 0-3.174 31.335c0 53.009 24.678 98.372 74.035 136.09 49.323 37.682 108.715 56.524 178.176 56.524 69.769 0 129.365-18.842 178.688-56.525 49.357-37.717 74.001-83.08 74.001-136.09 0-11.946-1.229-22.561-3.686-31.914 10.581-5.598 19.046-13.722 25.395-24.337 6.315-10.65 9.49-22.528 9.49-35.567z"/></svg>',Rss:'<svg xmlns="http://www.w3.org/2000/svg" class="icon rss-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#FD9B00"/><path fill="#fff" d="M687.981 740.39c0-225.92-183.617-409.777-409.21-409.777v-97.205c279.353 0 506.617 227.506 506.617 506.98H687.98zm-74.841 0h-97.538c0-63.567-24.688-123.245-69.43-167.993-44.762-44.856-104.24-69.556-167.54-69.556v-97.176c184.44 0 334.508 150.046 334.508 334.725zM346.038 605.166c37.35 0 67.514 30.357 67.514 67.39 0 37.146-30.163 67.177-67.514 67.177-37.219 0-67.458-30.03-67.458-67.176 0-37.034 30.24-67.391 67.458-67.391z"/></svg>',Steam:'<svg xmlns="http://www.w3.org/2000/svg" class="icon steam-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="488" fill="#fff"/><path fill="#13227a" d="M1008 512c0 274-222.4 496-496.8 496-227.6 0-419.2-152.6-478-360.8l190.4 78.6c12.8 64.2 69.8 112.8 137.8 112.8 78.4 0 143.8-64.8 140.4-147l169-120.4c104.2 2.6 191.6-81.8 191.6-187 0-103.2-84-187-187.4-187s-187.4 84-187.4 187v2.4L369.2 558c-31-1.8-61.4 6.8-87 24.2L16 472.2C36.4 216.8 250.2 16 511.2 16 785.6 16 1008 238 1008 512zM327.4 768.6l-61-25.2a105.58 105.58 0 0 0 54.4 51.6c53.8 22.4 115.6-3.2 138-56.8 10.8-26 11-54.6.2-80.6-10.8-26-31-46.4-57-57.2-25.8-10.8-53.4-10.4-77.8-1.2l63 26c39.6 16.4 58.4 61.8 41.8 101.4-16.6 39.8-62 58.4-101.6 42zM675 508.8c-68.8 0-124.8-56-124.8-124.6s56-124.6 124.8-124.6 124.8 56 124.8 124.6S744 508.8 675 508.8zm.2-31.2c51.8 0 93.8-42 93.8-93.6 0-51.8-42-93.6-93.8-93.6s-93.8 42-93.8 93.6c.2 51.6 42.2 93.6 93.8 93.6z"/></svg>',Twitter:'<svg xmlns="http://www.w3.org/2000/svg" class="icon twitter-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512"/><path fill="#FFF" d="m560 473 186-216h-44L540 445 411 257H262l195 284-195 226h44l171-198 136 198h149zM322 290h68l312 445h-68z"/></svg>',Wechat:'<svg xmlns="http://www.w3.org/2000/svg" class="icon wechat-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#2AAE67"/><path fill="#FFF" d="M501 417c-14 0-25-12-25-26s11-26 25-26 26 12 26 26-12 26-26 26m-144 0c-15 0-26-12-26-26s11-26 26-26 25 12 25 26-11 26-25 26m72-150c-120 0-217 82-217 183 0 55 29 104 75 138a15 15 0 0 1 6 11l-1 5-9 37-2 5c0 4 4 8 8 8l4-2 47-27c4-3 8-4 12-4l6 1a255 255 0 0 0 83 10c-5-14-7-29-7-45 0-92 88-166 197-166h9c-16-87-103-154-211-154"/><path fill="#FFF" d="M692 561c-13 0-23-10-23-23 0-12 10-22 23-22 12 0 22 10 22 22 0 13-10 23-22 23m-121 0c-12 0-23-10-23-23 0-12 11-22 23-22s23 10 23 22c0 13-11 23-23 23m179 141c38-28 62-69 62-115 0-84-81-152-181-152s-180 68-180 152 80 152 180 152a212 212 0 0 0 65-9l9 3 40 23 3 1a6 6 0 0 0 6-6l-1-5-8-30v-4c0-4 2-8 5-10"/></svg>',Weibo:'<svg xmlns="http://www.w3.org/2000/svg" class="icon weibo-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#D52C2B"/><path fill="#D52C2B" d="M256 601c0 68 91 124 203 124 113 0 203-56 203-124s-90-123-203-123c-112 0-203 55-203 123"/><path fill="#FFF" d="M464 715c-99 9-185-35-191-98-7-64 68-123 168-133 99-10 185 34 191 98 7 64-69 123-168 133m199-212c-9-2-15-4-10-15 9-23 10-44 0-58-19-27-73-26-134-1 0 0-19 8-14-7 9-29 8-54-7-68-33-33-121 1-196 75-57 55-90 114-90 165 0 97 127 156 252 156 163 0 271-93 271-167 0-44-38-69-72-80m108-177c-39-43-98-59-151-48-13 3-20 14-18 27 3 12 15 19 27 17 39-8 80 3 108 34 27 29 36 70 24 108a22 22 0 0 0 14 28c12 4 25-3 29-14 18-53 5-112-33-152"/><path fill="#FFF" d="M711 379a78 78 0 0 0-74-23c-11 2-17 12-15 22v1c2 10 12 17 23 15a38 38 0 0 1 36 11c10 10 12 24 8 36a19 19 0 0 0 13 25c10 3 21-3 25-13a74 74 0 0 0-16-74M470 599c-4 6-12 9-18 6-6-2-7-8-4-14s11-9 17-6c6 2 8 8 5 14m-32 40a38 38 0 0 1-46 15c-15-7-20-25-10-39 10-15 29-21 45-15 15 7 20 24 11 39m36-106c-47-12-101 11-121 52-21 41-1 87 47 102 49 16 108-8 128-53 20-44-5-89-54-101"/></svg>',Whatsapp:'<svg xmlns="http://www.w3.org/2000/svg" class="icon whatsapp-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#31B84C"/><path fill="#fff" d="m192.021 832 45.227-164.33a315.413 315.413 0 0 1-42.539-158.529C194.731 334.251 337.707 192 513.344 192c84.587-.213 165.76 33.28 225.387 93.013A314.453 314.453 0 0 1 832 509.376c-.085 174.848-143.04 317.141-318.656 317.141h-.15a319.61 319.61 0 0 1-152.277-38.613L192 832h.021zm241.686-455.467c-6.443-15.445-13.014-13.354-17.92-13.61-4.63-.214-9.942-.256-15.254-.256a29.227 29.227 0 0 0-21.226 9.898c-7.296 7.958-27.84 27.136-27.84 66.134s28.501 76.672 32.49 81.962c3.968 5.291 56.15 85.334 136 119.638 19.008 8.17 33.814 13.056 45.398 16.704 19.072 6.037 36.437 5.184 50.133 3.157 15.296-2.283 47.125-19.2 53.76-37.675 6.613-18.56 6.613-34.389 4.65-37.717-1.983-3.264-7.295-5.27-15.274-9.237-7.957-3.947-47.125-23.126-54.4-25.771-7.296-2.667-12.587-3.968-17.92 3.947-5.312 7.936-20.565 25.792-25.195 31.061-4.65 5.312-9.301 5.973-17.258 2.005-7.979-3.968-33.622-12.33-64-39.338-23.68-20.992-39.68-46.955-44.331-54.912-4.65-7.915-.47-12.203 3.52-16.15 3.563-3.541 7.936-9.258 11.904-13.866 3.99-4.651 5.333-7.958 7.979-13.227 2.645-5.29 1.322-9.92-.64-13.888-2.006-3.968-17.92-42.987-24.555-58.859h-.021z"/></svg>',Youtube:'<svg xmlns="http://www.w3.org/2000/svg" class="icon youtube-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#DD1829"/><path fill="#fff" d="M800.305 372.2c-12.805-42.429-22.873-65.942-65.303-71.064 0 0-113.644-5.761-226.64-5.761-111.716 0-222.797 5.761-222.797 5.761-44.992 5.122-55.7 29.915-67.223 71.065 0 0-11.524 65.527-11.524 131.886 0 68.066 11.524 137.008 11.524 137.008 8.963 39.87 27.354 65.943 67.223 71.065 0 0 123.292 7.682 240.724 7.682 106.78 0 208.714-7.682 208.714-7.682 39.87-7.682 53.78-28.635 65.303-71.065 0 0 11.523-63.022 11.523-128.045 0-69.288-11.524-140.85-11.524-140.85zM448.82 619.97V393.33l174.781 113.32L448.82 619.97z"/></svg>',Zhihu:'<svg xmlns="http://www.w3.org/2000/svg" class="icon zhihu-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#006CE2"/><path fill="#fff" d="M513.65 491.261H411.551c1.615-16.154 5.815-60.095 5.815-84.973 0-24.88-.323-60.742-.323-60.742h102.744V329.39c0-21.647-9.37-31.34-17.124-31.34h-178.67s5.169-17.77 10.015-36.186c4.846-18.417 15.832-44.264 15.832-44.264-63.003 4.2-67.958 50.941-81.743 92.729-13.787 41.785-24.556 62.356-44.586 107.912 27.786 0 55.249-13.57 66.879-32.309 11.631-18.74 16.908-40.71 16.908-40.71h62.035v59.019c0 21.107-3.878 87.45-3.878 87.45H254.742c-19.386 0-29.724 48.894-29.724 48.894h133.76c-8.4 75.82-26.493 106.191-51.91 152.716-25.418 46.525-92.728 99.406-92.728 99.406 41.033 11.63 86.589-3.555 105.974-21.972 19.386-18.417 35.863-49.756 47.817-72.838 11.954-23.081 21.972-65.124 21.972-65.124L498.462 766.86s4.846-24.233 6.461-39.418c1.616-15.186-.755-26.385-4.63-35.433-3.878-9.046-15.509-21.54-31.018-39.634-15.507-18.094-48.034-52.879-48.034-52.879s-15.832 11.63-28.108 21.001c9.046-21.97 16.262-79.695 16.262-79.695h122.343v-20.249c.003-17.66-7.319-29.29-18.089-29.29zm287.337-200.747h-234.35a4.308 4.308 0 0 0-4.309 4.308v435.099a4.308 4.308 0 0 0 4.308 4.308h40.226l14.7 50.402 81.096-50.402h98.328a4.308 4.308 0 0 0 4.308-4.308v-435.1a4.308 4.308 0 0 0-4.308-4.308zM755.97 684.47h-52.343l-61.548 39.095-10.823-39.095h-18.738V338.116H755.97v346.355z"/></svg>'}}},i=>{i.O(0,[9469,4596],(()=>i(i.s=8731))),i.O()}]);