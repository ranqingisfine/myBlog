"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2131],{6262:(e,s)=>{s.A=(e,s)=>{const i=e.__vccOpts||e;for(const[e,a]of s)i[e]=a;return i}},9623:(e,s,i)=>{i.r(s),i.d(s,{comp:()=>o,data:()=>u});var a=i(641);const t=i.p+"assets/img/1.01feadd3.webp",r=i.p+"assets/img/2.b73229b3.webp",l=i.p+"assets/img/3.34ad3bd4.webp",n=i.p+"assets/img/4.3dcc2bc0.webp",h=i.p+"assets/img/5.9bf06616.webp",p={},o=(0,i(6262).A)(p,[["render",function(e,s){return(0,a.uX)(),(0,a.CE)("div",null,s[0]||(s[0]=[(0,a.Fv)('<h1 id="_9-1-2-prometheus架构剖析" tabindex="-1"><a class="header-anchor" href="#_9-1-2-prometheus架构剖析"><span>9.1.2 Prometheus架构剖析</span></a></h1><h2 id="架构概述" tabindex="-1"><a class="header-anchor" href="#架构概述"><span>架构概述</span></a></h2><figure><img src="'+t+'" alt="Prometheus架构" tabindex="0" loading="lazy"><figcaption>Prometheus架构</figcaption></figure><p>Prometheus主要由以下部分组成：</p><ul><li>Prometheus Server</li><li>Service Discovery</li><li>Time-Series Database (TSDB)</li><li>Targets</li><li>Exporters</li><li>Push Gateway</li><li>Alert Manager</li><li>Client Libraries</li><li>PromQL</li></ul><h2 id="job-exporter" tabindex="-1"><a class="header-anchor" href="#job-exporter"><span>Job/Exporter</span></a></h2><p>Job/Exporter属于Prometheus target，是Prometheus监控的对象。</p><p>Job分为长时间执行和段时间执行两种。对于长时间执行的Job，可以使用Prometheus Client集成进行监控；对于短时间执行的Job，可以将监控数据推送到Pushgateway中缓存。</p><p>Exporter的机制是将第三方系统的监控数据按照Prometheus的格式暴露出来。Exporter 就像在目标上运行的代理。它将指标从特定系统转换为普罗米修斯可以理解的格式。它可以是系统指标，如 CPU、内存等，也可以是 Java JMX 指标、MySQL 指标等</p><figure><img src="'+r+'" alt="Prometheus架构" tabindex="0" loading="lazy"><figcaption>Prometheus架构</figcaption></figure><p>默认情况下，这些转换后的指标由 Exporter 在目标的 /metrics 路径（HTTP 端点）上公开。例如，如果要监控服务器的 CPU 和内存，则需要在该服务器上安装 Node Exporter，并且 Node Exporter 以 prometheus 指标格式在 /metrics 上公开 CPU 和内存指标。一旦 Prometheus 提取指标，它将结合指标名称、标签、值和时间戳生成结构化数据。</p><p><strong>Exporter局限性</strong>：Exporter种类繁多，每个Exporter又是独立的，每个组件各司其职。但是Exporter越多，维护压力越大，可以考虑替换为Influx Data公司开源的Telegraf统一进行管理。Telegraf支持各种类型Exporter的集成，可以实现Exporter的多合一，使用Telegraf集成Prometheus比单独使用Prometheus会拥有更低的内存使用率和CPU使用率。</p><p>在 Prometheus 配置文件中，所有 Exporter 的详细信息将在 scrape_configs 下给出。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scrape_configs:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> job_name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;node-exporter&#39;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    static_configs:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> targets:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;node-exporter1:9100&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;node-exporter2:9100&#39;]</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> job_name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;blackbox-exporter&#39;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    static_configs:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> targets:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;blackbox-exporter1:9115&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;blackbox-exporter2:9115&#39;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    metrics_path:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /probe</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> job_name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;snmp-exporter&#39;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    static_configs:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">      -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> targets:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;snmp-exporter1:9116&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;snmp-exporter2:9116&#39;]</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    metrics_path:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> /snmp</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="pushgateway" tabindex="-1"><a class="header-anchor" href="#pushgateway"><span>Pushgateway</span></a></h2><p><strong>Prometheus是拉模式为主的监控系统，它的推模式就是通过Pushgateway组件实现的。Pushgateway是支持临时性Job主动推送指标的中间网管，它本质上是一种用于监控Prometheus服务器无法抓取的资源的解决方案。</strong></p><p>Prometheus 默认使用 pull 方式来抓取指标。然而，有些场景需要将指标推送到 prometheus。让我们举一个在 Kubernetes cronjob 上运行的批处理作业的示例，该作业每天根据某些事件运行 5 分钟。在这种情况下，Prometheus 将无法使用拉机制正确抓取服务级别指标。因此，我们需要将指标推送到 prometheus，而不是等待 prometheus 拉取指标。为了推送指标，prometheus 提供了一个名为 Pushgateway 的解决方案。它是一种中间网关。</p><p>Pushgateway 需要作为独立组件运行。批处理作业可以使用 HTTP API 将指标推送到 Pushgateway。然后 Pushgateway 在 /metrics 端点上公开这些指标。然后 Prometheus 从 Pushgateway 中抓取这些指标。</p><figure><img src="'+l+'" alt="pushgateway" tabindex="0" loading="lazy"><figcaption>pushgateway</figcaption></figure><p>Pushgateway 将指标数据临时存储在内存中。它更像是一个临时缓存。Pushgateway 配置也将在 Prometheus 配置中的 scrape_configs 部分下进行配置。</p><div class="language-shell line-numbers-mode" data-highlighter="shiki" data-ext="shell" data-title="shell" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">scrape_configs:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> job_name:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;pushgateway&quot;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    honor_labels:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    static_configs:</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    -</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> targets:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [pushgateway.monitoring.svc:9091]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Pushgateway的使用场景主要有如下几种：</p><ul><li>临时/短作业</li><li>批处理作业</li><li>应用程序与Prometheus服务器之间有网络隔离，如安全性（防火墙）、连续性（不在一个网段，服务器或应用仅允许特定端口或路径访问）。</li></ul><p>Pushgateway的局限性：</p><ul><li>存在单点故障问题。如果Pushgateway从许多不同的来源手机指标时宕机，用户将失去对所有这些来源的监控，可能会触发许多不必要的告警。</li><li>Pushgateway不会自动删除推送给它的任何指标数据。因此，必须使用Pushgateway的API从推送网关中删除过期的指标</li><li>Pushgateway还有防火墙和NAT问题。推荐做法是将Prometheus移到防火墙后面，让Prometheus更加接近采集的目标</li></ul><p>注意：Pushgateway会丧失Prometheus通过UP监控指标检查实例监控状况的功能，此时Prometheus对应的拉状态的UP指标只是针对单Pushgateway服务的。</p><h2 id="服务发现-service-discovery" tabindex="-1"><a class="header-anchor" href="#服务发现-service-discovery"><span>服务发现（Service Discovery）</span></a></h2><p>Prometheus通过服务发现机制对云以及容器环境下的监控场景提供了完善的支持</p><ul><li>支持文件的服务发现（Prometheus会周期性地从文件中读取最新的target信息）</li><li>支持多种常见的服务发现组件，如Kubernetes、DNS、Zookeeper、Azure、EC2和GCE等。例如Prometheus可以使用Kubernetes的API获取容器信息的变化（如容器的创建和删除）来动态更新监控对象。</li></ul><p>通过服务发现的方式，管理员可以在不重启Prometheus服务的情况下动态发现需要监控的target实例信息。</p><p><strong>服务发现的Relabeling机制</strong>：Relabeling机制会从Prometheus包含的target实例中获取默认的元标签信息，从而对不同开发环境（测试、预发布、线上）、不同业务团队、不同组织等按照某些规则（比如标签）从服务发现注册中心返回的target实例中有选择性地采集某些Exporter实例的监控数据。</p><h2 id="prometheus服务器-prometheus-server" tabindex="-1"><a class="header-anchor" href="#prometheus服务器-prometheus-server"><span>Prometheus服务器（Prometheus Server）</span></a></h2><p>Prometheus服务器主要包含抓取、存储和查询这3个功能。</p><ul><li><p>抓取：Prometheus Server通过服务发现组件，周期性地从上面介绍的Job、Exporter、Pushgateway这3个组件中通过Http轮询的形式拉取监控指标数据。</p></li><li><p>存储：抓取到的监控数据通过一定的规则清理和数据整理（）抓取前使用服务发现提供的relabel_configs方法，抓取后使用作业内的metrics_relabel_configs方法），会把得到的结果存储到新的时间序列中进行持久化。存储系统每秒可以处理数百万个样品的摄入，使得使用一台Prometheus服务器监控数千台机器成为可能。</p><ul><li>Prometheus的存储分为本地存储和远程存储</li><li>本地存储：会直接保留到本地磁盘，性能上建议使用SSD且不要保存超过一个月的数据。记住，任何版本的Prometheus都不支持NFS，有损坏或丢失历史数据的可能。</li><li>远程存储：适用于存储大量的监控数据。Prometheus支持的远程存储包括OpenTSDB、InfluxDB、Elasticsearch、Graphite、CrateDB、Kafka、PostgreSQL、TimescaleDB、TiKV等。远程存储需要配合中间层的适配器进行转换，主要设计Prometheus中的remote_write和remote_read接口。在实际生产中，远程存储会出现各种各样的问题，需要不断进行优化、压测、架构改造甚至重写上传数据逻辑的模块等工作。</li></ul></li><li><p>查询：Prometheus持久化数据以后，客户端就可以通过PromQL语句对数据进行查询了。</p></li></ul><figure><img src="'+n+'" alt="Prometheus架构" tabindex="0" loading="lazy"><figcaption>Prometheus架构</figcaption></figure><h2 id="dashboard" tabindex="-1"><a class="header-anchor" href="#dashboard"><span>Dashboard</span></a></h2><p>Web UI、Grafana、API client可以统一理解为Prometheus的Dashboard。实际工作中使用Grafana作为前端展示界面，用户也可以直接使用Client向Prometheus Server发送请求以获取数据。</p><h2 id="alertmanager" tabindex="-1"><a class="header-anchor" href="#alertmanager"><span>Alertmanager</span></a></h2><p>Alertmanager是独立于Prometheus的一个告警组件，需要单独安装部署。Prometheus可以将多个Alertmanager配置为一个集群，通过服务发现动态发现告警集群中节点的上下线从而避免单点问题，Alertmanager也支持集群内多个实例之间的通信。</p><p>它的主要工作是根据 Prometheus 警报配置中设置的指标阈值发送警报。警报由 Prometheus 触发（注意，是由 Prometheus 进程触发原始告警）并发送到 Alertmanager。Alertmanager 对告警去重、抑制、静默、分组，最后使用各类通知媒介（电子邮件、slack 等）发出告警事件。其具体功能：</p><ul><li>Alert Deduplicating：消除重复警报</li><li>Grouping：将相关警报分组在一起</li><li>Silencing：静默维护</li><li>Routing：路由，根据严重性将警报路由到适当的接收者</li><li>Inhibition：抑制，当存在中高严重性警报时停止低严重性警报的过程</li></ul><figure><img src="'+h+'" alt="Prometheus架构" tabindex="0" loading="lazy"><figcaption>Prometheus架构</figcaption></figure><p>参考文章：https://segmentfault.com/a/1190000045089599</p>',43)]))}]]),u=JSON.parse('{"path":"/%E4%B9%9D%E3%80%81prometheus/9.1%20Prometheus%E5%85%A5%E9%97%A8/9.1.2%20Prometheus%E6%9E%B6%E6%9E%84%E5%89%96%E6%9E%90.html","title":"9.1.2 Prometheus架构剖析","lang":"zh-CN","frontmatter":{"\x3c!--cover":"/assets/images/cover2.jpg--\x3e","icon":"pen-to-square","date":"2025-05-17T00:00:00.000Z","category":["Prometheus"],"star":true,"ticky":true,"description":"9.1.2 Prometheus架构剖析 架构概述 Prometheus架构Prometheus架构 Prometheus主要由以下部分组成： Prometheus Server Service Discovery Time-Series Database (TSDB) Targets Exporters Push Gateway Alert Mana...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%B9%9D%E3%80%81prometheus/9.1%20Prometheus%E5%85%A5%E9%97%A8/9.1.2%20Prometheus%E6%9E%B6%E6%9E%84%E5%89%96%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"9.1.2 Prometheus架构剖析"}],["meta",{"property":"og:description","content":"9.1.2 Prometheus架构剖析 架构概述 Prometheus架构Prometheus架构 Prometheus主要由以下部分组成： Prometheus Server Service Discovery Time-Series Database (TSDB) Targets Exporters Push Gateway Alert Mana..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-05-17T02:57:08.000Z"}],["meta",{"property":"article:published_time","content":"2025-05-17T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-05-17T02:57:08.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"9.1.2 Prometheus架构剖析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-17T00:00:00.000Z\\",\\"dateModified\\":\\"2025-05-17T02:57:08.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"架构概述","slug":"架构概述","link":"#架构概述","children":[]},{"level":2,"title":"Job/Exporter","slug":"job-exporter","link":"#job-exporter","children":[]},{"level":2,"title":"Pushgateway","slug":"pushgateway","link":"#pushgateway","children":[]},{"level":2,"title":"服务发现（Service Discovery）","slug":"服务发现-service-discovery","link":"#服务发现-service-discovery","children":[]},{"level":2,"title":"Prometheus服务器（Prometheus Server）","slug":"prometheus服务器-prometheus-server","link":"#prometheus服务器-prometheus-server","children":[]},{"level":2,"title":"Dashboard","slug":"dashboard","link":"#dashboard","children":[]},{"level":2,"title":"Alertmanager","slug":"alertmanager","link":"#alertmanager","children":[]}],"git":{"createdTime":1747450628000,"updatedTime":1747450628000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":1}]},"readingTime":{"minutes":6.83,"words":2050},"filePathRelative":"九、prometheus/9.1 Prometheus入门/9.1.2 Prometheus架构剖析.md","localizedDate":"2025年5月17日","excerpt":"\\n<h2>架构概述</h2>\\n<figure><figcaption>Prometheus架构</figcaption></figure>\\n<p>Prometheus主要由以下部分组成：</p>\\n<ul>\\n<li>Prometheus Server</li>\\n<li>Service Discovery</li>\\n<li>Time-Series Database (TSDB)</li>\\n<li>Targets</li>\\n<li>Exporters</li>\\n<li>Push Gateway</li>\\n<li>Alert Manager</li>\\n<li>Client Libraries</li>\\n<li>PromQL</li>\\n</ul>","autoDesc":true}')}}]);