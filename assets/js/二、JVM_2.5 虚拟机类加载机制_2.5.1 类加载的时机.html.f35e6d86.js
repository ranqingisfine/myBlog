"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1984],{6262:(t,e)=>{e.A=(t,e)=>{const p=t.__vccOpts||t;for(const[t,a]of e)p[t]=a;return p}},499:(t,e,p)=>{p.r(e),p.d(e,{comp:()=>i,data:()=>r});var a=p(641);const o={},i=(0,p(6262).A)(o,[["render",function(t,e){return(0,a.uX)(),(0,a.CE)("div",null,e[0]||(e[0]=[(0,a.Fv)('<h1 id="_2-5-1-类加载的时机" tabindex="-1"><a class="header-anchor" href="#_2-5-1-类加载的时机"><span>2.5.1 类加载的时机</span></a></h1><p>类加载后，常量池就有此类的符号引用，方便对象的创建，可见书上P49页。</p><p>说明：以下描述的“类型”指的是类和接口</p><p>虚拟机的类加载机制：把描述类的数据从Class文件（也可以是二进制流）加载到内存，并对数据进行校验、转换、解析和初始化，最终形成可以被虚拟机直接使用的java类型。</p><p>加载、连接、初始化过程是在程序运行期间完成的，根据Java这个动态扩展的特点，例如可以编写一个面向接口的程序，等到运行时再指定其实际的实现类。</p><p><strong>类的生命周期</strong>：加载 验证 准备 解析 初始化 使用 卸载</p><p><strong>类加载</strong>：加载 验证 准备 解析 初始化</p><p>类加载需要按照类的生命周期顺序按部就班的进行，而解析这个是例外，它可以在初始化之后再进行后期绑定。</p><p><strong>类加载的时机</strong>：</p><ul><li><p>遇到new、getstatic、setstatic、invokestatic这四条字节码指令时</p><ul><li>使用关键字new实例化对象，例如 new Apple()</li><li>读取或设置一个类型的静态字段，例如 apple.setStaticField=&quot;123&quot;</li><li>调用一个类型的静态方法的，例如apple.getStaticMethod()</li></ul></li><li><p>反射调用的时</p></li><li><p>当初始化类，如果发现其父类未初始化，需要先触发父类的初始化</p></li><li><p>JDK8接口中定义了默认方法，如果这个接口的实现类发生了初始化，那接口要在之前发生初始化</p></li><li></li></ul><p>上面是触发类初始化的场景，对一个类型进行初始化的叫主动引用，除此之外所有引用类型不会触发初始化的叫被动引用。</p><p>类加载的时机涉及到静态代码块，这里提下：</p><ul><li>静态代码块在虚拟机加载类时执行，而且只执行1次</li><li>非静态代码块（没有被static修饰）创建对象时执行，每次创建都会执行1次</li></ul>',13)]))}]]),r=JSON.parse('{"path":"/%E4%BA%8C%E3%80%81JVM/2.5%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2.5.1%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%97%B6%E6%9C%BA.html","title":"2.5.1 类加载的时机","lang":"zh-CN","frontmatter":{"\x3c!--cover":"/assets/images/cover2.jpg--\x3e","icon":"pen-to-square","date":"2024-12-08T00:00:00.000Z","category":["JVM","虚拟机类加载机制"],"tag":["类加载的时机"],"star":true,"ticky":true,"description":"2.5.1 类加载的时机 类加载后，常量池就有此类的符号引用，方便对象的创建，可见书上P49页。 说明：以下描述的“类型”指的是类和接口 虚拟机的类加载机制：把描述类的数据从Class文件（也可以是二进制流）加载到内存，并对数据进行校验、转换、解析和初始化，最终形成可以被虚拟机直接使用的java类型。 加载、连接、初始化过程是在程序运行期间完成的，根据...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%BA%8C%E3%80%81JVM/2.5%20%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%B1%BB%E5%8A%A0%E8%BD%BD%E6%9C%BA%E5%88%B6/2.5.1%20%E7%B1%BB%E5%8A%A0%E8%BD%BD%E7%9A%84%E6%97%B6%E6%9C%BA.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"2.5.1 类加载的时机"}],["meta",{"property":"og:description","content":"2.5.1 类加载的时机 类加载后，常量池就有此类的符号引用，方便对象的创建，可见书上P49页。 说明：以下描述的“类型”指的是类和接口 虚拟机的类加载机制：把描述类的数据从Class文件（也可以是二进制流）加载到内存，并对数据进行校验、转换、解析和初始化，最终形成可以被虚拟机直接使用的java类型。 加载、连接、初始化过程是在程序运行期间完成的，根据..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-12-08T01:42:15.000Z"}],["meta",{"property":"article:tag","content":"类加载的时机"}],["meta",{"property":"article:published_time","content":"2024-12-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-12-08T01:42:15.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.5.1 类加载的时机\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-12-08T00:00:00.000Z\\",\\"dateModified\\":\\"2024-12-08T01:42:15.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1733622135000,"updatedTime":1733622135000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":1}]},"readingTime":{"minutes":1.85,"words":554},"filePathRelative":"二、JVM/2.5 虚拟机类加载机制/2.5.1 类加载的时机.md","localizedDate":"2024年12月8日","excerpt":"\\n<p>类加载后，常量池就有此类的符号引用，方便对象的创建，可见书上P49页。</p>\\n<p>说明：以下描述的“类型”指的是类和接口</p>\\n<p>虚拟机的类加载机制：把描述类的数据从Class文件（也可以是二进制流）加载到内存，并对数据进行校验、转换、解析和初始化，最终形成可以被虚拟机直接使用的java类型。</p>\\n<p>加载、连接、初始化过程是在程序运行期间完成的，根据Java这个动态扩展的特点，例如可以编写一个面向接口的程序，等到运行时再指定其实际的实现类。</p>\\n<p><strong>类的生命周期</strong>：加载\\t验证\\t准备\\t解析\\t初始化\\t使用\\t卸载</p>\\n<p><strong>类加载</strong>：加载\\t验证\\t准备\\t解析\\t初始化</p>","autoDesc":true}')}}]);