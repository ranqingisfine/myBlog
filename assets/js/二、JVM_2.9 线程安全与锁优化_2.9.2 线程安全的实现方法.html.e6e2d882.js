"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9703],{6262:(e,t)=>{t.A=(e,t)=>{const n=e.__vccOpts||e;for(const[e,r]of t)n[e]=r;return n}},4678:(e,t,n)=>{n.r(t),n.d(t,{comp:()=>a,data:()=>E});var r=n(641);const o={},a=(0,n(6262).A)(o,[["render",function(e,t){return(0,r.uX)(),(0,r.CE)("div",null,t[0]||(t[0]=[(0,r.Fv)('<h1 id="_2-9-2-线程安全的实现方法" tabindex="-1"><a class="header-anchor" href="#_2-9-2-线程安全的实现方法"><span>2.9.2 线程安全的实现方法</span></a></h1><h2 id="一、互斥同步" tabindex="-1"><a class="header-anchor" href="#一、互斥同步"><span>一、互斥同步</span></a></h2><p>互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。</p><p>synchronized和ReentrantLock是互斥同步的实现，可参考<a href="https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html" target="_blank" rel="noopener noreferrer">synchronized关键字的理解</a>文章和</p>',4)]))}]]),E=JSON.parse('{"path":"/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.2%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html","title":"2.9.2 线程安全的实现方法","lang":"zh-CN","frontmatter":{"description":"2.9.2 线程安全的实现方法 一、互斥同步 互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。 synchronized和ReentrantLock是互斥同步的实现，可参考synchronized关键字的理解文章和","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%BA%8C%E3%80%81JVM/2.9%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E4%B8%8E%E9%94%81%E4%BC%98%E5%8C%96/2.9.2%20%E7%BA%BF%E7%A8%8B%E5%AE%89%E5%85%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"2.9.2 线程安全的实现方法"}],["meta",{"property":"og:description","content":"2.9.2 线程安全的实现方法 一、互斥同步 互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。 synchronized和ReentrantLock是互斥同步的实现，可参考synchronized关键字的理解文章和"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-09T01:39:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-09T01:39:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"2.9.2 线程安全的实现方法\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-09T01:39:25.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、互斥同步","slug":"一、互斥同步","link":"#一、互斥同步","children":[]}],"git":{"createdTime":1731116365000,"updatedTime":1731116365000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":1}]},"readingTime":{"minutes":0.49,"words":148},"filePathRelative":"二、JVM/2.9 线程安全与锁优化/2.9.2 线程安全的实现方法.md","localizedDate":"2024年11月9日","excerpt":"\\n<h2>一、互斥同步</h2>\\n<p>互斥同步是最常见的并发正确性保障手段。同步是指在多个线程并发访问共享数据时，保证共享数据在同一时刻只被一条线程使用。互斥是一种手段，可以理解为互斥是因，同步是果。</p>\\n<p>synchronized和ReentrantLock是互斥同步的实现，可参考<a href=\\"https://ranqingisfine.github.io/myBlog/%E4%B8%80%E3%80%81Java%E5%9F%BA%E7%A1%80/1.2%20%E5%85%B3%E9%94%AE%E5%AD%97/1.2.2%20synchronized%E5%85%B3%E9%94%AE%E5%AD%97.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">synchronized关键字的理解</a>文章和</p>","autoDesc":true}')}}]);