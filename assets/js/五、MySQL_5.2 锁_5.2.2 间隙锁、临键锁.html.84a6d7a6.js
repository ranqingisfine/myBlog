"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[9472],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},7716:(i,s,a)=>{i.exports=a.p+"assets/img/29.58e4df85.jpg"},5183:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>c,data:()=>A});var e=a(641),n=a(7716);const t=a.p+"assets/img/40.7693541d.jpg",l=a.p+"assets/img/41.30263d77.jpg",p=a.p+"assets/img/42.e612003e.jpg",h=a.p+"assets/img/43.ee691309.jpg",r=a.p+"assets/img/44.1cfbdb01.jpg",d=a.p+"assets/img/45.b13632d7.jpg",k=a.p+"assets/img/46.2bac5cc6.jpg",g=a.p+"assets/img/47.3262ca78.jpg",o={},c=(0,a(6262).A)(o,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="_5-2-2-间隙锁、临键锁" tabindex="-1"><a class="header-anchor" href="#_5-2-2-间隙锁、临键锁"><span>5.2.2 间隙锁、临键锁</span></a></h1><h2 id="一、介绍" tabindex="-1"><a class="header-anchor" href="#一、介绍"><span>一、介绍</span></a></h2><p><strong>什么是间隙锁</strong></p><p><strong>间隙锁</strong>会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 <strong>幻读</strong> 现象；当我们采用范围条件查询数据时，InnoDB 会对这个范围内的数据进行加锁。比如有 id 为：1、3、5、7 的 4 条数据，我们查找 1-7 范围的数据。那么 1-7 都会被加上锁。2、4、6 也在 1-7 的范围中，但是不存在这些数据记录，这些 2、4、6 就被称为间隙。</p><p><strong>间隙锁的危害</strong></p><p>范围查找时，会把整个范围的数据全部锁定住，即便这个范围内不存在的一些数据，也会被无辜的锁定住，比如我要在 1、3、5、7 中插入 2，这个时候 1-7 都被锁定住了，根本无法插入 2。在某些场景下会对性能产生很大的影响</p><p><strong>间隙锁简单演示</strong></p><p>我们先把字段 a 的值修改成 1、3、5、7、9</p><ul><li>窗口 A 更新 a = 1~7 范围的数据</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test_innodb_lock </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;b5&#39;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">7</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>窗口 B 在 a = 2 的位置插入数据</li></ul><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test_innodb_lock </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;b6&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>这个时候发现窗口 B 更新 a = 2 的操作一直在等待，因为 1~7 范围的数据被间隙锁，锁住了。只有等窗口 A 执行 commit，窗口 B 的 a = 2 才能更新成功。</p><p><strong>间隙的范围？</strong></p><p>根据检索条件向下寻找最靠近检索条件的记录值A作为左区间，向上寻找最靠近检索条件的记录值B作为右区间，即锁定的间隙为（A，B] <strong>左开右闭</strong>。</p><h2 id="二、间隙锁演示" tabindex="-1"><a class="header-anchor" href="#二、间隙锁演示"><span>二、间隙锁演示</span></a></h2><p>创建数据库表：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">t</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;主键&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `age`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;年龄&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `mobile`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;手机号&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `name`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;名称&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  KEY</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `index_age`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`age`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">InnoDB AUTO_INCREMENT</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>id为主键(唯一索引)、age是普通索引、mobile没有加索引</p><p>同时插入数据如下</p><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在进行测试之前，我们先来看看t表中存在的隐藏间隙：</p><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>(-∞, 1] (1, 4] (4, 7] (7, +supernum]（其中supernum是数据库维护的最大的值。为了保证间隙锁都是左开右闭原则。）</p><p><strong>关闭自动提交</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SET</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> autocommit </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> OFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="_1、唯一索引示例" tabindex="-1"><a class="header-anchor" href="#_1、唯一索引示例"><span>1、唯一索引示例</span></a></h3><h4 id="_1-1-等值查询且数据存在示例" tabindex="-1"><a class="header-anchor" href="#_1-1-等值查询且数据存在示例"><span>1.1 等值查询且数据存在示例</span></a></h4><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>事务A 等值查询id=4，因为id是主键，同时是等值查询存在该记录,所以只会在id=4这条记录上加记录锁，不会加间隙锁。</p><p>事务B 等值查询id=5，没有锁冲突，所以查询正常，不会堵塞。(如果事务B 等值查询id=4,因为事务A加了记录锁，所以会堵塞)</p><h4 id="_1-2-等值查询且数据不存在示例" tabindex="-1"><a class="header-anchor" href="#_1-2-等值查询且数据不存在示例"><span>1.2 等值查询且数据不存在示例</span></a></h4><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>事务A 等值查询id=5，因为查询记录不存在，所以无法加记录锁，但这里会存在一个(5,7]的间隙锁。</p><p>事务B 插入一条id=6的数据，因为上面存在了(5,7]的间隙锁，所以会堵塞。</p><h4 id="_1-3-范围查询示例" tabindex="-1"><a class="header-anchor" href="#_1-3-范围查询示例"><span>1.3 范围查询示例</span></a></h4><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>事务A 范围查询id&gt;4，那么这里就会存在一个(4,+supernum]的临键(next-key)锁。</p><p>事务B 插入一条id=6的数据，因为上面存在了(4,+supernum]的临键(next-key)锁，所以会堵塞。</p><p>如果 事务B 是更新 id=7 的记录，同样会堵塞。</p><h3 id="_2、普通索引示例" tabindex="-1"><a class="header-anchor" href="#_2、普通索引示例"><span>2、普通索引示例</span></a></h3><h4 id="_2-1-等值查询值示例" tabindex="-1"><a class="header-anchor" href="#_2-1-等值查询值示例"><span>2.1 等值查询值示例</span></a></h4><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>事务A 等值查询age=4，因为age是普通索引，所以会产生临键(next-key)锁，范围(1,4]和(4,7](左开右闭原则)。</p><p>事务B 插入一个id=6、age=6的数据，因为age值在上面临键锁范围内，所以也会堵塞。</p><h4 id="_2-2-左开右闭原则" tabindex="-1"><a class="header-anchor" href="#_2-2-左开右闭原则"><span>2.2 左开右闭原则</span></a></h4><p>按照上面的例子，如果是左开右闭原则，那就是age临键锁的范围是(1,7]。</p><p>如果事务B插入一条 id=6，age=1 的数据，正常是不是不会堵塞，因为按照左开右闭原则，上面的age=1是开的，所以正常应该是可以插入的。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>但实际上你真是实践之后，你发现同样也会堵塞。</span></span>\n<span class="line"><span>通过实践之后，会发现，所谓的左开右闭原则，并不是一定是左开右闭，而是跟主键id有关系。</span></span>\n<span class="line"><span>上面的事务A 等值查询age=4，它的当前主键id=4，上一条记录主键id=1，下条记录主键id=7。</span></span>\n<span class="line"><span>如果插入 id&lt;1 ,age 在(1,7)范围内，是 **左闭右开**原则。即age=1能插入，age=7会堵塞。</span></span>\n<span class="line"><span>如果插入 1&lt;id&lt;7 ,age 在(1,7)范围内，是 **左闭右闭**原则。即age=1会堵塞，age=7也会堵塞。</span></span>\n<span class="line"><span>如果插入 id&gt;7 ,age 在(1,7)范围内，是 **左开右闭**原则。即age=1会堵塞，age=7能插入。</span></span>\n<span class="line"><span>有关等值查询值不存在、普通索引范围的示例这里就不举了，跟上面的差不多，都会产生间隙锁。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3、无锁引示例" tabindex="-1"><a class="header-anchor" href="#_3、无锁引示例"><span>3、无锁引示例</span></a></h3><h4 id="_3-1-等值查询示例" tabindex="-1"><a class="header-anchor" href="#_3-1-等值查询示例"><span>3.1 等值查询示例</span></a></h4><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>事务A</strong> 等值查询 mobile = 8888884，因为mobile是无索引的，所以这个for update，变成表级排他(X)锁。</p><p><strong>事务B</strong> 因为事务A已经加了表级的排他锁，所以其它事务无法进行任何的增删改操作。</p><h4 id="_3-2-范围查询示例" tabindex="-1"><a class="header-anchor" href="#_3-2-范围查询示例"><span>3.2 范围查询示例</span></a></h4><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>事务A</strong> 等值查询 mobile &gt; 8888884，因为mobile是无索引的，同样变成表级排他(X)锁。</p><p><strong>事务B</strong> 因为事务A已经加了表级的排他锁，所以其它事务无法进行任何的增删改操作。</p><p>参考：</p><p>https://blog.csdn.net/csdn_20150804/article/details/119766846</p><p>https://mp.weixin.qq.com/s/V3M5tkzGtmSGGiAQnFnUkw</p>',62)]))}]]),A=JSON.parse('{"path":"/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.2%20%E9%97%B4%E9%9A%99%E9%94%81%E3%80%81%E4%B8%B4%E9%94%AE%E9%94%81.html","title":"5.2.2 间隙锁、临键锁","lang":"zh-CN","frontmatter":{"\x3c!--cover":"/assets/images/cover2.jpg--\x3e","icon":"pen-to-square","date":"2024-11-15T00:00:00.000Z","category":["MySQL","间隙锁","临键锁"],"tag":["锁升级","事务"],"star":true,"ticky":true,"description":"5.2.2 间隙锁、临键锁 一、介绍 什么是间隙锁 间隙锁会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 幻读 现象；当我们采用范围条件查询数据时，InnoDB 会对这个范围内的数据进行加锁。比如有 id 为：1、3、5、7 的 4 条数据，我们查找 1-7 范围的数据。那么 1-7 都会被加上锁...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%BA%94%E3%80%81MySQL/5.2%20%E9%94%81/5.2.2%20%E9%97%B4%E9%9A%99%E9%94%81%E3%80%81%E4%B8%B4%E9%94%AE%E9%94%81.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"5.2.2 间隙锁、临键锁"}],["meta",{"property":"og:description","content":"5.2.2 间隙锁、临键锁 一、介绍 什么是间隙锁 间隙锁会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 幻读 现象；当我们采用范围条件查询数据时，InnoDB 会对这个范围内的数据进行加锁。比如有 id 为：1、3、5、7 的 4 条数据，我们查找 1-7 范围的数据。那么 1-7 都会被加上锁..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-15T09:59:14.000Z"}],["meta",{"property":"article:tag","content":"锁升级"}],["meta",{"property":"article:tag","content":"事务"}],["meta",{"property":"article:published_time","content":"2024-11-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-15T09:59:14.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.2.2 间隙锁、临键锁\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-15T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-15T09:59:14.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、介绍","slug":"一、介绍","link":"#一、介绍","children":[]},{"level":2,"title":"二、间隙锁演示","slug":"二、间隙锁演示","link":"#二、间隙锁演示","children":[{"level":3,"title":"1、唯一索引示例","slug":"_1、唯一索引示例","link":"#_1、唯一索引示例","children":[]},{"level":3,"title":"2、普通索引示例","slug":"_2、普通索引示例","link":"#_2、普通索引示例","children":[]},{"level":3,"title":"3、无锁引示例","slug":"_3、无锁引示例","link":"#_3、无锁引示例","children":[]}]}],"git":{"createdTime":1731664754000,"updatedTime":1731664754000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":1}]},"readingTime":{"minutes":4.96,"words":1488},"filePathRelative":"五、MySQL/5.2 锁/5.2.2 间隙锁、临键锁.md","localizedDate":"2024年11月15日","excerpt":"\\n<h2>一、介绍</h2>\\n<p><strong>什么是间隙锁</strong></p>\\n<p><strong>间隙锁</strong>会封锁该条记录相邻两个键之间的空白区域，防止其它事务在这个区域内插入、修改、删除数据，这是为了防止出现 <strong>幻读</strong> 现象；当我们采用范围条件查询数据时，InnoDB 会对这个范围内的数据进行加锁。比如有 id 为：1、3、5、7 的 4 条数据，我们查找 1-7 范围的数据。那么 1-7 都会被加上锁。2、4、6 也在 1-7 的范围中，但是不存在这些数据记录，这些 2、4、6 就被称为间隙。</p>\\n<p><strong>间隙锁的危害</strong></p>","autoDesc":true}')}}]);