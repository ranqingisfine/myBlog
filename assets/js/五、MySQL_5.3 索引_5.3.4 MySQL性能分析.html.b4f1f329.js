"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2660],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},95345:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>S,data:()=>O});var e=a(20641);const n=a.p+"assets/img/61.c5e40901.png",l=a.p+"assets/img/62.e09c5f6e.png",t=a.p+"assets/img/63.01bc1ef1.png",p=a.p+"assets/img/64.d663db5a.png",h=a.p+"assets/img/79.8b3fc389.png",k=a.p+"assets/img/80.1be3d1d0.png",r=a.p+"assets/img/65.66e8d101.png",d=a.p+"assets/img/66.ed1e3f43.png",g=a.p+"assets/img/67.c070d610.png",c=a.p+"assets/img/68.59f17da6.png",o=a.p+"assets/img/69.9a03835f.png",A=a.p+"assets/img/70.f0c95e7e.png",y=a.p+"assets/img/71.d1417d62.png",B=a.p+"assets/img/72.bb698a80.png",u=a.p+"assets/img/74.e39ffa50.png",b=a.p+"assets/img/75.0e37820f.png",f=a.p+"assets/img/76.7e0ba17a.png",D=a.p+"assets/img/77.c402f6cf.png",m=a.p+"assets/img/78.de34c146.png",F=a.p+"assets/img/81.85a88450.png",v=a.p+"assets/img/82.9a86e4ba.png",C=a.p+"assets/img/83.8c763b03.png",E=a.p+"assets/img/84.0604ab6d.png",N=a.p+"assets/img/85.90708851.png",x=a.p+"assets/img/86.4694cdf3.png",I=a.p+"assets/img/87.e65a3866.png",T=a.p+"assets/img/88.9d9febe1.png",L=a.p+"assets/img/89.4262517e.png",_={},S=(0,a(66262).A)(_,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="_5-3-4-mysql性能分析" tabindex="-1"><a class="header-anchor" href="#_5-3-4-mysql性能分析"><span>5.3.4 MySQL性能分析</span></a></h1><p>MySQL常见瓶颈</p><ul><li><p>CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</p></li><li><p>IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p></li><li><p>服务器硬件的性能瓶颈：top，free，iostat和vmstat来查看系统的性能状态</p></li></ul><h2 id="一、explain执行计划" tabindex="-1"><a class="header-anchor" href="#一、explain执行计划"><span>一、Explain执行计划</span></a></h2><p>使用方式：Explain+SQL语句</p><p><strong>执行计划包含的信息</strong></p><figure><img src="'+n+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>下面是各字段解释</strong></p><h3 id="id" tabindex="-1"><a class="header-anchor" href="#id"><span>id</span></a></h3><p>select查询的序列号，包含一组数字，表示查询中执行select子句或操作表的顺序</p><blockquote><p>id相同，执行顺序由上到下</p></blockquote><figure><img src="'+l+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>id不同，如果是子查询，id的序号会递增，<strong>id值越大优先级越高，越先被执行</strong></p></blockquote><figure><img src="'+t+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>id相同不同，同时存在</p></blockquote><figure><img src="'+p+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>练习</strong></p><figure><img src="'+h+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><figure><img src="'+k+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="select-type" tabindex="-1"><a class="header-anchor" href="#select-type"><span>select_type</span></a></h3><p>有哪些？</p><figure><img src="'+r+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>查询的类型，主要是用于区别普通查询、联合查询、子查询等的复杂查询：</p><blockquote><p>SIMPLE</p></blockquote><p>简单的select查询，查询中不包含子查询或者UNION。</p><blockquote><p>PRIMARY</p></blockquote><p>查询中包含复杂的子部分，最外层查询则被标记为PRIMARY</p><figure><img src="'+d+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><blockquote><p>SUBQUERY</p></blockquote><p>在FROM列表中包含的子查询被标记为DERIVED（衍生），MySQL会递归执行这些子查询，把结果放在临时表里。</p><blockquote><p>DERIVED</p></blockquote><p>在FROM列表中包含的子查询被标记为DERIVED（衍生）。MySQL会递归执行这些子查询，把结果放在临时表里。</p><blockquote><p>UNION</p></blockquote><p>若第二个SELECT出现在UNION之后，则被标记为UNION；若UNION包含在FROM子句的子查询中，外层SELECT将被标记为：DERIVED。</p><blockquote><p>UNION RESULT</p></blockquote><p>从UNION表中获取结果的SELECT。</p><h3 id="table" tabindex="-1"><a class="header-anchor" href="#table"><span>table</span></a></h3><p>显示这一行的数据是关于哪些表的</p><h3 id="type" tabindex="-1"><a class="header-anchor" href="#type"><span>type</span></a></h3><figure><img src="'+g+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>访问类型排序：type显示的是访问类型**，是较为重要的一个指标，结果值**从最好到最坏依次是：</p><p><strong>system&gt;const&gt;eq_ref&gt;ref&gt;fulltext&gt;ref_or_null&gt;index_merge&gt;unique_subquery&gt;index_subquery&gt;range&gt;index&gt;All</strong></p></li><li><p>显示查询使用了何种类型，从最好到最差依此是：<strong>system&gt;const&gt;eq_ref&gt;ref&gt;range&gt;index&gt;All</strong>，一般来说至少达到range，最好达到ref</p></li><li><p>system：<strong>表只有一行记录（等于系统表）</strong>，这是const类型的特例，平时不会出现，这个也可以忽略不计</p></li><li><p>const：<strong>表示通过索引一次就找到了，const用于比较primary key或则unique索引</strong>。因为**只匹配一行数据，所以很快。**如将主键置于where列表中，MySQL就能将该查询转换为一个常量。</p></li></ul><figure><img src="'+c+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>eq_ref：<strong>唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配</strong>（所有主键均唯一匹配）。常见于<strong>主键或唯一索引扫描</strong>。</p><figure><img src="'+o+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>ref：<strong>非唯一性索引扫描，返回匹配某个单独值的所有行</strong>（通过索引查找到多行）。本质上也是一种索引访问，它返回所有匹配某个单独值的行，然而，它可能会找到多个符合条件的行，所以它应该属于查找和扫描的混合体。</p><figure><img src="'+A+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>range：只检索给定范围的行，使用一个索引来选择行。**key列显示使用了哪个索引。一般就是在你的where语句中出现了between、&lt;、&gt;、in等的查询。**这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束于另一点，不会扫描全部索引</p><p>index：Full Index Scan，**index与All区别为index类型只遍历索引树。**这通常比All快，因为索引文件通常比数据文件小。（也就是说虽然all和index都是读全表，但index是从索引中读取的，而all是从硬盘中读的）</p><figure><img src="'+y+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>all：Full Table Scan，将遍历全表以找到匹配的行。</li></ul><p>一般来说，<strong>得保证查询至少达到range级别，最好能达到ref</strong>。</p><h3 id="possible-keys" tabindex="-1"><a class="header-anchor" href="#possible-keys"><span>possible_keys</span></a></h3><p>显示可能应用在这张表0中的索引，一个或多个。查询涉及到的字段上若存在索引，则该索引将被列出。<strong>但不一定被查询实际使用</strong>。</p><h3 id="key" tabindex="-1"><a class="header-anchor" href="#key"><span>key</span></a></h3><p>实际使用的索引。如果为NULL，则没有使用索引。<strong>查询中若使用了覆盖索引，则该索引仅出现在key列表中，不会出现在possible_keys列表中。</strong>（覆盖索引：查询的字段与建立的复合索引的个数一一吻合）</p><h3 id="key-len" tabindex="-1"><a class="header-anchor" href="#key-len"><span>key_len</span></a></h3><p>表示索引中使用的字节数，可通过该列计算查询使用的索引的长度。在不损失精确性的情况下，<strong>长度越短越好</strong>。key_len显示的值为索引字段的最大可能长度，<strong>并非实际使用长度</strong>，即key_len是根据表定义计算而得，不是通过表内检索出的.</p><h3 id="ref" tabindex="-1"><a class="header-anchor" href="#ref"><span>ref</span></a></h3><p>​ <strong>显示索引的哪一列被使用了，如果可能的话，是一个常数</strong>。哪些列或常量被用于查找索引列上的值。<strong>查询中与其它表关联的字段，外键关系建立索引</strong>。</p><figure><img src="'+B+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="rows" tabindex="-1"><a class="header-anchor" href="#rows"><span>rows</span></a></h3><p>根据表统计信息及索引选用情况，大致估算出找到所需的记录所需要读取的行数</p><figure><img src="'+u+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="extra" tabindex="-1"><a class="header-anchor" href="#extra"><span>Extra</span></a></h3><p>包含不适合在其他列中显示但十分重要的额外信息。</p><p>**Using filesort：**说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。**MySQL中无法利用索引完成的排序操作成为“文件排序”。**多产生了一次排序，这样不好需要优化。<strong>九死一生</strong></p><p>当无法使用索引列时，会使用<code>Using filesort</code>进行排序</p><figure><img src="'+b+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>**Using temporary：**使用了临时表保存中间结果，MySQL在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。<strong>必死无疑</strong></p><figure><img src="'+f+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>**Using index：**表示相应的select操作中使用了覆盖索引（Covering Index），避免访问了表的数据行，效率不错！如果同时出现using where，表明索引被用来执行索引键值的查找；如果没有同时出现using where，表明索引用来读取数据而非执行查找动作。</p><p>好事儿！！！</p><figure><img src="'+D+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li><p>Using join buffer：使用了连接缓存。</p></li><li><p>impossible where：where子句的值总是false，不能用来获取任何元组。（查询语句中where的条件不可能被满足，恒为False）</p></li></ul><figure><img src="'+m+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><ul><li>select tables optimized away：在没有GROUPBY子句的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。</li><li>distinct：优化distinct操作，在找到第一匹配的元组后即停止找相同值的动作。</li></ul><h2 id="二、索引优化" tabindex="-1"><a class="header-anchor" href="#二、索引优化"><span>二、索引优化</span></a></h2><h3 id="_1、单表" tabindex="-1"><a class="header-anchor" href="#_1、单表"><span>1、单表</span></a></h3><p><strong>建表sql</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EXISTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `article`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`author_id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`category_id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> , </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`views`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> , </span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`comments`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`title`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> VARBINARY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`content`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TEXT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT NULL</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `article`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`author_id`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`category_id`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`views`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`comments`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`title`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`content`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">VALUES</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;1&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;2&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;3&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">SELECT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> * </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">FROM</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ARTICLE;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>案例：查询<code>category_id</code>为1且<code>comments</code>大于1的情况下，<code>views</code>最多的<code>article_id</code>。</p><p>直接查有两个问题影响性能。必须要优化</p><figure><img src="'+F+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>两种优化方法。</p><p>两种优化方法。</p><p>**方法一：**创建索引<code>idx_article_ccv</code></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> idx_article_ccv</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> article(category_id,comments,views);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><figure><img src="'+v+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>得出此种方式建立的索引不符合需求。</p><p>我们发现，创建符合索引<code>idx_article_ccv</code>之后，虽然解决了全表扫描的问题，但是在<code>order by</code>排序的时候没有用到索引，MySQL居然还是用的<code>Using filesort</code>，为什么？</p><p>推论：当<code>comments &gt; 1</code>的时候<code>order by</code>排序<code>views</code>字段索引就用不上，但是当<code>comments = 1</code>的时候<code>order by</code>排序<code>views</code>字段索引就可以用上！！！<strong>所以，范围之后的索引会失效。</strong></p><figure><img src="'+C+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>方法二：</strong></p><p>我们现在知道<strong>范围之后的索引会失效</strong>，原来的索引<code>idx_article_ccv</code>最后一个字段<code>views</code>会失效，那么我们如果删除这个索引，创建<code>idx_article_cv</code>索引呢？？？？</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 创建索引 idx_article_cv */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> idx_article_cv</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> article(category_id,views);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当前索引是<code>idx_article_cv</code>，来看一下SQL执行计划。</p><figure><img src="'+E+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h3 id="_2、两表" tabindex="-1"><a class="header-anchor" href="#_2、两表"><span>2、两表</span></a></h3><p><strong>建表sql</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EXISTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `class`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`card`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EXISTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `book`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`bookid`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`card`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>explain分析</p><figure><img src="'+N+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>左连接和右连接始终有一个表在驱动的。<code>book</code>和<code>class</code>两张表都是没有使用索引，全表扫描，那么如果进行优化，索引是创建在<code>book</code>表还是创建在<code>class</code>表呢？下面进行大胆的尝试！</p><p><strong>假设一：</strong></p><p>给右表book的card字段添加索引。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 在book表创建索引 */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> idx_book_card</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> book(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">card</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+x+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p><strong>假设二：</strong></p><p>给左表的class的card添加索引</p><figure><img src="'+I+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>**结论：**左连接将索引创建在右表上更合适，右连接将索引创建在左表上更合适。这是由左连接特性决定的，LEFT JOIN条件用于确定如何从右表搜索行，左表一定都有。</p><h3 id="_3、三表" tabindex="-1"><a class="header-anchor" href="#_3、三表"><span>3、三表</span></a></h3><p><strong>sql脚本</strong></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DROP</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EXISTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `phone`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> IF</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NOT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> EXISTS</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> `phone`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`phone_id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;主键&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`card`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">10</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) UNSIGNED </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;分类&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) COMMENT </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;手机&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+T+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>在book和phone上建立索引</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 在book表创建索引 */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> idx_book_card</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> book(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">card</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">/* 在phone表上创建索引 */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> INDEX</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> idx_phone_card</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> ON</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> phone(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">card</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="'+L+'" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>优化效果很好。</p><p><strong>结论：</strong></p><p><code>JOIN</code>语句的优化：</p><ul><li><p>尽可能减少<code>JOIN</code>语句中的<code>NestedLoop</code>（嵌套循环）的总次数：<strong>永远都是小的结果集驱动大的结果集</strong>。</p></li><li><p>优先优化<code>NestedLoop</code>的内层循环。</p></li><li><p>保证<code>JOIN</code>语句中被驱动表上<code>JOIN</code>条件字段已经被索引。</p></li><li><p>当无法保证被驱动表的<code>JOIN</code>条件字段被索引且内存资源充足的前提下，不要太吝惜<code>Join Buffer</code> 的设置。</p></li></ul>',122)]))}]]),O=JSON.parse('{"path":"/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.4%20MySQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html","title":"5.3.4 MySQL性能分析","lang":"zh-CN","frontmatter":{"\x3c!--cover":"/assets/images/cover2.jpg--\x3e","icon":"pen-to-square","date":"2024-11-16T00:00:00.000Z","category":["MySQL","索引"],"tag":["explain执行计划","索引优化"],"star":true,"ticky":true,"description":"5.3.4 MySQL性能分析 MySQL常见瓶颈 CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候 IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候 服务器硬件的性能瓶颈：top，free，iostat和vmstat来查看系统的性能状态 一、Explain执行计划 使用方式：Explain+SQL语句 执行计划包含的信息 ...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%BA%94%E3%80%81MySQL/5.3%20%E7%B4%A2%E5%BC%95/5.3.4%20MySQL%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"5.3.4 MySQL性能分析"}],["meta",{"property":"og:description","content":"5.3.4 MySQL性能分析 MySQL常见瓶颈 CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候 IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候 服务器硬件的性能瓶颈：top，free，iostat和vmstat来查看系统的性能状态 一、Explain执行计划 使用方式：Explain+SQL语句 执行计划包含的信息 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-17T05:34:20.000Z"}],["meta",{"property":"article:tag","content":"explain执行计划"}],["meta",{"property":"article:tag","content":"索引优化"}],["meta",{"property":"article:published_time","content":"2024-11-16T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-17T05:34:20.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.3.4 MySQL性能分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-16T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-17T05:34:20.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、Explain执行计划","slug":"一、explain执行计划","link":"#一、explain执行计划","children":[{"level":3,"title":"id","slug":"id","link":"#id","children":[]},{"level":3,"title":"select_type","slug":"select-type","link":"#select-type","children":[]},{"level":3,"title":"table","slug":"table","link":"#table","children":[]},{"level":3,"title":"type","slug":"type","link":"#type","children":[]},{"level":3,"title":"possible_keys","slug":"possible-keys","link":"#possible-keys","children":[]},{"level":3,"title":"key","slug":"key","link":"#key","children":[]},{"level":3,"title":"key_len","slug":"key-len","link":"#key-len","children":[]},{"level":3,"title":"ref","slug":"ref","link":"#ref","children":[]},{"level":3,"title":"rows","slug":"rows","link":"#rows","children":[]},{"level":3,"title":"Extra","slug":"extra","link":"#extra","children":[]}]},{"level":2,"title":"二、索引优化","slug":"二、索引优化","link":"#二、索引优化","children":[{"level":3,"title":"1、单表","slug":"_1、单表","link":"#_1、单表","children":[]},{"level":3,"title":"2、两表","slug":"_2、两表","link":"#_2、两表","children":[]},{"level":3,"title":"3、三表","slug":"_3、三表","link":"#_3、三表","children":[]}]}],"git":{"createdTime":1731762510000,"updatedTime":1731821660000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":2}]},"readingTime":{"minutes":8.41,"words":2524},"filePathRelative":"五、MySQL/5.3 索引/5.3.4 MySQL性能分析.md","localizedDate":"2024年11月16日","excerpt":"\\n<p>MySQL常见瓶颈</p>\\n<ul>\\n<li>\\n<p>CPU：CPU在饱和的时候一般发生在数据装入内存或从磁盘上读取数据时候</p>\\n</li>\\n<li>\\n<p>IO：磁盘I/O瓶颈发生在装入数据远大于内存容量的时候</p>\\n</li>\\n<li>\\n<p>服务器硬件的性能瓶颈：top，free，iostat和vmstat来查看系统的性能状态</p>\\n</li>\\n</ul>\\n<h2>一、Explain执行计划</h2>\\n<p>使用方式：Explain+SQL语句</p>\\n<p><strong>执行计划包含的信息</strong></p>\\n<figure><figcaption></figcaption></figure>","autoDesc":true}')}}]);