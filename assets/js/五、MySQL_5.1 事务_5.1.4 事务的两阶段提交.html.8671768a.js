"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3404],{66262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,e]of s)a[i]=e;return a}},42194:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>l,data:()=>t});var e=a(20641);const n={},l=(0,a(66262).A)(n,[["render",function(i,s){return(0,e.uX)(),(0,e.CE)("div",null,s[0]||(s[0]=[(0,e.Fv)('<h1 id="_5-1-4-事务的两阶段提交" tabindex="-1"><a class="header-anchor" href="#_5-1-4-事务的两阶段提交"><span>5.1.4 事务的两阶段提交</span></a></h1><p>事务四大特性之一的持久性由事务的两阶段提交来保证。事务是数据库中一组原子性的操作，要么全部成功，要么全部失败。</p><p>在 MySQL 中，我们可以使用 <code>begin</code> 或 <code>start transaction</code> 命令开启一个事务，使用 <code>commit</code> 命令提交一个事务，或者使用 <code>rollback</code> 命令回滚一个事务。例如：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balance - </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">update</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> account </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balance </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> balance + </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">100</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> where</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面的例子是一个转账的场景，我们将 id 为 1 的账户的余额减少 100，将 id 为 2 的账户的余额增加 100。这两个操作要么同时成功，要么同时失败，不能出现中间状态。</p><h2 id="一、mysql中的日志" tabindex="-1"><a class="header-anchor" href="#一、mysql中的日志"><span>一、MySQL中的日志</span></a></h2><p>为了保证事务的 ACID 特性，MySQL 需要记录一些日志来辅助事务的执行和恢复。MySQL 中主要有两种日志：<strong>redo log 和 binlog</strong>。</p><p>**redo log 是 InnoDB 存储引擎特有的日志，用于记录数据页的物理修改，保证事务的持久性和原子性。**redo log 是循环写入的，由两部分组成：一块固定大小的内存区域（redo log buffer）和一组固定大小的磁盘文件（redo log file）。当事务对数据进行修改时，会先将修改记录到 redo log buffer 中，然后在适当的时机将其刷新到 redo log file 中。这样即使数据库发生异常重启，也可以根据 redo log 恢复数据。</p><p>**binlog 是 MySQL Server 层的日志，用于记录 SQL 语句的逻辑修改，保证事务的一致性。**binlog 是追加写入的，由一个 binlog 文件序列和一个索引文件组成。当事务提交时，会将 SQL 语句记录到 binlog 中。binlog 主要用于数据备份、恢复和主从复制。</p><h2 id="二、为什么需要两阶段提交" tabindex="-1"><a class="header-anchor" href="#二、为什么需要两阶段提交"><span>二、为什么需要两阶段提交</span></a></h2><p>如果只有 redo log 或者只有 binlog，那么事务就不需要两阶段提交。但是如果同时使用了 redo log 和 binlog，那么就需要<strong>保证这两种日志之间的一致性</strong>。否则，在数据库发生异常重启或者主从切换时，可能会出现数据不一致的情况。</p><p>​ 例如，假设我们有一个事务 T，它修改了两行数据 A 和 B，并且同时开启了 redo log 和 binlog。如果我们先写 redo log 再写 binlog，并且在写完 redo log 后数据库发生了宕机，那么在重启后，根据 redo log 我们可以恢复 A 和 B 的修改，但是 binlog 中没有记录 T 的信息，导致备份或者从库中没有 T 的修改。反之，如果我们先写 binlog 再写 redo log，并且在写完 binlog 后数据库发生了宕机，那么在重启后，根据 redo log 我们无法恢复 A 和 B 的修改，但是 binlog 中有记录 T 的信息，导致备份或者从库中有 T 的修改。</p><p>​ 为了避免这种情况，MySQL 引入了两阶段提交的机制。两阶段提交就是将一个事务分成两个阶段来提交：<strong>prepare 阶段和 commit 阶段</strong>。</p><h2 id="三、两阶段提交流程" tabindex="-1"><a class="header-anchor" href="#三、两阶段提交流程"><span>三、两阶段提交流程</span></a></h2><ol><li>在准备阶段，MySQL先将数据修改写入redo log，并将其标记为prepare状态，表示事务还未提交。然后将对应的SQL语句写入bin log。（在 prepare 阶段写 redo log 和 binlog）</li><li>在提交阶段，MySQL将redo log标记为commit状态，表示事务已经提交。然后根据sync_binlog参数的设置，决定是否将bin log刷入磁盘。（在 commit 阶段修改 redo log 的状态并落盘 binlog）</li></ol><p>redo log --&gt; prepare状态 --&gt; bin log --&gt; commit状态 --&gt; bin log刷入磁盘</p><p>通过这样的流程，MySQL可以保证在任何时刻，redo log和bin log都是逻辑上一致的。如果MySQL发生崩溃，可以根据redo log恢复数据页的状态，也可以根据bin log恢复SQL语句的执行。</p><h2 id="四、简单的示例" tabindex="-1"><a class="header-anchor" href="#四、简单的示例"><span>四、简单的示例</span></a></h2><p>假设我们有一个表test_backup如下：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">test_backup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `id`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> AUTO_INCREMENT,</span></span>\n<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">  `name`</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">InnoDB </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">utf8;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们执行以下语句：</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test_backup </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;tom&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test_backup </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;jerry&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">insert into</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> test_backup </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">values</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;herry&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这时候，MySQL会按照以下步骤进行二阶段提交：</p><ol><li>将第一条插入语句写入redo log，并标记为prepare状态。</li><li>将第一条插入语句写入bin log。</li><li>将redo log标记为commit状态。</li><li>如果sync_binlog=1，则将bin log刷入磁盘。</li><li>重复以上步骤，直到所有插入语句都完成。</li></ol><p>如果在这个过程中发生了崩溃，比如在第三步之前，那么MySQL重启后会根据redo log发现有一个prepare状态的事务，然后会去查找bin log中是否有对应的SQL语句。如果有，则说明该事务已经写入了bin log，可以提交；如果没有，则说明该事务还没有写入bin log，需要回滚。这样就可以保证数据的一致性。</p><p><strong>总结</strong>：MySQL 的两阶段提交是为了保证同时使用 redo log 和 binlog 的情况下，数据的一致性。两阶段提交将一个事务分成 prepare 阶段和 commit 阶段，<strong>在 prepare 阶段写 redo log 和 binlog，在 commit 阶段修改 redo log 的状态并落盘 binlog</strong>。这样可以避免数据库发生异常重启或者主从切换时出现数据不一致的情况。</p><p>参考文章：https://www.cnblogs.com/shoshana-kong/p/17471621.html</p>',27)]))}]]),t=JSON.parse('{"path":"/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.4%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html","title":"5.1.4 事务的两阶段提交","lang":"zh-CN","frontmatter":{"\x3c!--cover":"/assets/images/cover2.jpg--\x3e","icon":"pen-to-square","date":"2024-11-14T00:00:00.000Z","category":["MySQL","事务的两阶段提交"],"tag":["redo log","bin log"],"star":true,"ticky":true,"description":"5.1.4 事务的两阶段提交 事务四大特性之一的持久性由事务的两阶段提交来保证。事务是数据库中一组原子性的操作，要么全部成功，要么全部失败。 在 MySQL 中，我们可以使用 begin 或 start transaction 命令开启一个事务，使用 commit 命令提交一个事务，或者使用 rollback 命令回滚一个事务。例如： 上面的例子是一个...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/myBlog/%E4%BA%94%E3%80%81MySQL/5.1%20%E4%BA%8B%E5%8A%A1/5.1.4%20%E4%BA%8B%E5%8A%A1%E7%9A%84%E4%B8%A4%E9%98%B6%E6%AE%B5%E6%8F%90%E4%BA%A4.html"}],["meta",{"property":"og:site_name","content":"Java笔记"}],["meta",{"property":"og:title","content":"5.1.4 事务的两阶段提交"}],["meta",{"property":"og:description","content":"5.1.4 事务的两阶段提交 事务四大特性之一的持久性由事务的两阶段提交来保证。事务是数据库中一组原子性的操作，要么全部成功，要么全部失败。 在 MySQL 中，我们可以使用 begin 或 start transaction 命令开启一个事务，使用 commit 命令提交一个事务，或者使用 rollback 命令回滚一个事务。例如： 上面的例子是一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-15T07:41:42.000Z"}],["meta",{"property":"article:tag","content":"redo log"}],["meta",{"property":"article:tag","content":"bin log"}],["meta",{"property":"article:published_time","content":"2024-11-14T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-15T07:41:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"5.1.4 事务的两阶段提交\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-11-14T00:00:00.000Z\\",\\"dateModified\\":\\"2024-11-15T07:41:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"冉庆\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"一、MySQL中的日志","slug":"一、mysql中的日志","link":"#一、mysql中的日志","children":[]},{"level":2,"title":"二、为什么需要两阶段提交","slug":"二、为什么需要两阶段提交","link":"#二、为什么需要两阶段提交","children":[]},{"level":2,"title":"三、两阶段提交流程","slug":"三、两阶段提交流程","link":"#三、两阶段提交流程","children":[]},{"level":2,"title":"四、简单的示例","slug":"四、简单的示例","link":"#四、简单的示例","children":[]}],"git":{"createdTime":1731572500000,"updatedTime":1731656502000,"contributors":[{"name":"ranqing","email":"2516488782@qq.com","commits":1}]},"readingTime":{"minutes":4.76,"words":1427},"filePathRelative":"五、MySQL/5.1 事务/5.1.4 事务的两阶段提交.md","localizedDate":"2024年11月14日","excerpt":"\\n<p>事务四大特性之一的持久性由事务的两阶段提交来保证。事务是数据库中一组原子性的操作，要么全部成功，要么全部失败。</p>\\n<p>在 MySQL 中，我们可以使用 <code>begin</code> 或 <code>start transaction</code> 命令开启一个事务，使用 <code>commit</code> 命令提交一个事务，或者使用 <code>rollback</code> 命令回滚一个事务。例如：</p>\\n<div class=\\"language-sql line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"sql\\" data-title=\\"sql\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">begin</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">update</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> account </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">set</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> balance </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> balance - </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">100</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> where</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> id </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">update</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> account </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">set</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> balance </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> balance + </span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">100</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\"> where</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> id </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#56B6C2\\">=</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 2</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">commit</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">;</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}')}}]);